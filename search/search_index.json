{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#aurorax-documentation","title":"AuroraX Documentation","text":"<p>This documentation website provides technical details about AuroraX and its key components such as the Conjunction Search, the API, PyAuroraX, and more.</p> <p>Get Started\u00a0\u00a0 Developer Zone\u00a0\u00a0 Go to AuroraX\u00a0\u00a0</p>"},{"location":"#what-is-aurorax","title":"What is AuroraX?","text":"<p>AuroraX aims to be the world's first and foremost data platform for auroral science. The primary objective of AuroraX is to enable mining and exploration of existing and future auroral data, enabling key science and enhancing the benefits of the world's investment in auroral instrumentation. This is being accomplished with the development of key systems/standards for uniform metadata generation and search, image content analysis, interfaces to leading international tools, and a community involvement that includes more than 80% of the world's data providers.</p> <p>AuroraX will significantly lower the barrier of entry to the global network of auroral data, and provide the foundation for efficiency and inter-operability of existing auroral instrument networks and data streams. Use of cutting-edge web frameworks, enhanced metadata, and discovery tools we aim to allow for rapid access and utilization of auroral data by the space physics and citizen science communities. Enabled by key international partnerships and Canada's leading role in auroral instrumentation, AuroraX hopes to fundamentally change the data landscape for auroral science.</p>"},{"location":"#aurorax-components","title":"AuroraX Components","text":"<p>The core components of AuroraX are its metadata database and API, with all webpages and supporting programmatic tools built on top of those. The primary tool that AuroraX offers is the Conjunction Search; allowing users to search through the vast metadata database looking for times when ground-based instrumentation and satellites were in conjunction, based on the inputted search parameters (ie. distance, combinations of data sources). Using metadata filters in your search query can further enhance the Conjunction Search by reducing results down to times when certain characteristics about the data were true. For example, times when THEMIS spacecraft were in the plasma sheet, or when a machine learning algorithm determined that a THEMIS ground-based ASI had Amorphous Pulsating Aurora (APA) in its field of view.</p> <p>Below are a list of the different components we have available as part of AuroraX:</p> Component Description Open Conjunction Search Search for conjunctions between ground-based auroral instrumentation and spacecrafts Keogramist Browse ground-based auroral imager data using keograms and movies Event Explorer Explore auroral data and spacecraft locations using an interactive globe Swarm-Aurora Explore auroral and spacecraft summary data using web-based interfaces AuroraX RESTful API Interact with AuroraX programmatically using an HTTPS-based RESTful API PyAuroraX Python library for using the AuroraX API programmatically IDL-AuroraX IDL library for using the AuroraX API programmatically AuroraX Data Availability View what data is presently in the AuroraX database"},{"location":"about_the_data/availability/","title":"Data Availability","text":"<p>The Data Availability page on the AuroraX website provides an easy and quick way to see what data is in the database. You can visit the page here.</p> <p> </p> <p>Furthermore, there is a Data Statistics page that provides additional statistics about data in the AuroraX database.</p>"},{"location":"about_the_data/availability/#getting-availability-information-programmatically","title":"Getting availability information programmatically","text":"<p>The availability information is also available using different methods such as PyAuroraX or the API using HTTP requests. Have a look at the documentation on this website for more details on how to do this.</p>"},{"location":"about_the_data/categories/","title":"Data Categories","text":"<p>All data in AuroraX is considered metadata as opposed to raw data or summary data. For example, data product records contain URLs that point to the location of say, a keogram. This allows AuroraX to not be the \"owner\" of any data, but merely a centralized lookup system with links to different research group's data systems. THEMIS ASI keograms could exist at one location (UCalgary data system) while MIRACLE keograms could exist at another (FMI data system).</p> <p>AuroraX is powered by a database with two core types of data:</p> <ol> <li>ephemeris</li> <li>data products</li> </ol>"},{"location":"about_the_data/categories/#ephemeris","title":"Ephemeris","text":"<p>Ephemeris data are 1-minute location records corresponding the times that a ground-based or space-based instrument was operating. One of the defining qualities of AuroraX is that data contained in the database consists of only times that instruments definitively collected data. This allows applications such as the Conjunction Search to return more useful query results; ones where theres definitely data that can be further evaluated by researchers.</p>"},{"location":"about_the_data/categories/#example-record","title":"Example record","text":"<p>The following is an example of a ground-based ephemeris record. This is a single record from the THEMIS ASI in Gillam, Manitoba, retrieved using the PyAuroraX library:</p> <pre><code>{\n    \"data_source\": {\n        \"identifier\": 46,\n        \"program\": \"themis-asi\",\n        \"platform\": \"gillam\",\n        \"instrument_type\": \"panchromatic ASI\",\n        \"source_type\": \"ground\",\n        \"display_name\": \"THEMIS-ASI GILL\",\n    },\n    \"epoch\": datetime.datetime(2020, 1, 1, 0, 0),\n    \"location_geo\": Location(lat=56.376723, lon=-94.643664),\n    \"location_gsm\": Location(lat=None, lon=None),\n    \"nbtrace\": Location(lat=56.376723, lon=-94.643664),\n    \"sbtrace\": Location(lat=-72.76907128936035, lon=-134.6681254931047),\n    \"metadata\": {\n        \"calgary_apa_ml_v1\": \"classified as not APA\",\n        \"calgary_apa_ml_v1_confidence\": 100.0,\n        \"calgary_cloud_ml_v1\": \"classified as cloudy\",\n        \"calgary_cloud_ml_v1_confidence\": 99.94,\n        \"clausen_ml_oath\": \"classified as discrete\"\n    },\n}\n</code></pre>"},{"location":"about_the_data/categories/#data-source","title":"Data source","text":"<p>All ephemeris records contain details regarding what data source it is associated with. The level of information returned by the API and PyAuroraX library can be controlled using a \"data_source_record_format\" parameter, with this example showing the default of \"basic_info\".</p> <pre><code>{\n    \"data_source\": {\n        \"identifier\": 46,\n        \"program\": \"themis-asi\",\n        \"platform\": \"gillam\",\n        \"instrument_type\": \"panchromatic ASI\",\n        \"source_type\": \"ground\",\n        \"display_name\": \"THEMIS-ASI GILL\",\n    },\n    \"epoch\": datetime.datetime(2020, 1, 1, 0, 0),\n    \"location_geo\": Location(lat=56.376723, lon=-94.643664),\n    \"location_gsm\": Location(lat=None, lon=None),\n    \"nbtrace\": Location(lat=56.376723, lon=-94.643664),\n    \"sbtrace\": Location(lat=-72.76907128936035, lon=-134.6681254931047),\n    \"metadata\": {\n        \"calgary_apa_ml_v1\": \"classified as not APA\",\n        \"calgary_apa_ml_v1_confidence\": 100.0,\n        \"calgary_cloud_ml_v1\": \"classified as cloudy\",\n        \"calgary_cloud_ml_v1_confidence\": 99.94,\n        \"clausen_ml_oath\": \"classified as discrete\"\n    },\n}\n</code></pre>"},{"location":"about_the_data/categories/#b-trace-values","title":"B-Trace values","text":"<p>AuroraX tools such as the Conjunction Search looks for times when spacecrafts are magnetically conjugate with ground-based instruments. This is done by using the North/South B-Trace values from SSCWeb and custom generated values for the ground-based instruments. To generate these values for a ground-based instrument, we use the geographic location do one of two different calculations on it:</p> <pre><code>{\n    \"data_source\": {\n        \"identifier\": 46,\n        \"program\": \"themis-asi\",\n        \"platform\": \"gillam\",\n        \"instrument_type\": \"panchromatic ASI\",\n        \"source_type\": \"ground\",\n        \"display_name\": \"THEMIS-ASI GILL\",\n    },\n    \"epoch\": datetime.datetime(2020, 1, 1, 0, 0),\n    \"location_geo\": Location(lat=56.376723, lon=-94.643664),\n    \"location_gsm\": Location(lat=None, lon=None),\n    \"nbtrace\": Location(lat=56.376723, lon=-94.643664),\n    \"sbtrace\": Location(lat=-72.76907128936035, lon=-134.6681254931047),\n    \"metadata\": {\n        \"calgary_apa_ml_v1\": \"classified as not APA\",\n        \"calgary_apa_ml_v1_confidence\": 100.0,\n        \"calgary_cloud_ml_v1\": \"classified as cloudy\",\n        \"calgary_cloud_ml_v1_confidence\": 99.94,\n        \"clausen_ml_oath\": \"classified as discrete\"\n    },\n}\n</code></pre> <p>North B-Trace:</p> <ol> <li>If the geographic latitude is \u2265 0, the North B-Trace lat/lon equals the geographic lat/lon (above is an example of this).</li> <li>If the geographic latitude is &lt; 0, the geographic position is converted to magnetic coordinates, the latitude is set to be positive, and is converted back to geographic coordinates. These new geographic coordinates are used as the North B-Trace.</li> </ol> <p>South B-Trace:</p> <ol> <li>If the geographic latitude is \u2265 0, the geographic position is converted to magnetic coordinates, the latitude is set to be negative, and is converted back to geographic coordinates. These new geographic coordinates are used as the South B-Trace.</li> <li>If the geographic latitude is &lt; 0, the South B-Trace lat/lon equals the geographic lat/lon.</li> </ol>"},{"location":"about_the_data/categories/#metadata","title":"Metadata","text":"<p>All ephemeris records also have an additional \"metadata\" field that can contain any further values specific to that 1-min timestamp. This structure is flexible and has no restrictions. Further, these fields can be marked as \"searchable\" or not using the metadata schema for the given data source. This \"searchable\" field is purely a flag for the Conjunction Search web UI to say whether it is visible to the user as a metadata filter. It is still technically searchable using the API and PyAuroraX without this \"searchable\" flag.</p> <pre><code>{\n    \"data_source\": {\n        \"identifier\": 46,\n        \"program\": \"themis-asi\",\n        \"platform\": \"gillam\",\n        \"instrument_type\": \"panchromatic ASI\",\n        \"source_type\": \"ground\",\n        \"display_name\": \"THEMIS-ASI GILL\",\n    },\n    \"epoch\": datetime.datetime(2020, 1, 1, 0, 0),\n    \"location_geo\": Location(lat=56.376723, lon=-94.643664),\n    \"location_gsm\": Location(lat=None, lon=None),\n    \"nbtrace\": Location(lat=56.376723, lon=-94.643664),\n    \"sbtrace\": Location(lat=-72.76907128936035, lon=-134.6681254931047),\n    \"metadata\": {\n        \"calgary_apa_ml_v1\": \"classified as not APA\",\n        \"calgary_apa_ml_v1_confidence\": 100.0,\n        \"calgary_cloud_ml_v1\": \"classified as cloudy\",\n        \"calgary_cloud_ml_v1_confidence\": 99.94,\n        \"clausen_ml_oath\": \"classified as discrete\"\n    },\n}\n</code></pre> <p>In this example, there exists several metadata fields all representing classifications from different machine learning models.</p>"},{"location":"about_the_data/categories/#gsm-locations","title":"GSM locations","text":"<p>Please note that GSM data is only available for space-based instruments. This is why the \"location_gsm\" values are <code>None</code>.</p> <pre><code>{\n    \"data_source\": {\n        \"identifier\": 46,\n        \"program\": \"themis-asi\",\n        \"platform\": \"gillam\",\n        \"instrument_type\": \"panchromatic ASI\",\n        \"source_type\": \"ground\",\n        \"display_name\": \"THEMIS-ASI GILL\",\n    },\n    \"epoch\": datetime.datetime(2020, 1, 1, 0, 0),\n    \"location_geo\": Location(lat=56.376723, lon=-94.643664),\n    \"location_gsm\": Location(lat=None, lon=None),\n    \"nbtrace\": Location(lat=56.376723, lon=-94.643664),\n    \"sbtrace\": Location(lat=-72.76907128936035, lon=-134.6681254931047),\n    \"metadata\": {\n        \"calgary_apa_ml_v1\": \"classified as not APA\",\n        \"calgary_apa_ml_v1_confidence\": 100.0,\n        \"calgary_cloud_ml_v1\": \"classified as cloudy\",\n        \"calgary_cloud_ml_v1_confidence\": 99.94,\n        \"clausen_ml_oath\": \"classified as discrete\"\n    },\n}\n</code></pre>"},{"location":"about_the_data/categories/#data-products","title":"Data Products","text":"<p>In addition to ephemeris metadata, AuroraX also contains metadata representing data products. There are several different types currently: keogram, montage, average, movie, summary_plot, data_availability, and gridded_data.</p> <p>Keograms are the most recognizable data product for ground-based ASIs; they are images that represent a period of time for imaging. More information about them can be found here.</p> THEMIS ASI hourly keogram from Gillam, MB, representing the hour 2008-09-04 UT07 <p>AuroraX contains data product records for an assortment of different keograms and are used by web applications such as Keogramist. Below is an example of a daily keogram record in AuroraX:</p> <pre><code>{\n    \"data_source\": {\n        \"identifier\": 103,\n        \"program\": \"trex\",\n        \"platform\": \"gillam\",\n        \"instrument_type\": \"RGB ASI\",\n        \"source_type\": \"ground\"\n        \"display_name\": \"TREx RGB GILL\",\n    },\n    \"data_product_type\": \"keogram\",\n    \"start\": datetime.datetime(2020, 1, 1, 0, 0),\n    \"end\": datetime.datetime(2020, 1, 1, 23, 59),\n    \"url\": \"https://data.phys.ucalgary.ca/sort_by_project/TREx/RGB/stream2/2020/01/01/gill_rgb-04/20200101__gill_rgb-04_full-keogram.jpg\"\n    \"metadata\": {\n        \"imaging_end_time\": \"2020-01-01T13:16:00.000000\",\n        \"imaging_start_time\": \"2019-12-31T23:30:00.000000\",\n        \"keogram_type\": \"daily\"\n    },\n}\n</code></pre>"},{"location":"about_the_data/categories/#data-source_1","title":"Data Source","text":"<p>Identical to the ephemeris records, each data product record contains the information about the data source that it is associated with. The level of information returned by the API and PyAuroraX library can be controlled using a \"data_source_record_format\" parameter, with this example showing the default of \"basic_info\".</p> <pre><code>{\n    \"data_source\": {\n        \"identifier\": 103,\n        \"program\": \"trex\",\n        \"platform\": \"gillam\",\n        \"instrument_type\": \"RGB ASI\",\n        \"source_type\": \"ground\"\n        \"display_name\": \"TREx RGB GILL\",\n    },\n    \"data_product_type\": \"keogram\",\n    \"start\": datetime.datetime(2020, 1, 1, 0, 0),\n    \"end\": datetime.datetime(2020, 1, 1, 23, 59),\n    \"url\": \"https://data.phys.ucalgary.ca/sort_by_project/TREx/RGB/stream2/2020/01/01/gill_rgb-04/20200101__gill_rgb-04_full-keogram.jpg\"\n    \"metadata\": {\n        \"imaging_end_time\": \"2020-01-01T13:16:00.000000\",\n        \"imaging_start_time\": \"2019-12-31T23:30:00.000000\",\n        \"keogram_type\": \"daily\"\n    },\n}\n</code></pre>"},{"location":"about_the_data/categories/#data-product-type","title":"Data Product Type","text":"<p>As mentioned, there exist several different data product types. These types can be used to filter on when doing data product searches; for example, searching AuroraX for all keograms from the Fort Smith THEMIS ASI on a specific day.</p> <pre><code>{\n    \"data_source\": {\n        \"identifier\": 103,\n        \"program\": \"trex\",\n        \"platform\": \"gillam\",\n        \"instrument_type\": \"RGB ASI\",\n        \"source_type\": \"ground\"\n        \"display_name\": \"TREx RGB GILL\",\n    },\n    \"data_product_type\": \"keogram\",\n    \"start\": datetime.datetime(2020, 1, 1, 0, 0),\n    \"end\": datetime.datetime(2020, 1, 1, 23, 59),\n    \"url\": \"https://data.phys.ucalgary.ca/sort_by_project/TREx/RGB/stream2/2020/01/01/gill_rgb-04/20200101__gill_rgb-04_full-keogram.jpg\"\n    \"metadata\": {\n        \"imaging_end_time\": \"2020-01-01T13:16:00.000000\",\n        \"imaging_start_time\": \"2019-12-31T23:30:00.000000\",\n        \"keogram_type\": \"daily\"\n    },\n}\n</code></pre>"},{"location":"about_the_data/categories/#metadata_1","title":"Metadata","text":"<p>Much like the ephemeris records, data product records also have a flexible metadata structure that can contain any number and type of fields.</p> <pre><code>{\n    \"data_source\": {\n        \"identifier\": 103,\n        \"program\": \"trex\",\n        \"platform\": \"gillam\",\n        \"instrument_type\": \"RGB ASI\",\n        \"source_type\": \"ground\"\n        \"display_name\": \"TREx RGB GILL\",\n    },\n    \"data_product_type\": \"keogram\",\n    \"start\": datetime.datetime(2020, 1, 1, 0, 0),\n    \"end\": datetime.datetime(2020, 1, 1, 23, 59),\n    \"url\": \"https://data.phys.ucalgary.ca/sort_by_project/TREx/RGB/stream2/2020/01/01/gill_rgb-04/20200101__gill_rgb-04_full-keogram.jpg\"\n    \"metadata\": {\n        \"imaging_end_time\": \"2020-01-01T13:16:00.000000\",\n        \"imaging_start_time\": \"2019-12-31T23:30:00.000000\",\n        \"keogram_type\": \"daily\"\n    },\n}\n</code></pre>"},{"location":"about_the_data/metadata_in_aurorax/","title":"What metadata is in the AuroraX database?","text":"<p>The AuroraX database contains metadata from numerous ground-based and space-based system. Below we have a few tables that outline what we currently have metadata for.</p> <p>Note</p> <p>The \"operational status\" column is an indicator of the mission/project status, instead of an AuroraX-specific operational indicator.</p>"},{"location":"about_the_data/metadata_in_aurorax/#ground-based","title":"Ground-based","text":"Project/Instrument Name Type Description Operational Status AuroraX usage AuroraMAX ASI HD colour DSLR all-sky imager in Yellowknife, NWT, Canada. 6s cadence, 4s exposure (more info) Operational Conjunction Search, Keogramist REGO ASI Redline all-sky imager array deployed across Canada and US. 3s cadence, 2s exposure, deep-cooled detector (more info) Operational Conjunction Search, Swarm-Aurora CGSM/GO-Canada Rainbow ASI CMYG colour all-sky imager array deployed across Canada. 6s cadence, 5s exposure (more info) Decommissioned Conjunction Search, Swarm-Aurora THEMIS ASI White-light all-sky imager array deployed across Canada and US. 3s cadence, 1s exposure (more info) Operational Conjunction Search, Swarm-Aurora TREx Blueline ASI Blueline all-sky imager array deployed across Canada. 3s cadence, ~2.99s exposure, 1Hz-10Hz burst mode (more info) Operational Conjunction Search, Swarm-Aurora TREx RGB ASI RGB colour all-sky imager array deployed across Canada. 3s cadence, 3s exposure, 3Hz burst mode (more info) Operational Conjunction Search, Keogramist, Swarm-Aurora TREx NIR ASI Near-infrared all-sky imager array deployed across Canada. 6s cadence, 5s exposure (more info) Operational Conjunction Search, Swarm-Aurora TREx Spectrograph Spectrograph Spectrograph imager array deployed across Canada. 15s cadence, 13s exposure (more info) Operational Conjunction Search, Swarm-Aurora CGSM/GO-Canada Riometers Riometer Wide-beam riometers deployed across Canada (more info) Operational Conjunction Search"},{"location":"about_the_data/metadata_in_aurorax/#space-based","title":"Space-based","text":""},{"location":"about_the_data/metadata_in_aurorax/#with-on-board-instrument-metadata","title":"With on-board instrument metadata","text":"<p>For some satellites, AuroraX contains metadata about the operational state and quality of some onboard instruments. Below is the list outlining what instruments this includes.</p> Project/Instrument Name Orbit Type Description Operational Status AuroraX usage ePOP/Cassiope LEO Satellite collecting data on space storms and associated plasma outflows from the Earth\u2019s ionosphere. All instruments onboard have metadata in AuroraX (CER, FAI, GAP, IRM, MGF, NMS, RRI, SEI) Operational Conjunction Search, Swarm-Aurora FAST HEO Satellite studying plasma physics. FAST ESA IES (ElectroStatic Analyzer Ion) keograms are available in Swarm-Aurora. Decommissioned Conjunction Search, Swarm-Aurora Swarm LEO Consellation of satellites studying the magnetic field. Metadata from the Thermal Ion Imagers are in AuroraX Operational Conjunction Search, Swarm-Aurora"},{"location":"about_the_data/metadata_in_aurorax/#only-spacecraft-location-metadata","title":"Only spacecraft location metadata","text":"Project/Instrument Name Orbit Type Description Operational Status AuroraX usage Arase (ERG) HEO Satellite studying the Van Allen radiation belts Operational Conjunction Search, Swarm-Aurora Cluster HEO Satellite studying the Earth's magnetic environment and its interaction with the solar wind in three dimensions. Only Cluster-1 is in AuroraX Operational Conjunction Search, Swarm-Aurora DMSP LEO Set of satellites monitoring meteorological, oceanographic, and solar-terrestrial physics. DMSP-08 to DMSP-21 are in AuroraX Operational Conjunction Search, Swarm-Aurora MMS HEO Constellation of satellites measuring magnetic field lines and charged particles in 3 dimensions. Only MMS-1 is in AuroraX and Swarm-Aurora. Operational Conjunction Search, Swarm-Aurora NOAA LEO Set of satellites. NOAA-8 to NOAA-20 are integrated into AuroraX and Swarm-Aurora. Operational Conjunction Search, Swarm-Aurora RBSP HEO Two satellites studying the Van Allen radiation belts Decommissioned Conjunction Search, Swarm-Aurora SAMPEX LEO Satellite measuring energetic electrons and ion composition of particle populations in the near polar orbit Decommissioned Conjunction Search, Swarm-Aurora THEMIS HEO Constellation of satellites studying substorms Operational Conjunction Search, Swarm-Aurora"},{"location":"about_the_data/overview/","title":"About AuroraX Data","text":"<p>The AuroraX platform contains a significant amount of data, in various formats and specifications. Below, we give a brief introduction to the main categories, and in the other pages in this section we go into some more depth on different aspects of the data.</p>"},{"location":"about_the_data/overview/#introduction","title":"Introduction","text":"<p>AuroraX currently has metadata derived from several ground-based ASI arrays, satellites, and satellite instruments in its database. The database contains two data categories: </p> <ol> <li>ephemeris records which provide location and operational information for a given ground/space instrument</li> <li>metadata about data products such as keograms or other summary plots (no data product images are stored, URLs are used as unique identifiers).</li> </ol> <p>We are  working hard to add more and the below list will be updated as any new metdata are integrated. If you're interested in getting your additional metadata into the system, please reach out to Eric Donovan and/or Darren Chaddock.</p>"},{"location":"about_the_data/overview/#links-to-more-information","title":"Links to more information","text":"<p>You can find more information about AuroraX data using the following links:</p> <ul> <li>What metadata is in the AuroraX database?</li> <li>Data Categories</li> <li>Ground-based instrument descriptions</li> <li>Space-based instrument descriptions</li> <li>Data Availability</li> <li>AuroraX data policy</li> <li>Some recommended standards</li> <li>Main website data information</li> </ul>"},{"location":"about_the_data/policy/","title":"Data Policy","text":"<p>Since AuroraX is a global repository of metadata describing the world's auroral imaging data, our data policy is one focussed towards openness and accurate ownerhsip. The following are the rules we adhere to:</p> <ul> <li>AuroraX does not consider itself the \"owner\" of any data in the database. It is merely a data aggregation system to allow for faster discovery of distributed auroral datasets.</li> <li>All data in AuroraX is metadata and/or summary data. Raw data should be retrieved using each data provider's custom websites.</li> <li>AuroraX does not need to house any summary data on its servers, though this is beneficial for web/API/toolkit performance.</li> </ul>"},{"location":"about_the_data/standards/","title":"Recommended Standards","text":"<p>Over the years of providing auroral data, we (UCalgary) have found a few standards that have been very beneficial to adhere to. Though we don't require any specific data standards in AuroraX, we do outline some of our recommendations in the following sections. These recommendations are from the UCalgary group.</p>"},{"location":"about_the_data/standards/#synchronized-data-acquisition","title":"Synchronized data acquisition","text":"<p>As our ground-based auroral imaging systems have become more distributed across the world, we have found it important to synchronize the times that all systems take a picture. We do this with two strategies: 1) all data acquisition computers have their time synchronized using GPS clocks, and 2) data acquisition software is written to initiate each image collection at the same time.</p> <p>Since all our systems are Linux-based, we can leverage services such as NTP and chronyd to synchronize the computer's time with external timing sources (ie. locally attached GPS, remote time servers, etc.).</p> <p>Regarding point #2, we can use THEMIS as an example. The THEMIS ASI array consists of 20 ASIs across Canada, the US, and Greenland, and collects a 1-second exposure at a 3-second cadence. The data acquisition software for each instrument initiates an exposure at the the second 0, 3, 6, ..., 51, 54, 57. We do this so that the data produced is easier to use, consistent, and summary products such as keograms can be trivially created (as discussed below). This strategy is in contrast to starting an image exposure every 3-seconds when the software started running (ie. 1, 4, 7; or another day it could be 2, 5, 8; or another day it could be 0, 3, 6). We found that this approach causes some headaches down the road, most notably prohibiting keograms from being as accurate as they could be.</p>"},{"location":"about_the_data/standards/#keograms","title":"Keograms","text":"<p>The keograms that we generate for UCalgary projects such as THEMIS, REGO, and TREx are formatted in a way that is most beneficial for comparing to others quickly. The have the following specifications:</p> <ul> <li>\"full-bleed\" images; there are no axes or borders</li> <li>white columns signify times where there is no data for the corresponding time (ie. image initialized to white, and then filled in with data for each column)</li> <li>hourly and daily keograms are generated</li> <li>daily keograms are 720px wide. A column of pixels represents the data from images every 10 minutes</li> <li>keograms are byte scaled using one of two methods:<ul> <li>99th percentile (min is 1st percentile, max is 99th percentile), or</li> <li>min and max are statically set values which are the same across an instrument array (ie. all of REGO has the same min and max scaling)</li> </ul> </li> </ul> Hourly keogram from the THEMIS ASI in Whitehorse, Canada (2015-01-04 UT13). Daily keogram from the THEMIS ASI in Whitehorse, Canada (2015-01-04). Note: the black border is only for illustrating the inclusion of white pixels. <p>By sticking to this standard, we can easily stack many keograms vertically and compare them, as seen below.</p> Top single frame strip from left to right: TREx Blueline, TREx NIR, TREx RGB, REGO   Stacked keograms from top to bottom: TREx Blueline, TREx NIR, TREx RGB, REGO"},{"location":"about_the_data/instruments/ground/","title":"Ground-based Instruments","text":"<p>The only ground-based instrument currently in AuroraX are All Sky Imagers (ASIs). More will follow as we add more datasets to AuroraX.</p>"},{"location":"about_the_data/instruments/ground/#all-sky-imagers","title":"All Sky Imagers","text":"<p>All Sky Imagers are cameras that collect images of auroral phenomenon using a wide-angle fisheye lens. The \"all sky\" aspect is what differentiates them from other types of auroral data since they capture horizon-to-horizon images.</p>"},{"location":"about_the_data/instruments/ground/#examples-of-data","title":"Examples of data","text":"Single image from the AuroraMAX ASI in Yellowknife, NWT, Canada. Several images from the Transition Region Explorer (TREx) project.      Your browser does not support the video tag."},{"location":"about_the_data/instruments/ground/#keograms","title":"Keograms","text":"<p>Keograms are images that represent a period of time of data from an ASI. The centre column of each frame is extracted and stacked left-to-right to form the keogram. North is at the top, south at the bottom, and time runs from left-to-right.</p>      Your browser does not support the video tag.    <p>Below is one example of keograms with several stacked vertically. The top frames are all from a certain time identified by the red lines, each image is from a different ASI (left to right and top to bottom: TREx Blueline, TREx NIR, TREx RGB, REGO).</p> <p></p>"},{"location":"about_the_data/instruments/space/","title":"Space-based Instruments","text":"<p>AuroraX contains footprints for satellites and operating flags for several onboard instruments. Below we discuss these data in more depth.</p>"},{"location":"about_the_data/instruments/space/#satellite-footprints","title":"Satellite Footprints","text":"<p>Three sets of satellite location information are contained in AuroraX, all of which are retrieved from SSCWeb: geographic lat/lon, North B-Trace geo lat/lon, and South B-Trace geo lat/lon. The B-Trace values are the magnetic footprints for a satellite in each hemisphere, mapped in geographic coordinates. These B-Trace values are used for the conjunction search algorithm.</p>"},{"location":"about_the_data/instruments/space/#swarm","title":"Swarm","text":"<p>Metadata is included signifying if the Thermal Ion Imager (TII) is operating, and it's data quality, for each Swarm satellite. This information is determined from a combination of two sets of files available on the Swarm data website: the baselined data, and the general operation data (second is used in the case there is no baselined data available).</p>"},{"location":"about_the_data/instruments/space/#epop","title":"ePOP","text":"<p>Metadata is included signifying if each ePOP instrument is operating. This information is determined using availability text files found on the ePOP data website.</p>"},{"location":"code/installation/","title":"Installation","text":"<p>PyAuroraX and IDL-AuroraX libraries require developers to do a few steps to install the code. Below, we'll go over those steps. You can also find this information on the README pages for each respective code repository on Github.</p>"},{"location":"code/installation/#pyaurorax","title":"PyAuroraX","text":"<p>You can install PyAuroraX using pip, and import it like so:</p> <pre><code>$ pip install pyaurorax\n$ python\n&gt;&gt;&gt; import pyaurorax\n&gt;&gt;&gt; aurorax = pyaurorax.PyAuroraX()\n</code></pre> <p>More installation details can be found on the readme of the code repository on Github.</p>"},{"location":"code/installation/#idl-aurorax","title":"IDL-AuroraX","text":"<p>Since IDL 8.7.1, there exists an IDL package manager called ipm. We can use this to install the IDL-AuroraX library with a single command. </p> <p>This is the recommended way of installing the IDL-AuroraX library, but, refer to the Github repository README file for additional installation methods.</p> <ol> <li> <p>From the IDL command prompt, run the following:</p> <pre><code>IDL&gt; ipm,/install,'https://data.aurorax.space/data/software/idl-aurorax/latest.zip'\n</code></pre> </li> <li> <p>Add the following to your startup file, or run the command manually using the IDL command prompt:</p> <pre><code>[ open your startup.pro file and put the following in it ]\n.run aurorax_startup\n</code></pre> </li> <li> <p>[OPTIONAL] If you added the above line to your startup file, you must reset your IDL session. Do this by either clicking the Reset button in the IDL editor or by typing <code>.reset</code> into the IDL command prompt.</p> </li> </ol> <p>For further information, you can view what packages are installed using <code>ipm,/list</code>. You can also view the package details using <code>ipm,/query,'idl-aurorax'</code>.</p>"},{"location":"code/overview/","title":"Developer Zone","text":"<p>AuroraX has several tools available for writing software. The PyAuroraX and IDL-AuroraX libraries are available to use for data analysis support of All-Sky Imager (ASI) data, and for interacting with with the AuroraX Search Engine (e.g., performing conjunction searches, ephemeris searches, uploading data, etc.).</p>"},{"location":"code/overview/#getting-started","title":"Getting started","text":"<p>The easiest way to get started is to delve into the Python library PyAuroraX, or the IDL library IDL-AuroraX.</p> <p>Install Software\u00a0\u00a0 Getting Started Guide\u00a0\u00a0 Basic Usage Guides\u00a0\u00a0</p>"},{"location":"code/overview/#links-to-resources","title":"Links to resources","text":"<p>Below is a list of resources for programmatically interacting with AuroraX:</p> <ul> <li>PyAuroraX code repository</li> <li>PyAuroraX API reference documentation</li> <li>IDL-AuroraX code repository</li> <li>IDL-AuroraX API reference documentation</li> <li>Interactive Swagger API documentation</li> </ul>"},{"location":"code/upgrading/","title":"Upgrading","text":"<p>PyAuroraX and IDL-AuroraX libraries require developers to do a few steps to upgrade already-installed packages to the latest version. Below, we'll go over those steps. You can also find this information on the README pages for each respective code repository on Github.</p>"},{"location":"code/upgrading/#pyaurorax","title":"PyAuroraX","text":"<p>You can upgrade PyAuroraX using pip:</p> <pre><code>$ pip install --upgrade pyaurorax\n</code></pre> <p>More details can be found on the readme of the code repository on Github.</p>"},{"location":"code/upgrading/#idl-aurorax","title":"IDL-AuroraX","text":"<p>You can upgrade IDL-AuroraX using the <code>ipm</code> command:</p> <pre><code>IDL&gt; ipm,/update,'idl-aurorax'\n</code></pre> <p>More details can be found on the readme of the code repository on Github.</p>"},{"location":"code/advanced_usage/search/advanced_conjunctions/","title":"Advanced conjunction searches","text":"<p>AuroraX's search engine provides an interface for running powerful and highly customizable conjunction search requests. While the basic usage section covers the quickest way to get started with conjunction searches, there are additional options for more advanced uses. This section will provide examples for some common complex searches.</p>"},{"location":"code/advanced_usage/search/advanced_conjunctions/#multi-conjunction-searches","title":"Multi-conjunction searches","text":"<p>Conjunctions are events between at least two data sources. A conjunction event with more than two data sources are  called a multi-conjunction. For example, a conjunction between three data sources, is often referred to as a triple-conjunction event.</p> <p>In AuroraX, the number of data sources involved in a conjunction is determined by the number of criteria blocks in the query.</p> <p>Criteria block limits</p> <p>Please note, AuroraX imposes a limit of 10 criteria blocks in a search query.</p> <p>Below, we'll have a look at an example of a quadruple-conjunction search, using two ground and two space criteria blocks (4 total criteria blocks).</p> <p>Example - search for quadruple-conjunctions</p> <p>This example is a search to find quadruple-conjunctions (4 criteria blocks). </p> PythonIDL <p>In PyAuroraX, we use the \"ground\" and \"space\" parameters to define multiple criteria blocks in each.</p> <pre><code># imports\nimport datetime\nimport pyaurorax\naurorax = pyaurorax.PyAuroraX()\n\n# set query parameters\nstart = datetime.datetime(2020, 1, 1, 0, 0, 0)\nend = datetime.datetime(2020, 1, 4, 23, 59, 59)\nground_params = [\n    {\"programs\": [\"themis-asi\"]},\n    {\"programs\": [\"trex\"]},\n]\nspace_params = [\n    {\"programs\": [\"swarm\"], \"hemisphere\": [\"northern\"]},\n    {\"programs\": [\"themis\"], \"hemisphere\": [\"northern\"]}\n]\ndistance = 500\n\n# perform the search\ns = aurorax.search.conjunctions.search(start=start,\n                                       end=end,\n                                       distance=distance,\n                                       ground=ground_params,\n                                       space=space_params,\n                                       verbose=True)\n\n# view the results\nprint(s.data)\n</code></pre> <p>Example output from this search would be:</p> <pre><code>[2022-03-02 19:58:42.910237] Search object created\n[2022-03-02 19:58:43.109389] Request submitted\n[2022-03-02 19:58:43.109494] Request ID: 701eecb6-b8cd-44f4-83c5-32f8b80e5ca8\n[2022-03-02 19:58:43.109509] Request details available at: https://api.aurorax.space/api/v1/conjunctions/requests/701eecb6-b8cd-44f4-83c5-32f8b80e5ca8\n[2022-03-02 19:58:43.109515] Waiting for data ...\n[2022-03-02 19:58:44.201872] Checking for data ...\n[2022-03-02 19:58:45.275906] Checking for data ...\n[2022-03-02 19:58:45.349495] Data is now available\n[2022-03-02 19:58:45.353346] Retrieving data ...\n[2022-03-02 19:58:45.446223] Retrieved 93.6 kB of data containing 8 records\n\n[\n    Conjunction(start=datetime.datetime(2020, 1, 3, 12, 33), end=datetime.datetime(2020, 1, 3, 12, 34), min_distance=257.47, max_distance=257.71, data_sources=[...], events=[...]),\n    Conjunction(start=datetime.datetime(2020, 1, 3, 12, 33), end=datetime.datetime(2020, 1, 3, 12, 34), min_distance=257.47, max_distance=449.17, data_sources=[...], events=[...]),\n    Conjunction(start=datetime.datetime(2020, 1, 3, 12, 33), end=datetime.datetime(2020, 1, 3, 12, 34), min_distance=257.47, max_distance=257.71, data_sources=[...], events=[...]),\n    ...\n    ...\n    ...\n]\n</code></pre> <p>In IDL-AuroraX, we use the \"ground\" and \"space\" parameters to define multiple criteria blocks in each.</p> <pre><code>; define timeframe and distance parameters\ndistance = 500\nstart_dt = '2020-01-01T00:00:00'\nend_dt = '2020-01-04T23:59:59'\n\n; create ground criteria blocks\nground1 = aurorax_create_criteria_block(programs=['themis-asi'],/GROUND)\nground2 = aurorax_create_criteria_block(programs=['trex'],/GROUND)\nground = list(ground1, ground2)\n\n; create space criteria blocks\nspace1 = aurorax_create_criteria_block(programs=['swarm'],hemisphere=['northern'],/SPACE)\nspace2 = aurorax_create_criteria_block(programs=['themis'],hemisphere=['northern'],/SPACE)\nspace = list(space1, space2)\n\n; perform search\ndata = aurorax_conjunction_search(start_dt,end_dt,distance,ground=ground,space=space)\n</code></pre> <p>Example output from the search function (the output can be silenced using the <code>/QUIET</code> keyword):</p> <pre><code>[Wed Mar 02 12:41:27 2022] Parsing start and end timestamps\n[Wed Mar 02 12:41:27 2022] Creating request struct\n[Wed Mar 02 12:41:27 2022] Sending search request ...\n[Wed Mar 02 12:41:27 2022] Search request accepted\n[Wed Mar 02 12:41:27 2022] Request ID: a4f57af1-5e7a-4748-ad1c-16d7d9a6656f\n[Wed Mar 02 12:41:27 2022] Waiting for search to finish ...\n[Wed Mar 02 12:41:28 2022] Waiting for search to finish ...\n[Wed Mar 02 12:41:29 2022] Waiting for search to finish ...\n[Wed Mar 02 12:41:30 2022] Waiting for search to finish ...\n[Wed Mar 02 12:41:31 2022] Waiting for search to finish ...\n[Wed Mar 02 12:41:32 2022] Waiting for search to finish ...\n[Wed Mar 02 12:41:33 2022] Waiting for search to finish ...\n[Wed Mar 02 12:41:34 2022] Waiting for search to finish ...\n[Wed Mar 02 12:41:35 2022] Data is now available\n[Wed Mar 02 12:41:35 2022] Downloading 94.63 KB of data ...\n[Wed Mar 02 12:41:35 2022] Data downloaded, search completed\n[Wed Mar 02 12:41:35 2022] Post-processing data into IDL struct\n[Wed Mar 02 12:41:35 2022] Search completed, found 8 conjunctions in 8.7 seconds\n</code></pre> <p>Example output of a conjunction returned by the function:</p> <pre><code>IDL&gt; help,data[0]\n** Structure &lt;65836ab0&gt;, 8 tags, length=88, data length=88, refs=2:\n   START_DT        STRING    '2020-01-03T12:33:00'\n   END_DT          STRING    '2020-01-03T12:34:00'\n   MIN_DISTANCE    DOUBLE           257.47343\n   MAX_DISTANCE    DOUBLE           257.71434\n   CLOSEST_EPOCH   STRING    '2020-01-03T12:34:00'\n   FARTHEST_EPOCH  STRING    '2020-01-03T12:33:00'\n   DATA_SOURCES    OBJREF    &lt;ObjHeapVar2530(LIST)&gt;\n   EVENTS          OBJREF    &lt;ObjHeapVar2746(LIST)&gt;\nIDL&gt; data[0]\n{\n    \"START_DT\": \"2020-01-03T12:33:00\",\n    \"END_DT\": \"2020-01-03T12:34:00\",\n    \"MIN_DISTANCE\": 257.47343405047997,\n    \"MAX_DISTANCE\": 257.71433923582998,\n    \"CLOSEST_EPOCH\": \"2020-01-03T12:34:00\",\n    \"FARTHEST_EPOCH\": \"2020-01-03T12:33:00\",\n    \"DATA_SOURCES\": &lt;ObjHeapVar2530(LIST)&gt;,\n    \"EVENTS\": &lt;ObjHeapVar2746(LIST)&gt;\n}\n</code></pre>"},{"location":"code/advanced_usage/search/advanced_conjunctions/#advanced-distances","title":"Advanced distances","text":"<p>Simple conjunction searches use a single integer input for the distance, however, you can also make more complex conjunction searches using \"advanced distances\". This alternative input for the <code>distance</code> parameter provides a way to explicitly set custom distances between criteria blocks.</p> <p>The <code>distances</code> argument can be either a single integer, or a dictionary with a key and value for each criteria block pairing. </p> <p>Using none/nan values</p> <p>Please note, an advanced distance pair can be assigned a null value. Setting a pair to null tells the search engine to disregard the distance between those two criteria blocks. For example, setting null for <code>space1-space2</code> would mean that the search engine should not care about the distance between those two space criteria blocks.</p> <p>Use the value <code>None</code> in Python, <code>!NULL</code> in IDL, or <code>null</code> in Javascript.</p> <p>Below is an example of a conjunction search using the advanced distances functionality. This will be a search between one ground and two space criteria blocks, where the distance for <code>space1-space2</code> is null.</p> <p>Example - advanced distances</p> <p>This example is a search using advanced distances.</p> PythonIDL <p>First, we'll set up our search with a default distance. Then, we'll modify the distances to be more complex.</p> <pre><code># imports\nimport datetime\nimport pyaurorax\naurorax = pyaurorax.PyAuroraX()\n\n# set search parameters\nstart = datetime.datetime(2019, 1, 1, 0, 0, 0)\nend = datetime.datetime(2019, 1, 9, 23, 59, 59)\nground_params = [\n    {\n        \"programs\": [\"themis-asi\"]\n    },\n]\nspace_params = [\n    {\n        \"programs\": [\"swarm\"],\n    },\n    {\n        \"programs\": [\"themis\"]\n    }\n]\ndistance = 500\n\n# create search object\ns = pyaurorax.search.ConjunctionSearch(aurorax_obj=aurorax,\n                                       start=start,\n                                       end=end,\n                                       distance=distance,\n                                       ground=ground_params,\n                                       space=space_params)\n</code></pre> <p>Now that we've created our search object, we can adjust the advanced distances to what we want.</p> <pre><code># get the advanced distances pairings\nadvanced_distances = s.get_advanced_distances_combos()\nprint(advanced_distances)\n\n# make our changes\nadvanced_distances[\"ground1-space1\"] = 500\nadvanced_distances[\"ground1-space2\"] = 500\nadvanced_distances[\"space1-space2\"] = None\nprint(advanced_distances)\n\n# update the search object with the new advanced distances\ns.distance = advanced_distances\n</code></pre> <pre><code>Output:\n{'ground1-space1': None, 'ground1-space2': None, 'space1-space2': None}\n{'ground1-space1': 500, 'ground1-space2': 500, 'space1-space2': None}\n</code></pre> <p>Lastly, we perform the search:</p> <pre><code># run the search\ns.execute()\ns.wait()\ns.get_data()\nprint(len(s.data))\n</code></pre> <pre><code>Output:\n46\n</code></pre> <p>First, we'll create an advanced distances hash object and adjust it. Then we'll perform our search.</p> <pre><code>; create our advanced distances object and adjust for our query\nadvanced_distances = aurorax_create_advanced_distances_hash(500, ground=1, space=2)\nadvanced_distances['space1-space2'] = !NULL\n\n; define timeframe and distance parameters\ndistance = 500\nstart_dt = '2019-01-01T00:00:00'\nend_dt = '2019-01-09T23:59:59'\n\n; create ground criteria block\nground1 = aurorax_create_criteria_block(programs=['themis-asi'],/GROUND)\nground = list(ground1)\n\n; create space criteria block\nspace1 = aurorax_create_criteria_block(programs=['swarm'],/SPACE)\nspace2 = aurorax_create_criteria_block(programs=['themis'],/SPACE)\nspace = list(space1, space2)\n\n; perform search\ndata = aurorax_conjunction_search(start_dt,end_dt,advanced_distances,ground=ground,space=space,/NBTRACE)\n</code></pre> <p>Example output from this search is:</p> <pre><code>[Wed Mar 02 14:07:40 2022] Parsing start and end timestamps\n[Wed Mar 02 14:07:40 2022] Creating request struct\n[Wed Mar 02 14:07:40 2022] Sending search request ...\n[Wed Mar 02 14:07:40 2022] Search request accepted\n[Wed Mar 02 14:07:40 2022] Request ID: 551bf56e-6127-4035-8a09-a51d9c1f72dc\n[Wed Mar 02 14:07:40 2022] Waiting for search to finish ...\n[Wed Mar 02 14:07:41 2022] Waiting for search to finish ...\n[Wed Mar 02 14:07:42 2022] Waiting for search to finish ...\n[Wed Mar 02 14:07:43 2022] Waiting for search to finish ...\n[Wed Mar 02 14:07:44 2022] Waiting for search to finish ...\n[Wed Mar 02 14:07:45 2022] Data is now available\n[Wed Mar 02 14:07:45 2022] Downloading 470.61 KB of data ...\n[Wed Mar 02 14:07:46 2022] Data downloaded, search completed\n[Wed Mar 02 14:07:46 2022] Post-processing data into IDL struct\n[Wed Mar 02 14:07:46 2022] Search completed, found 46 conjunctions in 5.8 seconds\n</code></pre>"},{"location":"code/advanced_usage/search/asynchronous_search/","title":"Asynchronous Searches","text":"<p>Only on PyAuroraX and REST API</p> <p>Please note, performing asynchronous search requests is only supported on PyAuroraX and when using the RESTful API directly. </p> <p>The <code>idl-aurorax</code> library does not support this functionality. Searches are already done asynchronously under-the-hood with no control over this for users currently.</p> <p>Therefore, all following information on this page is specific to Python and PyAuroraX.</p> <p>Search times for data products, ephemeris, and conjunctions can vary widely depending on the length of time, number of data sources involved, and metadata filters used. The basic search functions in the <code>data_products</code>, <code>ephemeris</code>, and <code>conjunctions</code> modules will block and wait until results are returned, and may return more than a gigabyte of data. The blocked time waiting for the query results to be returned can be anywhere from several seconds to many minutes. To avoid idle time during this blocking time, or to take advantage of the possibility to run multiple search queries in parallel, consider using an asynchronous search.</p>"},{"location":"code/advanced_usage/search/asynchronous_search/#overview","title":"Overview","text":"<p>Asynchronous searches in PyAuroraX modules all follow the same process:</p> <ol> <li>The client executes a search using the same parameters, except <code>return_immediately</code> is set to True. </li> <li>The API starts processing the query in the background, and immediately responds with a request ID that is stored in the Search object.</li> <li>The client continues with execution flow in their application, checking the status of the Search object periodically and retrieving data whenever it is ready.</li> </ol> <p>Separating the request and the resulting data into two different API calls allows flexibility in duration and size of the overall request.</p> <p>The example below illustrates its use in the conjunctions module, but the same usage applies for ephemeris and data_products.</p>"},{"location":"code/advanced_usage/search/asynchronous_search/#example-asynchronous-conjunction-search","title":"Example: asynchronous conjunction search","text":"<p>This example will go through the steps of executing an asynchronous conjunction search, checking for data, and retrieving data when it is ready. In this example we are searching for conjunctions within a 1-year period. Searches for this long of a period can take several minutes, so we will benefit from using this alternative approach.</p> <p>Example - asynchronous conjunction search</p> Python <pre><code># imports\nimport datetime\nimport pyaurorax\naurorax = pyaurorax.PyAuroraX()\n\n# set up search parameters\nstart = datetime.datetime(2019, 1, 1, 0, 0, 0)\nend = datetime.datetime(2019, 12, 31, 23, 59, 59)\nground_params = [{\n    \"programs\": [\"themis-asi\"],\n    \"ephemeris_metadata_filters\": [\n        {\n            \"key\": \"ml_cloud_v1\",\n            \"operator\": \"=\",\n            \"values\": [\n                \"not classified as cloud\"\n            ]\n        }\n    ]\n}]\nspace_params = [{\n    \"programs\": [\"swarm\"],\n    \"ephemeris_metadata_filters\": [\n        {\n            \"key\": \"nbtrace_region\",\n            \"operator\": \"=\",\n            \"values\": [\n                \"north polar cap\"\n            ]\n        }\n    ]\n}]\n\n# initiate search\ns = aurorax.search.conjunctions.search(start=start,\n                                       end=end,\n                                       distance=500,\n                                       ground=ground_params,\n                                       space=space_params\n                                       return_immediately=True)\n\n# do other useful things while waiting for results...\nfoo()\nbar()\n\n# check for data every 5 seconds\nwhile not s.check_for_data():\n    time.sleep(5)\n\n# now that we have data, let's retrieve it\ns.get_data()\n\n# output data\nprint(s.data)\n</code></pre>"},{"location":"code/advanced_usage/search/asynchronous_search/#a-closer-look-at-the-example","title":"A closer look at the example","text":"<p>In the below sections, we'll have a closer look at each part of the example.</p>"},{"location":"code/advanced_usage/search/asynchronous_search/#setting-up-an-asynchronous-search","title":"Setting up an asynchronous search","text":"<p>Asynchronous searches are set up and executed the same as regular searches. The main difference is that the <code>search</code> function is provided a special flag, <code>return_immediately</code>, to indicate that it should not wait for data to be available before returning. The Search object, in this case <code>s</code>, will contain the information needed to continue with checking for, and retrieving, data when it is ready.</p> <p>Setting up the search</p> Python <pre><code># initiate search\ns = aurorax.search.conjunctions.search(start=start,\n                                       end=end,\n                                       distance=500,\n                                       ground=ground_params,\n                                       space=space_params\n                                       return_immediately=True)\n\n# do other useful things while waiting for results...\nfoo()\nbar()\n\n# check for data every 5 seconds\nwhile not s.check_for_data():\n    time.sleep(5)\n\n# now that we have data, let's retrieve it\ns.get_data()\n\n# output data\nprint(s.data)\n</code></pre>"},{"location":"code/advanced_usage/search/asynchronous_search/#checking-for-data","title":"Checking for data","text":"<p>The main advantage of an asynchronous search is that it lets you check for data whenever it is most optimal in your application. Your application will continue with execution because the search function will not block and wait for data to be returned. This also means that the task of checking for data falls to you, as a programmer. </p> <p>Our working example illustrates this using a simple loop that checks for data every 5 seconds. In practice you would continue on with whatever useful code your application executes while waiting for the search results, and check for data at the end. </p> <p>Checking for data</p> Python <pre><code># initiate search\ns = aurorax.search.conjunctions.search(start=start,\n                                       end=end,\n                                       distance=500,\n                                       ground=ground_params,\n                                       space=space_params\n                                       return_immediately=True)\n\n# do other useful things while waiting for results...\nfoo()\nbar()\n\n# check for data every 5 seconds\nwhile not s.check_for_data():\n    time.sleep(5)\n\n# now that we have data, let's retrieve it\ns.get_data()\n\n# output data\nprint(s.data)\n</code></pre>"},{"location":"code/advanced_usage/search/asynchronous_search/#retrieving-data","title":"Retrieving data","text":"<p>When the <code>check_for_data()</code> function indicates that search result is complete, it is time to retrieve the result with a call to <code>get_data()</code>. The data is then available in the <code>data</code> attribute of the response object.</p> <p>Retrieve data</p> Python <pre><code># initiate search\ns = aurorax.search.conjunctions.search(start=start,\n                                       end=end,\n                                       distance=500,\n                                       ground=ground_params,\n                                       space=space_params\n                                       return_immediately=True)\n\n# do other useful things while waiting for results...\nfoo()\nbar()\n\n# check for data every 5 seconds\nwhile not s.check_for_data():\n    time.sleep(5)\n\n# now that we have data, let's retrieve it\ns.get_data()\n\n# output data\nprint(s.data)\n</code></pre>"},{"location":"code/advanced_usage/search/asynchronous_search/#using-the-wait-function-instead","title":"Using the <code>wait()</code> function instead","text":"<p>Included with every Search object is a <code>wait()</code> function which mimics the blocking behaviour of a synchronous search. This function is useful in cases where the application reaches a point when it needs the search result data to continue. Under the hood, <code>wait()</code> functions similarly to the waiting loop implemented in the example above. We can rewrite that example to use <code>wait()</code>.</p> <p>Using the wait() function instead</p> Python <pre><code># initiate search\ns = aurorax.search.conjunctions.search(start=start,\n                                       end=end,\n                                       distance=500,\n                                       ground=ground_params,\n                                       space=space_params\n                                       return_immediately=True)\n\n# do other useful things while waiting for results...\nfoo()\nbar()\n\n# block and wait for data\ns.wait()\n\n# now that we have data, let's retrieve it\ns.get_data()\n\n# output data\nprint(s.data)\n</code></pre>"},{"location":"code/advanced_usage/search/authentication/","title":"Authentication and AuroraX","text":"<p>With the goal of being widely accessible, the AuroraX API makes many of its features available to use anonymously and without the need to create an AuroraX account. Features such as conjunction, ephemeris, and data product searches, retrieving data source availability/statistics all don't require authentication.</p> <p>Some features of the API, such as managing your organization's data sources and ephemeris/data products data, does require an AuroraX account and some form of authentication.</p> <p>AuroraX's main authentication method is the use of an API key, which can be provided in the header of the request.</p> <p>Need an API key?</p> <p>If you need an API key to use secure endpoints, visit the AuroraX website to create an account. Once you have an account, you can use the \"Request API Key\" and \"Manage API Keys\" pages. </p> <p>Once you get an API key, keep it private and safe, as it can be used to modify and delete any data you own on AuroraX.</p> <p>Only one API key at a time</p> <p>Please note that only one API key is valid at a time. If you request a new key, the old key will be rendered invalid.</p>"},{"location":"code/advanced_usage/search/authentication/#how-to-authenticate","title":"How to authenticate","text":"<p>Below we'll show an example of how to use your API key for interacting with secure functions.</p> <p>Example - authenticate using an API key</p> PythonCommand LineDirect HTTPS-based API requests <p>Set the API key using the <code>pyaurorax.authenticate()</code> function. After authenticating, the API key supplied will be used for the remainder of your program.</p> <pre><code>import pyaurorax\naurorax = pyaurorax.PyAuroraX(api_key=\"API_KEY_HERE\")\n</code></pre> <p>If needed, you can get the currently-set API key for your application:</p> <pre><code>import pyaurorax\naurorax = pyaurorax.PyAuroraX(api_key=\"API_KEY_HERE\")\nprint(aurorax.api_key)\n</code></pre> <p>Using the <code>aurorax-cli</code> tool, you can perform commands that need an API key using the <code>--api-key</code> parameter. Note that this parameter MUST be right after the first command string.</p> <pre><code>$ aurorax-cli --api-key=$AURORAX_API_KEY sources add --help \n</code></pre> <p>The above command assumes that your API key is in an environment variable called <code>AURORAX_API_KEY</code>. You can alternatively enter your API key directly in the command line, or use a different environment variable.</p> <p>When sending a raw HTTP query directly to the API, to use your API key with a restricted endpoint you must provide an additional header.</p> <p>Include the header <code>x-aurorax-api-key</code> with your API key as the value.</p>"},{"location":"code/advanced_usage/search/availability/","title":"Data Availability","text":"<p>Since the AuroraX platform is built around metadata in a database, we lose a bit of visibility regarding what data is in the system at any given time. To help with this, we have a function that provides data availability information to users.</p> <p>Data availability information from AuroraX consists of the number of ephemeris or data product records for a given day and a given data source. We visualize it using the Data Availability webpage.</p> <p>Below, we'll have a look at an example of retrieving data availability information programmatically.</p> <p>Example - get data availability information</p> <p>In this example, the availability of ephemeris records is retrieved for all Swarm instruments for a 5 day period.</p> PythonIDLCommand LineJavascriptBrowser <p>The <code>search.availability</code> module has functions for retrieving the availability of ephemeris and data product records. These functions return a list of <code>AvailabilityResult</code> objects for every data source that matches the filter criteria provided to the function.</p> <pre><code># imports\nimport datetime\nimport pyaurorax\naurorax = pyaurorax.PyAuroraX()\n\n# set up availability params\nstart = datetime.date(2019, 1, 1)\nend = datetime.date(2019, 1, 5)\nprogram = \"swarm\"\n\n# get availability information\navailability = aurorax.search.availability.ephemeris(start, \n                                                     end,\n                                                     program=program)\n\n# have a look at the availability data\nprint(availability)\n</code></pre> <p>Example output would look like:</p> <pre><code>[\n    AvailabilityResult(data_source=DataSource(identifier=3, program='swarm', platform='swarma', instrument_type='footprint', source_type='leo', display_name='Swarm A'), \n                       available_data_products=None, \n                       available_ephemeris={\n                           '2019-01-01': 1440, \n                           '2019-01-02': 1440, \n                           '2019-01-03': 1440, \n                           '2019-01-04': 1440, \n                           '2019-01-05': 1440}),\n    AvailabilityResult(data_source=DataSource(identifier=29, program='swarm', platform='swarmb', instrument_type='footprint', source_type='leo', display_name='Swarm B'), \n                       available_data_products=None, \n                       available_ephemeris={\n                           '2019-01-01': 1440, \n                           '2019-01-02': 1440, \n                           '2019-01-03': 1440, \n                           '2019-01-04': 1440, \n                           '2019-01-05': 1440}),\n    AvailabilityResult(data_source=DataSource(identifier=30, program='swarm', platform='swarmc', instrument_type='footprint', source_type='leo', display_name='Swarm C'), \n                       available_data_products=None, \n                       available_ephemeris={\n                           '2019-01-01': 1440, \n                           '2019-01-02': 1440, \n                           '2019-01-03': 1440, \n                           '2019-01-04': 1440, \n                           '2019-01-05': 1440})\n]\n</code></pre> <p>Use the <code>aurorax_ephemeris_availability()</code> and <code>aurorax_data_product_availability()</code> functions to retrieve data availability information from AuroraX in IDL.</p> <pre><code>IDL&gt; data = aurorax_ephemeris_availability('20200101','20200105',program='swarm')\n</code></pre> <p>Example output would look like:</p> <pre><code>IDL&gt; help,data[0]\n** Structure &lt;5cab0610&gt;, 2 tags, length=128, data length=128, refs=2:\n   DATA_SOURCE            STRUCT    -&gt; &lt;Anonymous&gt; Array[1]\n   AVAILABLE_EPHEMERIS    STRUCT    -&gt; &lt;Anonymous&gt; Array[1]\nIDL&gt; data[0]\n{\n    \"DATA_SOURCE\": {\n        \"IDENTIFIER\": 3,\n        \"PROGRAM\": \"swarm\",\n        \"PLATFORM\": \"swarma\",\n        \"INSTRUMENT_TYPE\": \"footprint\",\n        \"SOURCE_TYPE\": \"leo\",\n        \"DISPLAY_NAME\": \"Swarm A\"\n    },\n    \"AVAILABLE_EPHEMERIS\": {\n        \"_2020_01_01\": 1440,\n        \"_2020_01_02\": 1440,\n        \"_2020_01_03\": 1440,\n        \"_2020_01_04\": 1440,\n        \"_2020_01_05\": 1440\n    }\n}\n</code></pre> <p>You can use the aurorax-cli tool to retrieve data availability information too.</p> <pre><code>$ aurorax-cli availability ephemeris 2020/01/01 2020/01/05 --program=swarm\n</code></pre> <p>Example output would be:</p> <pre><code>Identifier \u2193   Display Name   Program   Platform   Instrument Type   Source Type   Date         Available Records\n=================================================================================================================\n3              Swarm A        swarm     swarma     footprint         leo           2020-01-01   1,440            \n3              Swarm A        swarm     swarma     footprint         leo           2020-01-02   1,440            \n3              Swarm A        swarm     swarma     footprint         leo           2020-01-03   1,440            \n3              Swarm A        swarm     swarma     footprint         leo           2020-01-04   1,440            \n3              Swarm A        swarm     swarma     footprint         leo           2020-01-05   1,440            \n3              Swarm A        swarm     swarma     footprint         leo           2020-01-06   1,440            \n29             Swarm B        swarm     swarmb     footprint         leo           2020-01-01   1,440            \n29             Swarm B        swarm     swarmb     footprint         leo           2020-01-02   1,440            \n29             Swarm B        swarm     swarmb     footprint         leo           2020-01-03   1,440            \n29             Swarm B        swarm     swarmb     footprint         leo           2020-01-04   1,440            \n29             Swarm B        swarm     swarmb     footprint         leo           2020-01-05   1,440            \n29             Swarm B        swarm     swarmb     footprint         leo           2020-01-06   1,440            \n30             Swarm C        swarm     swarmc     footprint         leo           2020-01-01   1,440            \n30             Swarm C        swarm     swarmc     footprint         leo           2020-01-02   1,440            \n30             Swarm C        swarm     swarmc     footprint         leo           2020-01-03   1,440            \n30             Swarm C        swarm     swarmc     footprint         leo           2020-01-04   1,440            \n30             Swarm C        swarm     swarmc     footprint         leo           2020-01-05   1,440            \n30             Swarm C        swarm     swarmc     footprint         leo           2020-01-06   1,440            \n</code></pre> <p>For more usage details, you can look at the aurorax-cli help too.</p> <pre><code>$ aurorax-cli availability ephemeris --help \n</code></pre> <p>There are many different ways in Javascript to send a GET request, so we'll show it using a basic HTTP request. You can do this with AJAX, JQuery, Node, React, etc.</p> <pre><code>var xhr = new XMLHttpRequest();\nxhr.open(\"GET\", \"https://api.aurorax.space/api/v1/availability/ephemeris?start=2020-01-01&amp;end=2020-01-31&amp;program=swarm\");\nxhr.send();\nconsole.log(xhr.responseText)\n</code></pre> <p>You can also just make the request right from your browser. Copy the following URL and paste it in your browser URL bar.</p> <pre><code>https://api.aurorax.space/api/v1/availability/ephemeris?start=2020-01-01&amp;end=2020-01-31&amp;program=swarm\n</code></pre>"},{"location":"code/advanced_usage/search/contributing_data/","title":"Uploading data to AuroraX","text":"<p>Warning</p> <p>Please note, uploading data to AuroraX is only supported on PyAuroraX and when using the RESTful API directly. The <code>idl-aurorax</code> library does not support this functionality.</p> <p>Therefore, all following information on this page is specific to Python and PyAuroraX.</p> <p>PyAuroraX provides built-in functionality for data providers to upload and manage their organization's metadata and/or summary data to the AuroraX database. Please see the AuroraX data policy page and review the recommended standards before proceeding.</p> <p>Data sources, data products, and ephemeris records can all be added to the AuroraX database and managed by AuroraX users.</p>"},{"location":"code/advanced_usage/search/contributing_data/#account-privilege-levels","title":"Account privilege levels","text":"<p>Contributing and managing data in AuroraX requires an account with special privileges. If you do not yet have an account, sign up and then contact us to request enhanced privileges.</p> <p>There are four account types in AuroraX: </p> <ul> <li>User: the default role upon account creation. The User role has no data creation, modification, or deletion privileges.</li> <li>Maintainer: can create and modify ephemeris and data product records associated with data sources they are assigned to. No data deletion privileges. Must be assigned to a data source by the Owner or an Administrator.</li> <li>Owner: can create and modify their owned data sources and any associated ephemeris and data product records. No data deletion privileges. This role must be assigned by an Administrator.</li> <li>Administrator: has full write and delete privileges. </li> </ul> User Maintainer * Owner Administrator Create data source \u2717 \u2717 \u2714 \u2714 Update data source \u2717 \u2717 \u2714 \u2714 Delete data source \u2717 \u2717 \u2714 \u2714 Create ephemeris record \u2717 \u2714 \u2714 \u2714 Update ephemeris record ** \u2717 \u2714 \u2714 \u2714 Delete ephemeris record \u2717 \u2714 \u2714 \u2714 Create data product record \u2717 \u2714 \u2714 \u2714 Update data product record ** \u2717 \u2714 \u2714 \u2714 Delete data product record \u2717 \u2714 \u2714 \u2714 <p>* Maintainers must be assigned to a data source by the Owner of the data source</p> <p>** Updating is done by re-uploading the modified record </p>"},{"location":"code/advanced_usage/search/contributing_data/#data-sources","title":"Data sources","text":"<p>After obtaining sufficient privileges, the first step in uploading data to AuroraX is to create a data source. This data source will be associated with ephemeris and data product records in the database. In PyAuroraX the <code>sources</code> module has the <code>DataSource</code> class and the <code>add</code> function to facilitate this.</p>"},{"location":"code/advanced_usage/search/contributing_data/#adding-a-data-source","title":"Adding a data source","text":"<p>The <code>DataSource</code> class is used to add data sources to AuroraX. Some of the class attributes are required to create the data source in the database, while others are optional and can be added later:</p> <p>Required attributes:</p> <ul> <li><code>program</code></li> <li><code>platform</code></li> <li><code>instrument_type</code></li> <li><code>source_type</code></li> <li><code>display_name</code></li> </ul> <p>Optional attributes:</p> <ul> <li><code>identifier</code></li> <li><code>metadata</code></li> <li><code>maintainers</code></li> <li><code>ephemeris_metadata_schema</code></li> <li><code>data_product_metadata_schema</code></li> </ul>"},{"location":"code/advanced_usage/search/contributing_data/#example-adding-a-data-source","title":"Example: adding a data source","text":"<p>In this example we add a data source using the required attributes along with the optional <code>metadata_schema_ephemeris</code> and <code>metadata_schema_data_products</code>.</p> <pre><code># imports\nimport pyaurorax\naurorax = pyaurorax.PyAuroraX()\n\n# set data source values\nprogram = \"example-program\"\nplatform = \"example-platform\"\ninstrument_type = \"example-instrument\"\nsource_type = \"ground\"\ndisplay_name = \"Example Instrument\"\nmetadata_schema_ephemeris = [\n    {\n        \"field_name\": \"example_meta1\",\n        \"description\": \"example metadata field 1\",\n        \"data_type\": \"string\",\n        \"allowed_values\": [],\n    },\n    {\n        \"field_name\": \"example_meta2\",\n        \"description\": \"example metadata field 2\",\n        \"data_type\": \"string\",\n        \"allowed_values\": [],\n    }\n]\nmetadata_schema_data_products = [\n    {\n        \"field_name\": \"example_meta1\",\n        \"description\": \"example metadata field 1\",\n        \"data_type\": \"string\",\n        \"allowed_values\": [],\n    },\n    {\n        \"field_name\": \"example_meta2\",\n        \"description\": \"example metadata field 2\",\n        \"data_type\": \"string\",\n        \"allowed_values\": [],\n    }\n]\n\n# make DataSource object \ndata_source = pyaurorax.search.DataSource(program=program,\n                                          platform=platform,\n                                          instrument_type=instrument_type,\n                                          source_type=source_type, display_name=display_name,\n                                          ephemeris_metadata_schema=metadata_schema_ephemeris,\n                                          data_product_metadata_schema=metadata_schema_data_products)\n\n# add to AuroraX\nr = aurorax.search.sources.add(source)\nidentifier = r.identifier\n</code></pre> <p>When the adding operation is successful, the return value <code>r</code> from the API is a <code>DataSource</code> object. This object contains the full record from the database including default values for attributes we omitted. In this case, since we didn't specify an identifier, we can find out what identifier our new data source was assigned by accessing its <code>identifier</code> attribute.</p>"},{"location":"code/advanced_usage/search/contributing_data/#updating-data-sources","title":"Updating data sources","text":"<p>There are two functions for updating the information associated with a data source in the AuroraX database: <code>sources.update_partial</code>, which updates the values for specified attributes, and a full <code>sources.update</code> function that replaces the database record with a new DataSource object passed in. We recommend using <code>sources.update_partial</code> whenever possible because it reduces the risk of accidental data loss.</p>"},{"location":"code/advanced_usage/search/contributing_data/#example-partial-update-of-a-data-source","title":"Example: partial update of a data source","text":"<p>In this example we perform partial updates to the data source <code>r</code> we created in the previous example. To use the <code>sources.update_partial</code> function we have to include the identifier of the data source, then any fields we want to modify. We will change the display name of the data source and add an existing AuroraX account as a maintainer.</p> <pre><code>identifier = r.identifier\nupdated_r = pyaurorax.sources.update_partial(identifier=ds.identifier,\n                                             display_name=\"New Display Name\",\n                                             maintainers=[\"maintainer@program.com\"])\n</code></pre>"},{"location":"code/advanced_usage/search/contributing_data/#example-full-update-of-a-data-source","title":"Example: full update of a data source","text":"<p>The same task of modifying data source attributes can be accomplished with the <code>sources.update</code> function. The difference in using this function is that we must pass in a full <code>DataSource</code> as the argument, and this object must have the changes we wish to be made. </p> <p>Continuing with the example of adding a data source, <code>r</code>, we will update its display name and maintainers list. For the sake of completeness, let us retrieve the data source from the database first. Note that since <code>sources.update</code> will rewrite the database with the argument we pass in, it's important to retrieve our working data source with the <code>format=\"full_record\"</code> option so that it contains all the information.</p> <pre><code>ds = aurorax.search.sources.get(program=\"example-program\",\n                                platform=\"example-platform\",\n                                instrument_type=\"example-instrument\",\n                                format=\"full_record\")\n\n# update data source's attributes\nds.display_name = \"New Display Name\"\nds.maintainers = [\"maintainer@program.com\"]\n\n# update on AuroraX\nupdated_ds = aurorax.search.sources.update(ds)\n</code></pre>"},{"location":"code/advanced_usage/search/contributing_data/#ephemeris-records","title":"Ephemeris records","text":"<p>Ephemeris records uploaded to AuroraX can be found in conjunction searches and ephemeris searches by anyone using the platform. Using the <code>ephemeris</code> module, records are uploaded and updated using the <code>Ephemeris</code> class and <code>upload</code> function.</p>"},{"location":"code/advanced_usage/search/contributing_data/#example-uploading-an-ephemeris-record","title":"Example: uploading an ephemeris record","text":"<p>In this example we create two <code>Ephemeris</code> objects associated with the same data source and upload them to the database. <code>Ephemeris</code> objects hold a reference to their data source, and so we first have to retrieve the data source.</p> <pre><code>ds = aurorax.search.sources.get(program=\"example-program\",\n                                platform=\"example-platform\",\n                                instrument_type=\"example-instrument\")\n</code></pre> <p>Next, we create two <code>Ephemeris</code> objects one minute apart. Note that the location attributes are passed in as a <code>pyaurorax.search.Location</code> object.</p> <pre><code>epoch = datetime.datetime(2020, 1, 1, 0, 0)\nlocation_geo = pyaurorax.search.Location(lat=51.049999, lon=-114.066666)\nlocation_gsm = pyaurorax.search.Location(lat=150.25, lon=-10.75)\nnbtrace = pyaurorax.Location(lat=1.23, lon=45.6)\nsbtrace = pyaurorax.Location(lat=7.89, lon=101.23)\nmetadata = {\n    \"example_meta1\": \"testing1\",\n    \"example_meta2\": \"testing2\",\n}\n\n# create first Ephemeris object\ne1 = pyaurorax.search.Ephemeris(data_source=ds,\n                                epoch=epoch,\n                                location_geo=location_geo,\n                                location_gsm=location_gsm,\n                                nbtrace=nbtrace,\n                                sbtrace=sbtrace,\n                                metadata=metadata)\n\n# create second Ephemeris object\nepoch2 = datetime.datetime(2020, 1, 1, 0, 1)\nmetadata2 = {\n    \"example_meta1\": \"testing12\",\n    \"example_meta2\": \"testing22\",\n}\ne2 = pyaurorax.search.Ephemeris(data_source=ds,\n                                epoch=epoch2,\n                                location_geo=location_geo,\n                                location_gsm=location_gsm,\n                                nbtrace=nbtrace,\n                                sbtrace=sbtrace,\n                                metadata=metadata2)\n</code></pre> <p>To upload the records, we pass them in a list to the <code>upload</code> function along with the identifier of the data source. <code>validate_source</code> is an optional argument that, if True, will independently check the validity of each record's <code>data_source</code> attribute against the data source associated with the <code>identifier</code> argument in the database. It is recommended to use this optional check.</p> <pre><code>pyaurorax.ephemeris.upload(identifier=ds.identifier,\n                           records=[e1, e2],\n                           validate_source=True)\n</code></pre>"},{"location":"code/advanced_usage/search/contributing_data/#updating-ephemeris-records","title":"Updating ephemeris records","text":"<p>Updating ephemeris records is also done using the <code>upload</code> function. Ephemeris records are uniquely identified by the combination of their data source and epoch. Uploading a new record with the same data source and epoch as an existing record will overwrite the existing record with the new values.</p>"},{"location":"code/advanced_usage/search/contributing_data/#example-updating-an-ephemeris-record","title":"Example: updating an ephemeris record","text":"<p>In this example we use the same variables as the previous example and update the metadata field of one of the records we uploaded. </p> <pre><code>e1.metadata = {\n    \"example_meta1\": \"testing1_updated\",\n    \"example_meta2\": \"testing2_updated\",\n}\n\naurorax.search.ephemeris.upload(identifier=ds.identifier,\n                                records=[e1],\n                                validate_source=True)\n</code></pre>"},{"location":"code/advanced_usage/search/contributing_data/#data-product-records","title":"Data product records","text":"<p>Data product records uploaded to AuroraX can be found in data product searches by anyone using the platform. Using the <code>data_products</code> module, records are uploaded and updated using the <code>DataProduct</code> class and <code>upload</code> function.</p>"},{"location":"code/advanced_usage/search/contributing_data/#example-uploading-a-data-product-record","title":"Example: uploading a data product record","text":"<p>In this example we create two <code>DataProduct</code> objects associated with the same data source and upload them to the database. <code>DataProduct</code> objects hold a reference to their data source, and so we first have to retrieve the data source.</p> <pre><code>ds = aurorax.search.sources.get(program=\"example-program\",\n                                platform=\"example-platform\",\n                                instrument_type=\"example-instrument\")\n</code></pre> <p>Next, we create two <code>DataProduct</code> objects one day apart.</p> <pre><code># set data product values\nurl = \"example1.jpg\"\nmetadata = {\n    \"example_meta1\": \"example1\",\n    \"example_meta2\": \"example2\",\n}\ndata_product_type = \"keogram\"\nstart_dt = datetime.datetime(2020, 1, 1, 0, 0, 0)\nend_dt = start_dt.replace(hour=23, minute=59, second=59)\n\n# create first DataProduct object\ndp1 = pyaurorax.search.DataProduct(data_source=ds,\n                                   data_product_type=data_product_type,\n                                   url=url,\n                                   start=start_dt,\n                                   end=end_dt,\n                                   metadata=metadata)\n\n# create second DataProduct object\nstart_dt2 = datetime.datetime(2020, 1, 2, 0, 0, 0)\nend_dt2 = start_dt2.replace(hour=23, minute=59, second=59)\nurl2 = \"example2.jpg\"\ndp2 = pyaurorax.search.DataProduct(data_source=ds,\n                                   data_product_type=data_product_type,\n                                   url=url2,\n                                   start=start_dt2,\n                                   end=end_dt2,\n                                   metadata=metadata)\n</code></pre> <p>To upload the records, we pass them in a list to the <code>upload</code> function along with the identifier of the data source. <code>validate_source</code> is an optional argument that, if True, will independently check the validity of each record's <code>data_source</code> attribute against the data source associated with the <code>identifier</code> argument in the database. It is recommended to use this optional check.</p> <pre><code>aurorax.search.data_products.upload(identifier=ds.identifier,\n                                    records=[dp1, dp2],\n                                    validate_source=True)\n</code></pre>"},{"location":"code/advanced_usage/search/contributing_data/#updating-data-product-records","title":"Updating data product records","text":"<p>Updating data product records is also done using the <code>upload</code> function. Data product records are uniquely identified by the combination of their data source and URL. Uploading a new record with the same data source and URL as an existing record will overwrite the existing record with the new values.</p>"},{"location":"code/advanced_usage/search/contributing_data/#example-updating-a-data-product-record","title":"Example: updating a data product record","text":"<p>In this example we use the same variables as the previous example and update the metadata field of one of the records we uploaded. </p> <pre><code>dp1.metadata = {\n    \"example_meta1\": \"example1_updated\",\n    \"example_meta2\": \"example2_updated\",\n}\n\naurorax.search.data_products.upload(identifier=ds.identifier,\n                                    records=[dp1],\n                                    validate_source=True)\n</code></pre>"},{"location":"code/advanced_usage/search/searches_with_metadata_filters/","title":"Searches with metadata filters","text":"<p>The AuroraX search engine can be used with something we refer to as \"metadata filters\". As the AuroraX database contains ephemeris and data product records with arbitrary metadata fields, we can leverage this to further enhance conjunction, ephemeris, and data product searches.</p> <p>Below, we'll go through a simple example of using the metadata filters for a conjunction, ephemeris, and data product search.</p> <p>Also see:</p> <ul> <li>Information about the ephemeris metadata field</li> <li>Information about the data products metadata field</li> </ul>"},{"location":"code/advanced_usage/search/searches_with_metadata_filters/#overview","title":"Overview","text":"<p>Metadata filters are added as part of a criteria block in a conjunction search, and as a parameter for the ephemeris and data product search functions.</p> <p>Every filter takes the same form:</p> <pre><code>{\n    \"key\": \"some key name\",\n    \"operator\": \"in\",  # operator options are: =, &gt;, &lt;, &gt;=, &lt;=, between, in, not in\n    \"values\": [\n        \"some value\",\n        \"another value if we want\",\n        ...\n    ]\n}\n</code></pre> <ul> <li><code>key</code> is the key of the metadata value in the record</li> <li><code>operator</code> can be one of =, &gt;, &lt;, &lt;=, &gt;=, !=, \"in\", \"not in\", and \"between\"</li> <li><code>values</code> is a list of values to filter for. <ul> <li>the list can contain at most one entry if the operator is an =, &gt;, &lt;, &lt;=, &gt;=, !=.</li> <li>for the operator \"in\" and \"not in\", the list can contain a number of values.</li> <li>for the operator \"between\", the list must contain exactly two values.</li> </ul> </li> </ul>"},{"location":"code/advanced_usage/search/searches_with_metadata_filters/#a-conjunction-search-example","title":"A conjunction search example","text":"<p>To include a metadata filter in a conjunction search, place it within the criteria block it applies to.</p> <p>Improvement on its way for PyAuroraX</p> <p>Please note - an improvement to the structure of conjunction searches is coming soon to PyAuroraX. The specific issue tickets for these improvements are !28, !51, and !54.</p> <p>Conjunction search with metadata filters</p> <p>In the following example, we are searching for conjunctions between ground instruments in the \"themis-asi\" program and space instruments in the \"swarm\" program. We narrow the search using filters on the \"calgary_cloud_ml_v1\" and \"nbtrace_region\" metadata fields on the ground and space criteria blocks, respectively.</p> PythonIDL <pre><code># imports\nimport datetime\nimport pyaurorax\naurorax = pyaurorax.PyAuroraX()\n\n# set up search parameters\nstart = datetime.datetime(2019, 1, 1, 0, 0, 0)\nend = datetime.datetime(2019, 1, 31, 23, 59, 59)\nground_params = [\n    {\n        \"programs\": [\"themis-asi\"],\n        \"ephemeris_metadata_filters\": {\n            \"logical_operator\": \"AND\",\n            \"expressions\": [\n                {\n                    \"key\": \"calgary_cloud_ml_v1\",\n                    \"operator\": \"in\",\n                    \"values\": [\n                        \"classified as not cloudy\"\n                    ]\n                }\n            ]\n        }\n    }\n]\nspace_params = [\n    {\n        \"programs\": [\"themis\"],\n        \"hemisphere\": [\"northern\"],\n        \"ephemeris_metadata_filters\": {\n            \"logical_operator\": \"AND\",\n            \"expressions\": [\n                {\n                    \"key\": \"nbtrace_region\",\n                    \"operator\": \"in\",\n                    \"values\": [\n                        \"north polar cap\"\n                    ]\n                }\n            ]\n        }\n    }\n]\ndistance = 500\n\n# perform the search\ns = aurorax.search.conjunctions.search(start=start,\n                                       end=end,\n                                       distance=distance,\n                                       ground=ground_params,\n                                       space=space_params,\n                                       verbose=True)\n\n# output data\nprint(s.data)\n</code></pre> <p>Example output from this code would be:</p> <pre><code>[2022-03-02 23:00:27.761557] Search object created\n[2022-03-02 23:00:28.016696] Request submitted\n[2022-03-02 23:00:28.016772] Request ID: d6ae7403-a799-455d-ab98-386323ab1a16\n[2022-03-02 23:00:28.016784] Request details available at: https://api.aurorax.space/api/v1/conjunctions/requests/d6ae7403-a799-455d-ab98-386323ab1a16\n[2022-03-02 23:00:28.016788] Waiting for data ...\n[2022-03-02 23:00:29.083976] Checking for data ...\n[2022-03-02 23:00:30.173733] Checking for data ...\n[2022-03-02 23:00:30.254631] Data is now available\n[2022-03-02 23:00:30.254683] Retrieving data ...\n[2022-03-02 23:00:30.348727] Retrieved 32.8 kB of data containing 5 records\n</code></pre> <p>And the resulting conjunctions would be:</p> <pre><code>[\n    Conjunction(start=datetime.datetime(2019, 1, 20, 9, 30), end=datetime.datetime(2019, 1, 20, 9, 51), min_distance=305.86, max_distance=498.35, data_sources=[...], events=[...]), \n    Conjunction(start=datetime.datetime(2019, 1, 20, 8, 51), end=datetime.datetime(2019, 1, 20, 9, 9), min_distance=61.12, max_distance=119.83, data_sources=[...], events=[...]), \n    Conjunction(start=datetime.datetime(2019, 1, 22, 6, 20), end=datetime.datetime(2019, 1, 22, 6, 29), min_distance=436.22, max_distance=468.41, data_sources=[...], events=[...]), \n    Conjunction(start=datetime.datetime(2019, 1, 22, 5, 16), end=datetime.datetime(2019, 1, 22, 5, 29), min_distance=388.89, max_distance=492.20, data_sources=[...], events=[...]), \n    Conjunction(start=datetime.datetime(2019, 1, 22, 5, 40), end=datetime.datetime(2019, 1, 22, 5, 49), min_distance=339.71, max_distance=344.09, data_sources=[...], events=[...])\n]\n</code></pre> <p>Using the metadata filter helper functions, we can create a metadata filter object that will be added to a criteria block.</p> <pre><code>; set distance and timeframe\nstart_dt = '2019-01-01T00:00:00'\nend_dt = '2019-01-31T23:59:59'\ndistance = 500\n\n; set our ground metadata filter\nexpression = aurorax_create_metadata_filter_expression('calgary_cloud_ml_v1', list('classified as not cloudy'),/OPERATOR_IN)\nexpressions = list(expression)\nground_metadata_filters = aurorax_create_metadata_filter(expressions,/OPERATOR_AND)\n\n; set our ground criteria block\nground1 = aurorax_create_criteria_block(programs=['themis-asi'], metadata_filters=ground_metadata_filters,/GROUND)\nground = list(ground1)\n\n; set our space metadata filter\nexpression = aurorax_create_metadata_filter_expression('nbtrace_region', list('north polar cap'),/OPERATOR_IN)\nexpressions = list(expression)\nspace_metadata_filters = aurorax_create_metadata_filter(expressions,/OPERATOR_AND)\n\n; set our space criteria block\nspace1 = aurorax_create_criteria_block(programs=['themis'],hemisphere=['northern'],metadata_filters=space_metadata_filters,/SPACE)\nspace = list(space1)\n\n; perform the search\ndata = aurorax_conjunction_search(start_dt,end_dt,distance,ground=ground,space=space,/nbtrace)\n</code></pre> <p>Example output from this code would be:</p> <pre><code>[Wed Mar 02 16:14:42 2022] Parsing start and end timestamps\n[Wed Mar 02 16:14:42 2022] Creating request struct\n[Wed Mar 02 16:14:42 2022] Sending search request ...\n[Wed Mar 02 16:14:42 2022] Search request accepted\n[Wed Mar 02 16:14:42 2022] Request ID: dfd75094-6f20-4f80-a2fa-e61a215eb0be\n[Wed Mar 02 16:14:42 2022] Waiting for search to finish ...\n[Wed Mar 02 16:14:43 2022] Data is now available\n[Wed Mar 02 16:14:43 2022] Downloading 32.07 KB of data ...\n[Wed Mar 02 16:14:43 2022] Data downloaded, search completed\n[Wed Mar 02 16:14:43 2022] Post-processing data into IDL struct\n[Wed Mar 02 16:14:43 2022] Search completed, found 5 conjunctions in 1.2 seconds\n</code></pre> <p>An example conjunction record would be:</p> <pre><code>IDL&gt; help,data[0]\n** Structure &lt;6edd4810&gt;, 8 tags, length=88, data length=88, refs=2:\n   START_DT        STRING    '2019-01-20T09:30:00'\n   END_DT          STRING    '2019-01-20T09:51:00'\n   MIN_DISTANCE    DOUBLE           305.86436\n   MAX_DISTANCE    DOUBLE           498.35154\n   CLOSEST_EPOCH   STRING    '2019-01-20T09:30:00'\n   FARTHEST_EPOCH  STRING    '2019-01-20T09:51:00'\n   DATA_SOURCES    OBJREF    &lt;ObjHeapVar4872(LIST)&gt;\n   EVENTS          OBJREF    &lt;ObjHeapVar4922(LIST)&gt;\nIDL&gt; data[0]\n{\n    \"START_DT\": \"2019-01-20T09:30:00\",\n    \"END_DT\": \"2019-01-20T09:51:00\",\n    \"MIN_DISTANCE\": 305.86435755861999,\n    \"MAX_DISTANCE\": 498.35153965450996,\n    \"CLOSEST_EPOCH\": \"2019-01-20T09:30:00\",\n    \"FARTHEST_EPOCH\": \"2019-01-20T09:51:00\",\n    \"DATA_SOURCES\": &lt;ObjHeapVar4872(LIST)&gt;,\n    \"EVENTS\": &lt;ObjHeapVar4922(LIST)&gt;\n}\n</code></pre>"},{"location":"code/advanced_usage/search/searches_with_metadata_filters/#an-ephemeris-search-example","title":"An ephemeris search example","text":"<p>To include a metadata filter in an ephemeris search, supply it as an addition argument to the search function.</p> <p>Ephemeris search with metadata filters</p> <p>In the following example, we are searching for ephemeris records over one day for the \"swarm\" program and \"swarma\" platform, where the metadata filter for \"nbtrace_region\" is either \"north polar cap\" or \"north auroral oval\".</p> PythonIDL <p>We use the <code>aurorax.search.ephemeris.search()</code> function with the <code>metadata_filters_logical_operator</code> and <code>metadata_filters</code> parameters supplied.</p> <pre><code># imports\nimport datetime\nimport pyaurorax\naurorax = pyaurorax.PyAuroraX()\n\n# set up search parameters\nstart = datetime.datetime(2019, 1, 1, 0, 0, 0)\nend = datetime.datetime(2019, 1, 1, 23, 59, 59)\nprograms = [\"swarm\"]\nplatforms = [\"swarma\"]\nmetadata_filters_logical_operator = \"AND\"\nmetadata_filters = [\n    {\n        \"key\": \"nbtrace_region\",\n        \"operator\": \"in\",\n        \"values\": [\n            \"north polar cap\",\n            \"north auroral oval\"\n        ]\n    }\n]\n\n# perform the search\ns = aurorax.search.ephemeris.search(start=start,\n                                    end=end,\n                                    programs=programs,\n                                    platforms=platforms,\n                                    metadata_filters_logical_operator=metadata_filters_logical_operator,\n                                    metadata_filters=metadata_filters,\n                                    verbose=True)\n\n# output data\nprint(s.data)\n</code></pre> <p>Example output from this code would be:</p> <pre><code>[2022-03-03 15:41:32.699680] Search object created\n[2022-03-03 15:41:32.758331] Request submitted\n[2022-03-03 15:41:32.758422] Request ID: 63e341af-2f2c-4bde-98f9-977e82736ad8\n[2022-03-03 15:41:32.758442] Request details available at: https://api.aurorax.space/api/v1/ephemeris/requests/63e341af-2f2c-4bde-98f9-977e82736ad8\n[2022-03-03 15:41:32.758447] Waiting for data ...\n[2022-03-03 15:41:33.831208] Checking for data ...\n[2022-03-03 15:41:33.903628] Data is now available\n[2022-03-03 15:41:33.903717] Retrieving data ...\n[2022-03-03 15:41:34.092507] Retrieved 1.5 MB of data containing 269 records\n</code></pre> <p>And example ephemeris records would be:</p> <pre><code>[\n    Ephemeris(data_source=DataSource(identifier=3, program='swarm', platform='swarma', instrument_type='footprint', source_type='leo', display_name='Swarm A'), epoch=datetime.datetime(2019, 1, 1, 0, 22), location_geo=Location(lat=67.75, lon=-134.21866), location_gsm=Location(lat=79.08494, lon=137.89024), nbtrace=Location(lat=68.18764, lon=-133.78503), nbtrace=Location(lat=68.18764, lon=-133.78503), metadata={'state': 'definitiv...}),\n    Ephemeris(data_source=DataSource(identifier=3, program='swarm', platform='swarma', instrument_type='footprint', source_type='leo', display_name='Swarm A'), epoch=datetime.datetime(2019, 1, 1, 0, 25), location_geo=Location(lat=79.17033, lon=-127.45004), location_gsm=Location(lat=72.97663, lon=-179.49547), nbtrace=Location(lat=79.30263, lon=-127.23894000000001), nbtrace=Location(lat=79.30263, lon=-127.23894000000001), metadata={'state': 'definitiv...}),\n    Ephemeris(data_source=DataSource(identifier=3, program='swarm', platform='swarma', instrument_type='footprint', source_type='leo', display_name='Swarm A'), epoch=datetime.datetime(2019, 1, 1, 0, 26), location_geo=Location(lat=82.853424, lon=-120.02243000000001), location_gsm=Location(lat=69.864494, lon=-172.31992), nbtrace=Location(lat=82.91019, lon=-120.09123), nbtrace=Location(lat=82.91019, lon=-120.09123), metadata={'state': 'definitiv...}),\n    ...\n    ...\n    ...\n]\n</code></pre> <p>Using the metadata filter helper functions, we can create a metadata filter object that will be added to a our ephemeris search.</p> <pre><code>; set timeframe, programs, and platforms\nstart_dt = '2019-01-01T00:00:00'\nend_dt = '2019-01-01T23:59:59'\nprograms = ['swarm']\nplatforms = ['swarma']\n\n; set metadata filter\nexpression = aurorax_create_metadata_filter_expression('nbtrace_region', list('north polar cap', 'north auroral oval'),/OPERATOR_IN)\nexpressions = list(expression)\nmetadata_filters = aurorax_create_metadata_filter(expressions,/OPERATOR_AND)\n\n; perform the search\ndata = aurorax_ephemeris_search(start_dt,end_dt,programs=programs,platforms=platforms,metadata_filters=metadata_filters)\n</code></pre> <p>Example output from this code would be:</p> <pre><code>[Thu Mar 03 08:47:21 2022] Parsing start and end timestamps\n[Thu Mar 03 08:47:21 2022] Creating request struct\n[Thu Mar 03 08:47:21 2022] Sending search request ...\n[Thu Mar 03 08:47:21 2022] Search request accepted\n[Thu Mar 03 08:47:21 2022] Request ID: 91f5ed5c-1b22-4b60-b7d2-f8bea44030a3\n[Thu Mar 03 08:47:21 2022] Waiting for search to finish ...\n[Thu Mar 03 08:47:22 2022] Data is now available\n[Thu Mar 03 08:47:22 2022] Downloading 1.46 MB of data ...\n[Thu Mar 03 08:47:22 2022] Data downloaded, search completed\n[Thu Mar 03 08:47:22 2022] Search completed, found 269 records in 1.5 seconds\n</code></pre> <p>An example conjunction record would be:</p> <pre><code>IDL&gt; help,data[0]\n** Structure &lt;69a33d60&gt;, 7 tags, length=296, data length=289, refs=2:\n   DATA_SOURCE     STRUCT    -&gt; &lt;Anonymous&gt; Array[1]\n   EPOCH           STRING    '2019-01-01T00:22:00'\n   LOCATION_GEO    STRUCT    -&gt; &lt;Anonymous&gt; Array[1]\n   LOCATION_GSM    STRUCT    -&gt; &lt;Anonymous&gt; Array[1]\n   NBTRACE         STRUCT    -&gt; &lt;Anonymous&gt; Array[1]\n   SBTRACE         STRUCT    -&gt; &lt;Anonymous&gt; Array[1]\n   METADATA        STRUCT    -&gt; &lt;Anonymous&gt; Array[1]\nIDL&gt; data[0]\n{\n    \"DATA_SOURCE\": {\n        \"IDENTIFIER\": 3,\n        \"PROGRAM\": \"swarm\",\n        \"PLATFORM\": \"swarma\",\n        \"INSTRUMENT_TYPE\": \"footprint\",\n        \"SOURCE_TYPE\": \"leo\",\n        \"DISPLAY_NAME\": \"Swarm A\"\n    },\n    \"EPOCH\": \"2019-01-01T00:22:00\",\n    \"LOCATION_GEO\": {\n        \"LAT\": 67.750000000000000,\n        \"LON\": -134.21866000000000\n    },\n    \"LOCATION_GSM\": {\n        \"LAT\": 79.084940000000003,\n        \"LON\": 137.89024000000001\n    },\n    \"NBTRACE\": {\n        \"LAT\": 68.187640000000002,\n        \"LON\": -133.78503000000001\n    },\n    \"SBTRACE\": {\n        \"LAT\": -64.920006000000001,\n        \"LON\": 170.13804999999999\n    },\n    \"METADATA\": {\n        \"STATE\": \"definitive\",\n        \"TII_ON\": true,\n        \"NBTRACE_REGION\": \"north auroral oval\",\n        \"SBTRACE_REGION\": \"south mid-latitude\",\n        \"RADIAL_DISTANCE\": 6805.6910331714098,\n        \"TII_QUALITY_VIY\": 0,\n        \"TII_QUALITY_VIZ\": 0,\n        \"TII_QUALITY_VIXH\": 0,\n        \"TII_QUALITY_VIXV\": 1,\n        \"SPACECRAFT_REGION\": \"nightside magnetosphere\",\n        \"RADIAL_TRACE_REGION\": \"north auroral oval\"\n    }\n}\n</code></pre>"},{"location":"code/advanced_usage/search/searches_with_metadata_filters/#a-data-product-search-example","title":"A data product search example","text":"<p>To include a metadata filter in a data product search, supply it as an addition argument to the search function.</p> <p>Data product search with metadata filters</p> <p>In the following example, we are searching for data product records over one day for the one of the TREx RGB instruments (Gillam), where the metadata filter for \"keogram_type\" is either \"daily\" or \"hourly\".</p> PythonIDL <p>We use the <code>aurorax.search.data_products.search()</code> function with the <code>metadata_filters_logical_operator</code> and <code>metadata_filters</code> parameters supplied.</p> <pre><code># imports\nimport datetime\nimport pyaurorax\naurorax = pyaurorax.PyAuroraX()\n\n# set up search parameters\nstart = datetime.datetime(2020, 1, 1, 0, 0, 0)\nend = datetime.datetime(2020, 1, 1, 23, 59, 59)\nprograms = [\"trex\"]\nplatforms = [\"gillam\"]\ninstrument_types = [\"RGB ASI\"]\nmetadata_filters_logical_operator = \"AND\"\nmetadata_filters = [\n    {\n        \"key\": \"keogram_type\",\n        \"operator\": \"in\",\n        \"values\": [\n            \"daily\",\n            \"hourly\"\n        ]\n    }\n]\n\n# perform the search\ns = aurorax.search.data_products.search(start=start,\n                                        end=end,\n                                        programs=programs,\n                                        platforms=platforms,\n                                        instrument_types=instrument_types,\n                                        metadata_filters_logical_operator=metadata_filters_logical_operator,\n                                        metadata_filters=metadata_filters,\n                                        verbose=True)\n\n# output data\nprint(s.data)\n</code></pre> <p>Example output from this code would be:</p> <pre><code>[2022-03-03 16:02:00.816900] Search object created\n[2022-03-03 16:02:00.937031] Request submitted\n[2022-03-03 16:02:00.937115] Request ID: c1c87ea8-6d7f-4885-8e12-7c320099ac89\n[2022-03-03 16:02:00.937127] Request details available at: https://api.aurorax.space/api/v1/data_products/requests/c1c87ea8-6d7f-4885-8e12-7c320099ac89\n[2022-03-03 16:02:00.937131] Waiting for data ...\n[2022-03-03 16:02:02.008381] Checking for data ...\n[2022-03-03 16:02:02.141127] Data is now available\n[2022-03-03 16:02:02.141256] Retrieving data ...\n[2022-03-03 16:02:02.199203] Retrieved 40.0 kB of data containing 16 records\n</code></pre> <p>And example data product records would be:</p> <pre><code>[\n    DataProduct(data_source=DataSource(identifier=103, program='trex', platform='gillam', instrument_type='RGB ASI', source_type='ground', display_name='TREx RGB GILL'), start=datetime.datetime(2020, 1, 1, 0, 0), end=datetime.datetime(2020, 1, 1, 23, 59), data_product_type='keogram', url='https://data.phys.uc...', metadata={'keogram_type': 'da...}),\n    DataProduct(data_source=DataSource(identifier=103, program='trex', platform='gillam', instrument_type='RGB ASI', source_type='ground', display_name='TREx RGB GILL'), start=datetime.datetime(2020, 1, 1, 0, 0), end=datetime.datetime(2020, 1, 1, 0, 59), data_product_type='keogram', url='https://data.phys.uc...', metadata={'keogram_type': 'ho...}),\n    DataProduct(data_source=DataSource(identifier=103, program='trex', platform='gillam', instrument_type='RGB ASI', source_type='ground', display_name='TREx RGB GILL'), start=datetime.datetime(2020, 1, 1, 1, 0), end=datetime.datetime(2020, 1, 1, 1, 59), data_product_type='keogram', url='https://data.phys.uc...', metadata={'keogram_type': 'ho...}),\n    ...\n    ...\n    ...\n]\n</code></pre> <p>Using the metadata filter helper functions, we can create a metadata filter object that will be added to a our data product search.</p> <pre><code>; set timeframe, programs, and platforms\nstart_dt = '2020-01-01T00:00:00'\nend_dt = '2020-01-01T23:59:59'\nprograms = ['trex']\nplatforms = ['gillam']\ninstrument_types = ['RGB ASI']\n\n; set metadata filter\nexpression = aurorax_create_metadata_filter_expression('keogram_type', list('daily', 'hourly'),/OPERATOR_IN)\nexpressions = list(expression)\nmetadata_filters = aurorax_create_metadata_filter(expressions,/OPERATOR_AND)\n\n; perform the search\ndata = aurorax_data_product_search(start_dt,end_dt,programs=programs,platforms=platforms,instrument_types=instrument_types,metadata_filters=metadata_filters)\n</code></pre> <p>Example output from this code would be:</p> <pre><code>[Thu Mar 03 09:04:12 2022] Parsing start and end timestamps\n[Thu Mar 03 09:04:12 2022] Creating request struct\n[Thu Mar 03 09:04:12 2022] Sending search request ...\n[Thu Mar 03 09:04:12 2022] Search request accepted\n[Thu Mar 03 09:04:12 2022] Request ID: 763d8e14-cafd-4d29-afe6-e66098dbc954\n[Thu Mar 03 09:04:12 2022] Waiting for search to finish ...\n[Thu Mar 03 09:04:13 2022] Data is now available\n[Thu Mar 03 09:04:13 2022] Downloading 39.11 KB of data ...\n[Thu Mar 03 09:04:13 2022] Data downloaded, search completed\n[Thu Mar 03 09:04:13 2022] Post-processing data into IDL struct\n[Thu Mar 03 09:04:13 2022] Search completed, found 16 records in 1.2 seconds\n</code></pre> <p>An example conjunction record would be:</p> <pre><code>IDL&gt; help,data[0]\n** Structure &lt;713d4c00&gt;, 6 tags, length=200, data length=200, refs=2:\n   START_DT           STRING    '2020-01-01T00:00:00'\n   END_DT             STRING    '2020-01-01T23:59:00'\n   DATA_SOURCE        STRUCT    -&gt; &lt;Anonymous&gt; Array[1]\n   URL                STRING    'https://data.phys.ucalgary.ca/sort_by_project/TREx/RGB/stream2/2020/01/01/gill_rgb-04/20200101__gill_rgb-04_full-keogram.jpg'\n   DATA_PRODUCT_TYPE  STRING    'keogram'\n   METADATA           STRUCT    -&gt; &lt;Anonymous&gt; Array[1]\nIDL&gt; data[0]\n{\n    \"START_DT\": \"2020-01-01T00:00:00\",\n    \"END_DT\": \"2020-01-01T23:59:00\",\n    \"DATA_SOURCE\": {\n        \"IDENTIFIER\": 103,\n        \"PROGRAM\": \"trex\",\n        \"PLATFORM\": \"gillam\",\n        \"INSTRUMENT_TYPE\": \"RGB ASI\",\n        \"SOURCE_TYPE\": \"ground\",\n        \"DISPLAY_NAME\": \"TREx RGB GILL\"\n    },\n    \"URL\": \"https://data.phys.ucalgary.ca/sort_by_project/TREx/RGB/stream2/2020/01/01/gill_rgb-04/20200101__gill_rgb-04_full-keogram.jpg\",\n    \"DATA_PRODUCT_TYPE\": \"keogram\",\n    \"METADATA\": {\n        \"KEOGRAM_TYPE\": \"daily\",\n        \"IMAGING_END_TIME\": \"2020-01-01T13:16:00.000000\",\n        \"IMAGING_START_TIME\": \"2019-12-31T23:30:00.000000\"\n    }\n}\n</code></pre>"},{"location":"code/advanced_usage/search/swarmaurora/","title":"Interact with Swarm-Aurora","text":"<p>Swarm-Aurora can be a very helpful tool for exploring conjunction searches and evaluating data to see if it's of scientific interest. To help visualize conjunction searches performed using IDL-AuroraX, you can use several procedures to interact with Swarm-Aurora. Below, we'll have a closer look at what's possible.</p>"},{"location":"code/advanced_usage/search/swarmaurora/#open-conjunction-search-in-swarm-aurora","title":"Open Conjunction Search in Swarm-Aurora","text":"<p>Example - open conjunction search in Swarm-Aurora</p> <p>This is an example of a simple conjunction search and different ways of opening it in Swarm-Aurora.</p> PythonIDLCommand Line <p>Using the <code>search.conjunctions.swarmaurora</code> submodule, you can open a conjunction search in Swarm-Aurora using a single line of Python code. This procedure uses Python's built-in <code>webbrowser</code> module to launch a browser tab, with Swarm-Aurora loaded in it.</p> <p>PyAuroraX supports two ways of opening conjunction searches in Swarm-Aurora:</p> <ol> <li>Automatically opening in a browser</li> <li>By providing a URL for you to copy into your preferred browser manually</li> </ol> <p>To start, we'll do a simple conjunction search and then explore each of the three options.</p> <pre><code># imports\nimport datetime\nimport pyaurorax\naurorax = pyaurorax.PyAuroraX()\n\n# define search parameters\nstart = datetime.datetime(2019, 1, 1, 0, 0, 0)\nend = datetime.datetime(2019, 1, 3, 23, 59, 59)\nground_params = [\n    {\n        \"programs\": [\"themis-asi\"],\n        \"platforms\": [\"fort smith\", \"gillam\"],\n    }\n]\nspace_params = [\n    {\n        \"programs\": [\"swarm\"],\n        \"hemisphere\": [\"northern\"],\n    }\n]\ndistance = 500\n\n# run conjunction search request\ns = aurorax.search.conjunctions.search(start=start,\n                                       end=end,\n                                       distance=distance,\n                                       ground=ground_params,\n                                       space=space_params,\n                                       verbose=True)\n</code></pre> <p>With the search now done and saved to the <code>s</code> variable, we can either open the results automatically in a browser:</p> <pre><code>aurorax.search.conjunctions.swarmaurora.open_in_browser(s)\n</code></pre> <p>Or, output the URL so you can copy and paste it into your preferred browser manually.</p> <pre><code>print(aurorax.search.conjunctions.swarmaurora.get_url(s))\n</code></pre> <p>If you run into issues with the default browser, or just want to use a different one, you can set the <code>browser</code> parameter to one of the supported browsers from the Python library. To view all browser options, refer to the table here. For example <code>pyaurorax.search.conjunctions.swarmaurora.open_in_browser(s, browser='google-chrome')</code>.</p> <p>Using the <code>aurorax_open_conjunctions_in_swarmaurora</code> procedure, you can open a conjunction search in Swarm-Aurora using a single IDL command. This procedure uses IDL's <code>widget_browser()</code> function to render a window that is a functional browser, with Swarm-Aurora loaded in it.</p> <p>Bug in IDL 8.8.1 and earlier</p> <p>Please note, there exists a bug in IDL versions 8.8.1 and lower for computers using a UHD or 4K screens (resolution larger than 1920x1080). When using the command <code>aurorax_open_conjunctions_in_swarmaurora</code> to open a browser window, the window that launches doesn't work quite right. IDL version 8.8.2 has resolved this bug.</p> <p>IDL-AuroraX supports three ways of opening conjunction searches in Swarm-Aurora:</p> <ol> <li>Automatically opening in an IDL-based browser window</li> <li>By providing a URL for you to copy into your preferred browser manually</li> <li>By copying a URL to your clipboard that can be then pasted into your preferred browser manually</li> </ol> <p>To start, we'll do a simple conjunction search and then explore each of the three options.</p> <pre><code>distance = 500\nstart_dt = '2019-01-01T00:00:00'\nend_dt = '2019-01-03T23:59:59'\nground1 = aurorax_create_criteria_block(programs=['themis-asi'],platforms=['fort smith', 'gillam'],/GROUND)\nground = list(ground1)\nspace1 = aurorax_create_criteria_block(programs=['swarm'],hemisphere=['northern'],/SPACE)\nspace = list(space1)\nresponse = aurorax_conjunction_search(start_dt,end_dt,distance,ground=ground,space=space,/NBTRACE)\n</code></pre> <p>First off, we can open an IDL-based browser window using a single command.</p> <pre><code>IDL&gt; aurorax_open_conjunctions_in_swarmaurora,response.request_id\n</code></pre> <p>Second, we can print out a URL that can be copied into your preferred browser, such as Chrome.</p> <pre><code>IDL&gt; aurorax_open_conjunctions_in_swarmaurora,response.request_id,/print_url\n</code></pre> <p>Lastly, we can have IDL copy that URL to the clipboard for us.</p> <pre><code>IDL&gt; aurorax_open_conjunctions_in_swarmaurora,response.request.id,/clipboard\n</code></pre> <p>Using the <code>--swarmaurora-open-in-browser</code> and <code>--swarmaurora-show-url</code> parameters, you can also interact with Swarm-Aurora using the command line.</p> <p>First, we'll set up our search in a separate JSON file, then run the <code>aurorax-cli</code> command with a few parameters.</p> <p>Filename: conjunction_search.json <pre><code>{\n  \"start\": \"2019-01-01T00:00:00\",\n  \"end\": \"2019-01-03T23:59:59\",\n  \"conjunction_types\": [\"nbtrace\"],\n  \"ground\": [\n    {\n      \"programs\": [\"themis-asi\"],\n      \"platforms\": [\"fort smith\", \"gillam\"],\n      \"instrument_types\": [\"panchromatic ASI\"],\n      \"ephemeris_metadata_filters\": {}\n    }\n  ],\n  \"space\": [\n    {\n      \"programs\": [\"swarm\"],\n      \"platforms\": [],\n      \"instrument_types\": [\"footprint\"],\n      \"ephemeris_metadata_filters\": {},\n      \"hemisphere\": [\"northern\"]\n    }\n  ],\n  \"events\": [],\n  \"max_distances\": {\"ground1-space1\": 500}\n}\n</code></pre></p> <p>Now, you can use the command line to run the search and interact with Swarm-Aurora in a few different ways.</p> <pre><code>$ aurorax-cli conjunctions search conjunction_search.json --swarmaurora-open-browser\n</code></pre> <p>If you want to open it in a different browser from your system's default, you can use the <code>--swarmaurora-browser-type</code> parameter to specify it.</p> <pre><code>$ aurorax-cli conjunctions search conjunction_search.json --swarmaurora-open-browser --swarmaurora-browser-type=firefox`\n</code></pre> <p>Alternatively you can only output the URL for Swarm-Aurora and the run conjunction search, so that you can manually copy and paste it into your preferred browser:</p> <pre><code>$ aurorax-cli conjunctions search conjunction_search.json --swarmaurora-show-url\n</code></pre>"},{"location":"code/advanced_usage/search/swarmaurora/#download-swarm-aurora-custom-import-file","title":"Download Swarm-Aurora custom import file","text":"<p>Example - download Swarm-Aurora custom import file</p> <p>This is an example of a simple conjunction search and then downloading the corresponding Swarm-Aurora custom import file.</p> PythonIDLCommand Line <p>Using the <code>conjunctions.swarmaurora</code> submodule, you can download the Swarm-Aurora custom import file in a single line of Python code. This file can then be shared easily with others, and imported to the Swarm-Aurora Conjunction Finder interface.</p> <p>To start, we'll do a simple conjunction search and then explore each of the three options.</p> <pre><code># imports\nimport pyaurorax\nimport datetime\n\n# define search parameters\nstart = datetime.datetime(2019, 1, 1, 0, 0, 0)\nend = datetime.datetime(2019, 1, 3, 23, 59, 59)\nground_params = [\n    {\n        \"programs\": [\"themis-asi\"],\n        \"platforms\": [\"fort smith\", \"gillam\"],\n    }\n]\nspace_params = [\n    {\n        \"programs\": [\"swarm\"],\n        \"hemisphere\": [\"northern\"],\n    }\n]\ndistance = 500\n\n# run conjunction search request\ns = pyaurorax.conjunctions.search(start=start,\n                                  end=end,\n                                  distance=distance,\n                                  ground=ground_params,\n                                  space=space_params,\n                                  verbose=True)\n</code></pre> <p>With the search now done and saved to the <code>s</code> variable, we can save the search as a Swarm-Aurora custom import file:</p> <pre><code>filename = pyaurorax.conjunctions.swarmaurora.create_custom_import_file(s)\nprint(filename)\n</code></pre> <p>This saves the file to a default output file. Alternatively, you can specify the output filename yourself.</p> <pre><code>filename = pyaurorax.conjunctions.swarmaurora.create_custom_import_file(s, filename=\"/tmp/swarmaurora_custom_import.json\")\nprint(filename)\n</code></pre> <p>Lastly, instead of saving to a file, you can get the custom import file contents and store it into a dictionary variable. Use the <code>returnDict</code> parameter to do this, like so:</p> <pre><code>custom_import_dict = pyaurorax.conjunctions.swarmaurora.create_custom_import_file(s, returnDict=True)\nprint(custom_import_dict)\n</code></pre> <p>Using the <code>aurorax_save_swarmaurora_custom_import_file</code> procedure, you can download a Swarm-Aurora \"custom import\" JSON file. This file can be then shared with others or manually loaded into Swarm-Aurora.</p> <p>To start, we'll do a simple conjunction search.</p> <pre><code>distance = 500\nstart_dt = '2019-01-01T00:00:00'\nend_dt = '2019-01-03T23:59:59'\nground1 = aurorax_create_criteria_block(programs=['themis-asi'],platforms=['fort smith', 'gillam'],/GROUND)\nground = list(ground1)\nspace1 = aurorax_create_criteria_block(programs=['swarm'],hemisphere=['northern'],/SPACE)\nspace = list(space1)\nresponse = aurorax_conjunction_search(start_dt,end_dt,distance,ground=ground,space=space,/NBTRACE)\n</code></pre> <p>Now that we have a search completed, we can ask Swarm-Aurora for the custom import file and save it to disk.</p> <pre><code>IDL&gt; aurorax_save_swarmaurora_custom_import_file,response.request_id\n</code></pre> <p>The output from that command would look like:</p> <pre><code>[Tue Mar 08 20:43:48 2022] Retrieving custom import file contents from Swarm-Aurora ...\n[Tue Mar 08 20:43:48 2022] Writing custom import file to disk ...\n[Tue Mar 08 20:43:48 2022] Finished, file saved to C:\\Users\\someuser\\swarmaurora_custom_import_4b0b6845-7b54-4a47-ab70-96d338f47167.json\n</code></pre> <p>If you want to specify the exact filename to save the JSON file to, then supply the <code>filename</code> parameter.</p> <pre><code>IDL&gt; aurorax_save_swarmaurora_custom_import_file,response.request_id,filename='C:\\my_swarmaurora_custom_import_file.json'\n</code></pre> <p>Using the <code>--swarmaurora-save-custom-import-file</code> parameter, you can perform a conjunction search and save the Swarm-Aurora custom import file too.</p> <p>First, we'll set up our search in a separate JSON file, then run the <code>aurorax-cli</code> command with a few parameters.</p> <p>Filename: conjunction_search.json <pre><code>{\n  \"start\": \"2019-01-01T00:00:00\",\n  \"end\": \"2019-01-03T23:59:59\",\n  \"conjunction_types\": [\"nbtrace\"],\n  \"ground\": [\n    {\n      \"programs\": [\"themis-asi\"],\n      \"platforms\": [\"fort smith\", \"gillam\"],\n      \"instrument_types\": [\"panchromatic ASI\"],\n      \"ephemeris_metadata_filters\": {}\n    }\n  ],\n  \"space\": [\n    {\n      \"programs\": [\"swarm\"],\n      \"platforms\": [],\n      \"instrument_types\": [\"footprint\"],\n      \"ephemeris_metadata_filters\": {},\n      \"hemisphere\": [\"northern\"]\n    }\n  ],\n  \"events\": [],\n  \"max_distances\": {\"ground1-space1\": 500}\n}\n</code></pre></p> <p>Now, you can use the command line to run the search and interact with Swarm-Aurora in a few different ways.</p> <pre><code>$ aurorax-cli conjunctions search conjunction_search.json --swarmaurora-save-custom-import-file\n</code></pre>"},{"location":"code/basic_usage/overview/","title":"The Basics","text":"<p>Update in progress</p> <p>We are currently in the middle of updating these 'Basic Usage' examples to sync up with the latest 1.0.0 major release of PyAuroraX and IDL-AuroraX. This page will be updated shortly.</p> <p>Please view our comprehensive guides / crib sheets or quick examples for now.</p>"},{"location":"code/basic_usage/overview/#data-access","title":"Data Access","text":"<p>Will be updated shortly.</p>"},{"location":"code/basic_usage/overview/#analysis-support-software","title":"Analysis Support Software","text":"<p>Will be updated shortly.</p>"},{"location":"code/basic_usage/overview/#trex-auroral-transport-model-atm","title":"TREx Auroral Transport Model (ATM)","text":"<p>Will be updated shortly.</p>"},{"location":"code/basic_usage/overview/#aurorax-search-engine","title":"AuroraX Search Engine","text":"<ul> <li>Interacting with data sources</li> <li>Performing conjunction searches</li> <li>Performing ephemeris searches</li> <li>Performing data product searches</li> </ul>"},{"location":"code/basic_usage/search/conjunctions/","title":"Conjunction Search","text":"<p>AuroraX developer tools provide a way to quickly find conjunctions between data sources. Below, we'll have a look at how to perform a simple conjunction search request.</p> <p>Also see:</p> <ul> <li>Advanced conjunction searches</li> <li>Asynchronous searches</li> <li>Searches with metadata filters</li> </ul>"},{"location":"code/basic_usage/search/conjunctions/#performing-a-simple-conjunction-search","title":"Performing a simple conjunction search","text":"<p>Below, we'll have a look at how to run \"Example 1\" on the Conjunction Search webpage: searching for conjunctions between a couple THEMIS ASIs and any Swarm satellite, across 3 days, with a max distance of 500km.</p> <p>Example - search for conjunctions between a single ground and space data source</p> PythonIDLCommand Line <p>The <code>conjunctions</code> module provides a way to search for conjunctions between data sources. Specifically we'll be interested in using the <code>pyaurorax.conjunctions.search()</code> function.</p> <pre><code># imports\nimport datetime\nimport pyaurorax\naurorax = pyaurorax.PyAuroraX()\n\n# define search parameters\nstart = datetime.datetime(2019, 1, 1, 0, 0, 0)\nend = datetime.datetime(2019, 1, 3, 23, 59, 59)\nground_params = [\n    {\n        \"programs\": [\"themis-asi\"],\n        \"platforms\": [\"fort smith\", \"gillam\"],\n    }\n]\nspace_params = [\n    {\n        \"programs\": [\"swarm\"],\n        \"hemisphere\": [\"northern\"],\n    }\n]\ndistance = 500\n\n\n# run conjunction search request\ns = aurorax.search.conjunctions.search(start=start,\n                                       end=end,\n                                       distance=distance,\n                                       ground=ground_params,\n                                       space=space_params,\n                                       verbose=True)\n\n# have a look at our results\nprint(s.data)\n</code></pre> <p>Example output from the search function (the output can be silenced if you don't set the <code>verbose</code> parameter):</p> <pre><code>[2022-02-10 18:22:23.205686] Search object created\n[2022-02-10 18:22:23.295399] Request submitted\n[2022-02-10 18:22:23.295471] Request ID: c6d50305-5635-4b3e-9fe1-b517dfb1d7ba\n[2022-02-10 18:22:23.295482] Request details available at: https://api.aurorax.space/api/v1/conjunctions/requests/c6d50305-5635-4b3e-9fe1-b517dfb1d7ba\n[2022-02-10 18:22:23.295486] Waiting for data ...\n[2022-02-10 18:22:24.404386] Checking for data ...\n[2022-02-10 18:22:25.498323] Checking for data ...\n[2022-02-10 18:22:25.589729] Data is now available\n[2022-02-10 18:22:25.589881] Retrieving data ...\n[2022-02-10 18:22:25.696360] Retrieved 83.9 kB of data containing 11 records\n\n[\n    Conjunction(start=datetime.datetime(2019, 1, 2, 9, 17), end=datetime.datetime(2019, 1, 2, 9, 17), min_distance=340.43, max_distance=340.43, data_sources=[...], events=[...]), \n    Conjunction(start=datetime.datetime(2019, 1, 3, 8, 37), end=datetime.datetime(2019, 1, 3, 8, 38), min_distance=237.91, max_distance=315.12, data_sources=[...], events=[...]), \n    Conjunction(start=datetime.datetime(2019, 1, 1, 5, 58), end=datetime.datetime(2019, 1, 1, 5, 59), min_distance=318.75, max_distance=415.14, data_sources=[...], events=[...]),\n    ...\n    ...\n    ...\n]\n</code></pre> <p>IDL-AuroraX provides the <code>aurorax_conjunction_search()</code> function to perform a conjunction search. Further, there are a couple helper functions to create the necessary objects as parameters to the search function.</p> <pre><code>; define timeframe and distance parameters\ndistance = 500\nstart_dt = '2019-01-01T00:00:00'\nend_dt = '2019-01-03T23:59:59'\n\n; create ground criteria block\nground1 = aurorax_create_criteria_block(programs=['themis-asi'],platforms=['fort smith', 'gillam'],/GROUND)\nground = list(ground1)\n\n; create space criteria block\nspace1 = aurorax_create_criteria_block(programs=['swarm'],hemisphere=['northern'],/SPACE)\nspace = list(space1)\n\n; perform search\nresponse = aurorax_conjunction_search(start_dt,end_dt,distance,ground=ground,space=space,/NBTRACE)\n</code></pre> <p>Example output from the search function (the output can be silenced using the <code>/QUIET</code> keyword):</p> <pre><code>[Tue Mar 08 19:42:42 2022] Parsing start and end timestamps\n[Tue Mar 08 19:42:42 2022] Creating request struct\n[Tue Mar 08 19:42:42 2022] Sending search request ...\n[Tue Mar 08 19:42:42 2022] Search request accepted\n[Tue Mar 08 19:42:42 2022] Request ID: 4b0b6845-7b54-4a47-ab70-96d338f47167\n[Tue Mar 08 19:42:42 2022] Waiting for search to finish ...\n[Tue Mar 08 19:42:43 2022] Waiting for search to finish ...\n[Tue Mar 08 19:42:44 2022] Waiting for search to finish ...\n[Tue Mar 08 19:42:45 2022] Data is now available\n[Tue Mar 08 19:42:45 2022] Downloading 85.39 KB of data ...\n[Tue Mar 08 19:42:45 2022] Data downloaded, search completed\n[Tue Mar 08 19:42:45 2022] Post-processing data into IDL struct\n[Tue Mar 08 19:42:45 2022] Search completed, found 11 conjunctions in 3.6 seconds\n</code></pre> <p>Example output of a conjunction returned by the function:</p> <pre><code>IDL&gt; help,response\n** Structure &lt;3cb2f360&gt;, 3 tags, length=40, data length=36, refs=1:\n   REQUEST_TYPE    STRING    'conjunctions'\n   REQUEST_ID      STRING    '4b0b6845-7b54-4a47-ab70-96d338f47167'\n   DATA            OBJREF    &lt;ObjHeapVar2121(LIST)&gt;\nIDL&gt; help,response.data[0]\n** Structure &lt;65839f30&gt;, 8 tags, length=88, data length=88, refs=2:\n   START_DT        STRING    '2019-01-03T08:37:00'\n   END_DT          STRING    '2019-01-03T08:38:00'\n   MIN_DISTANCE    DOUBLE           237.91423\n   MAX_DISTANCE    DOUBLE           315.11637\n   CLOSEST_EPOCH   STRING    '2019-01-03T08:37:00'\n   FARTHEST_EPOCH  STRING    '2019-01-03T08:38:00'\n   DATA_SOURCES    OBJREF    &lt;ObjHeapVar3252(LIST)&gt;\n   EVENTS          OBJREF    &lt;ObjHeapVar3362(LIST)&gt;\nIDL&gt; response.data[0]\n{\n    \"START_DT\": \"2019-01-03T08:37:00\",\n    \"END_DT\": \"2019-01-03T08:38:00\",\n    \"MIN_DISTANCE\": 237.91422828781000,\n    \"MAX_DISTANCE\": 315.11636987259999,\n    \"CLOSEST_EPOCH\": \"2019-01-03T08:37:00\",\n    \"FARTHEST_EPOCH\": \"2019-01-03T08:38:00\",\n    \"DATA_SOURCES\": &lt;ObjHeapVar3252(LIST)&gt;,\n    \"EVENTS\": &lt;ObjHeapVar3362(LIST)&gt;\n}\n</code></pre> <p>Lastly, you can visualize this conjunction search in the Swarm-Aurora Conjunction Browser using a handy procedure called <code>aurorax_open_conjunctions_in_swarmaurora</code>:</p> <pre><code>IDL&gt; aurorax_open_conjunctions_in_swarmaurora,response.request_id\n</code></pre> <p>Performing conjunction searches from the command line can be done using <code>aurorax-cli</code> and an input JSON file with the search parameters specified in it.</p> <p>First step is to create your search JSON file.</p> <p>Note: You can use the Conjunction Search webpage to generate this JSON if you want. Set up your search and then click on the \"About Query\" button, and copy the \"JSON Format\" content to your clipboard.</p> <p>Filename: conjunction_search.json <pre><code>{\n  \"start\": \"2019-01-01T00:00:00\",\n  \"end\": \"2019-01-03T23:59:59\",\n  \"conjunction_types\": [\"nbtrace\"],\n  \"ground\": [\n    {\n      \"programs\": [\"themis-asi\"],\n      \"platforms\": [\"fort smith\", \"gillam\"],\n      \"instrument_types\": [\"panchromatic ASI\"],\n      \"ephemeris_metadata_filters\": {}\n    }\n  ],\n  \"space\": [\n    {\n      \"programs\": [\"swarm\"],\n      \"platforms\": [],\n      \"instrument_types\": [\"footprint\"],\n      \"ephemeris_metadata_filters\": {},\n      \"hemisphere\": [\"northern\"]\n    }\n  ],\n  \"events\": [],\n  \"max_distances\": {\"ground1-space1\": 500}\n}\n</code></pre></p> <p>Now, you can use the command line to run the search. The search results will be saved to a file that you can specify optionally.</p> <pre><code>$ aurorax-cli conjunctions search conjunction_search.json\n</code></pre> <p>And here is the example output from that command:</p> <pre><code>[2022-02-10 18:41:53.282721] Reading in query file ...\n[2022-02-10 18:41:53.283756] Preparing search ...\n[2022-02-10 18:41:53.284067] Search object created\n[2022-02-10 18:41:53.399045] Request submitted\n[2022-02-10 18:41:53.399224] Request ID: 7c3d28d4-62b5-450c-b533-3d67c7553cf9\n[2022-02-10 18:41:53.399257] Request details available at: https://api.aurorax.space/api/v1/conjunctions/requests/7c3d28d4-62b5-450c-b533-3d67c7553cf9\n[2022-02-10 18:41:54.517145] Checking for data ...\n[2022-02-10 18:41:54.632752] Data is now available\n[2022-02-10 18:41:54.633190] Downloading 11 results and 87.4 kB of data ...\n[2022-02-10 18:41:54.745625] Writing data to file ...\n[2022-02-10 18:41:54.750772] Data has been saved to '7c3d28d4-62b5-450c-b533-3d67c7553cf9_data.json'\n</code></pre> <p>To view all available parameters for the search command, you can view the help:</p> <pre><code>$ aurorax-cli conjunctions search --help\n</code></pre>"},{"location":"code/basic_usage/search/data_products/","title":"Data Products","text":"<p>AuroraX developer tools provide a way to retrieve data product records from the AuroraX database. Below, we'll have a look at how to perform a data product search request, which is much like conjunction and ephemeris searching.</p> <ul> <li>About data product data</li> <li>Asynchronous searches</li> <li>Searches with metadata filters</li> </ul>"},{"location":"code/basic_usage/search/data_products/#perform-a-simple-data-product-search","title":"Perform a simple data product search","text":"<p>Let's say we want to retrieve all the data product records the TREx RGB in Fort Smith, for a single day. We'll have a look at how to do this example below.</p> <p>Example - perform a simple data product search</p> PythonIDLCommand Line <p>The <code>data_products</code> module provides a way to retrieve data product data from AuroraX. Specifically we'll be interested in using the <code>pyaurorax.data_products.search()</code> function.</p> <pre><code># imports\nimport datetime\nimport pyaurorax\naurorax = pyaurorax.PyAuroraX()\n\n# define search params\nstart = datetime.datetime(2020, 1, 1, 0, 0, 0)\nend = datetime.datetime(2020, 1, 1, 23, 59, 59)\nprograms = [\"trex\"]\nplatforms = [\"fort smith\"]\ninstrument_types = [\"RGB ASI\"]\n\n# perform the data product search\ns = aurorax.search.data_products.search(start,\n                                        end,\n                                        programs=programs,\n                                        platforms=platforms,\n                                        instrument_types=instrument_types,\n                                        verbose=True)\n\n# have a look at our results\nprint(s.data)\n</code></pre> <p>Example output from the search function (the output can be silenced if you don't set the <code>verbose</code> parameter):</p> <pre><code>[2022-02-10 19:47:29.571828] Search object created\n[2022-02-10 19:47:29.712905] Request submitted\n[2022-02-10 19:47:29.712995] Request ID: 214e97d4-0397-42f4-a863-55bafb43899b\n[2022-02-10 19:47:29.713010] Request details available at: https://api.aurorax.space/api/v1/data_products/requests/214e97d4-0397-42f4-a863-55bafb43899b\n[2022-02-10 19:47:29.713016] Waiting for data ...\n[2022-02-10 19:47:30.789724] Checking for data ...\n[2022-02-10 19:47:30.886493] Data is now available\n[2022-02-10 19:47:30.886644] Retrieving data ...\n[2022-02-10 19:47:30.988056] Retrieved 165.9 kB of data containing 66 records\n\n[\n    DataProduct(data_source=DataSource(identifier=96, program='trex', platform='fort smith', instrument_type='RGB ASI', source_type='ground', display_name='TREx RGB FSMI'), \n                start=datetime.datetime(2020, 1, 1, 0, 0), \n                end=datetime.datetime(2020, 1, 1, 23, 59), \n                data_product_type='keogram', \n                url='https://data.phys.uc...', \n                metadata={'keogram_type': 'da...}), \n    DataProduct(data_source=DataSource(identifier=96, program='trex', platform='fort smith', instrument_type='RGB ASI', source_type='ground', display_name='TREx RGB FSMI'), \n                start=datetime.datetime(2020, 1, 1, 0, 0), \n                end=datetime.datetime(2020, 1, 1, 23, 59), \n                data_product_type='movie', \n                url='https://data.phys.uc...', \n                metadata={'movie_type': 'real...}), \n    DataProduct(data_source=DataSource(identifier=96, program='trex', platform='fort smith', instrument_type='RGB ASI', source_type='ground', display_name='TREx RGB FSMI'), \n                start=datetime.datetime(2020, 1, 1, 0, 0), \n                end=datetime.datetime(2020, 1, 1, 23, 59), \n                data_product_type='keogram', \n                url='https://data.phys.uc...', \n                metadata={'keogram_type': 'da...})\n    ...\n    ...\n    ...\n]\n</code></pre> <p>IDL-AuroraX provides the <code>aurorax_data_product_search()</code> function to perform a data product search.</p> <pre><code>IDL&gt; response = aurorax_data_product_search('2020-01-01T00:00','2020-01-01T23:59',programs=['trex'],platforms=['fort smith'],instrument_types=['RGB ASI'])\n</code></pre> <p>Example output from the search function (the output can be silenced using the <code>/QUIET</code> keyword):</p> <pre><code>[Tue Mar 01 19:06:55 2022] Parsing start and end timestamps\n[Tue Mar 01 19:06:55 2022] Creating request struct\n[Tue Mar 01 19:06:55 2022] Sending search request ...\n[Tue Mar 01 19:06:55 2022] Search request accepted\n[Tue Mar 01 19:06:55 2022] Request ID: 04a174bf-ad0f-4827-97c0-b8550a460ce6\n[Tue Mar 01 19:06:55 2022] Waiting for search to finish ...\n[Tue Mar 01 19:06:56 2022] Data is now available\n[Tue Mar 01 19:06:56 2022] Downloading 162.04 KB of data ...\n[Tue Mar 01 19:06:56 2022] Data downloaded, search completed\n[Tue Mar 01 19:06:56 2022] Post-processing data into IDL struct\n[Tue Mar 01 19:06:56 2022] Search completed, found 66 records in 1.2 seconds\n</code></pre> <p>Example output of a data product record returned by the function:</p> <pre><code>IDL&gt; help,response\n** Structure &lt;6014ead0&gt;, 3 tags, length=40, data length=36, refs=1:\n   REQUEST_TYPE    STRING    'data_products'\n   REQUEST_ID      STRING    'e261544d-a1b2-4333-a1f5-cb80f8495ee4'\n   DATA            OBJREF    &lt;ObjHeapVar2233(LIST)&gt;\nIDL&gt; help,response.data[0]\n** Structure &lt;660aecc0&gt;, 6 tags, length=200, data length=200, refs=2:\n   START_DT            STRING    '2020-01-01T00:00:00'\n   END_DT              STRING    '2020-01-01T23:59:00'\n   DATA_SOURCE         STRUCT    -&gt; &lt;Anonymous&gt; Array[1]\n   URL                 STRING    'https://data.phys.ucalgary.ca/sort_by_project/TREx/RGB/rt-fullres/movie_derived_daily_keograms/2020/01/01/20200101__fsmi_rgb-01_moviebased-keogram.jpg'\n   DATA_PRODUCT_TYPE   STRING    'keogram'\n   METADATA            STRUCT    -&gt; &lt;Anonymous&gt; Array[1]\n\nIDL&gt; response.data[0]\n{\n    \"START_DT\": \"2020-01-01T00:00:00\",\n    \"END_DT\": \"2020-01-01T23:59:00\",\n    \"DATA_SOURCE\": {\n        \"IDENTIFIER\": 96,\n        \"PROGRAM\": \"trex\",\n        \"PLATFORM\": \"fort smith\",\n        \"INSTRUMENT_TYPE\": \"RGB ASI\",\n        \"SOURCE_TYPE\": \"ground\",\n        \"DISPLAY_NAME\": \"TREx RGB FSMI\"\n    },\n    \"URL\": \"https://data.phys.ucalgary.ca/sort_by_project/TREx/RGB/rt-fullres/movie_derived_daily_keograms/2020/01/01/20200101__fsmi_rgb-01_moviebased-keogram.jpg\",\n    \"DATA_PRODUCT_TYPE\": \"keogram\",\n    \"METADATA\": {\n        \"KEOGRAM_TYPE\": \"daily_moviederived\",\n        \"IMAGING_END_TIME\": \"2020-01-01T14:38:00.000000\",\n        \"IMAGING_START_TIME\": \"2020-01-01T00:27:00.000000\"\n    }\n}\n</code></pre> <p>Performing data product searches from the command line can be done using <code>aurorax-cli</code> and an input JSON file with the search parameters specified in it.</p> <p>First step is to create your search JSON file.</p> <p>Filename: data_product_search.json <pre><code>{\n  \"start\": \"2020-01-01T00:00:00\",\n  \"end\": \"2020-01-01T23:59:59\",\n  \"data_sources\": {\n    \"programs\": [\"trex\"],\n    \"platforms\": [\"fort smith\"],\n    \"instrument_types\": [\"RGB ASI\"]\n  },\n  \"data_product_type_filters\": []\n}\n</code></pre></p> <p>Now, you can use the command line to run the search. The search results will be saved to a file that you can specify optionally.</p> <pre><code>$ aurorax-cli data_products search data_products_search.json\n</code></pre> <p>And here is the example output from that command:</p> <pre><code>[2022-02-10 19:53:19.181867] Reading in query file ...\n[2022-02-10 19:53:19.182120] Preparing search ...\n[2022-02-10 19:53:19.182315] Search object created\n[2022-02-10 19:53:19.278056] Request submitted\n[2022-02-10 19:53:19.278151] Request ID: ed62eed1-d3f8-46f9-8ebe-ff5be8505e5f\n[2022-02-10 19:53:19.278167] Request details available at: https://api.aurorax.space/api/v1/data_products/requests/ed62eed1-d3f8-46f9-8ebe-ff5be8505e5f\n[2022-02-10 19:53:20.371726] Checking for data ...\n[2022-02-10 19:53:20.500736] Data is now available\n[2022-02-10 19:53:20.507256] Downloading 66 results and 165.9 kB of data ...\n[2022-02-10 19:53:20.575526] Writing data to file ...\n[2022-02-10 19:53:20.577364] Data has been saved to 'ed62eed1-d3f8-46f9-8ebe-ff5be8505e5f_data.json'\n</code></pre> <p>To view all available parameters for the search command, you can view the help:</p> <pre><code>$ aurorax-cli data_products search --help\n</code></pre>"},{"location":"code/basic_usage/search/data_sources/","title":"Data Sources","text":"<p>Each record in AuroraX is associated with a unique data source that produced it. Each data source is uniquely identified by an integer identifier in the database, or by the combination of its program, platform, and instrument type values.</p> <p>Also see:</p> <ul> <li>Data source availability webpage  </li> <li>Data source statistics webpage  </li> <li>Retrieving data source availability and statistics</li> </ul>"},{"location":"code/basic_usage/search/data_sources/#retrieve-data-sources","title":"Retrieve data sources","text":"<p>You can retrieve all data sources, or retrieve data sources matching a certain set of filter criteria. Below are a few examples.</p> <p>Example - get data sources</p> PythonIDLCommand LineJavascriptBrowser <p>PyAuroraX includes the <code>sources</code> module and serializes data into <code>DataSource</code> objects.</p> <p>You can retrieve ALL data sources using the \"list\" function with no parameters.</p> <pre><code>import pyaurorax\naurorax = pyaurorax.PyAuroraX()\nsources = aurorax.search.sources.list()\nprint(sources)\n</code></pre> <p>If you want to limit the amount of information that is retrieved from AuroraX, you can specify a different <code>format</code> parameter, like so:</p> <pre><code>import pyaurorax\naurorax = pyaurorax.PyAuroraX()\nsources = aurorax.search.sources.list(format=pyaurorax.FORMAT_BASIC_INFO)\nprint(sources)\n</code></pre> <p>If you want to retrieve data sources that match certain filter criteria, say all \"Swarm\" data sources, you can use the additional parameters in the \"list\" function.</p> <pre><code>import pyaurorax\naurorax = pyaurorax.PyAuroraX()\nsources = aurorax.search.sources.list(program=\"swarm\")\nprint(sources)\n</code></pre> <p>You can retrieve ALL data sources using the <code>aurorax_list_sources()</code> function with no parameters.</p> <pre><code>IDL&gt; sources = aurorax_list_sources()\nIDL&gt; help,sources\n</code></pre> <p>If you want to adjust the amount of information that is retrieved from AuroraX, you can specify a <code>format</code> keyword, like so:</p> <pre><code>IDL&gt; sources = aurorax_list_sources(/FORMAT_FULL_RECORD)\nIDL&gt; help,sources\nIDL&gt; sources = aurorax_list_sources(/FORMAT_IDENTIFIER_ONLY)\nIDL&gt; help,sources\n</code></pre> <p>If you want to retrieve data sources that match certain filter criteria, say all \"Swarm\" data sources, you can use additional parameters.</p> <pre><code>IDL&gt; sources = aurorax_list_sources(program='swarm')\nIDL&gt; help,sources\n</code></pre> <p>You can retrieve ALL data sources using the \"list\" function with no parameters.</p> <pre><code>$ aurorax-cli sources list\n</code></pre> <p>If you want to retrieve data sources that match certain filter criteria, say all \"Swarm\" data sources, you can use the additional parameters in the \"list\" function.</p> <pre><code>$ aurorax-cli sources list --program=swarm\n</code></pre> <p>To view all available parameters for this command, you can look at the help list so:</p> <pre><code>$ aurorax-cli sources list --help\n</code></pre> <p>There are many different ways in Javascript to send a GET request, so we'll show it using a basic HTTP request. You can do this with AJAX, JQuery, Node, React, etc.</p> <pre><code>var xhr = new XMLHttpRequest();\nxhr.open(\"GET\", \"https://api.aurorax.space/api/v1/data_sources\");\nxhr.send();\nconsole.log(xhr.responseText)\n</code></pre> <p>You can also just make the request right from your browser. Copy the following URL and paste it in your browser URL bar.</p> <pre><code>https://api.aurorax.space/api/v1/data_sources\n</code></pre>"},{"location":"code/basic_usage/search/ephemeris/","title":"Ephemeris","text":"<p>AuroraX developer tools provide a way to retrieve ephemeris records from the AuroraX database. Below, we'll have a look at how to perform a ephemeris search request, which is much like conjunction and data product searching.</p> <ul> <li>About ephemeris data</li> <li>Asynchronous searches</li> <li>Searches with metadata filters</li> </ul>"},{"location":"code/basic_usage/search/ephemeris/#perform-a-simple-ephemeris-search","title":"Perform a simple ephemeris search","text":"<p>Let's say we want to retrieve all the ephemeris data for the THEMIS ASI in Gillam, for a single hour (UT06). We'll have a look at how to do this example below.</p> <p>Example - perform a simple ephemeris search</p> PythonIDLCommand Line <p>The <code>ephemeris</code> module provides a way to retrieve data product data from AuroraX. Specifically we'll be interested in using the <code>pyaurorax.data_products.search()</code> function.</p> <pre><code># imports\nimport datetime\nimport pyaurorax\naurorax = pyaurorax.PyAuroraX()\n\n# define search params\nstart = datetime.datetime(2019, 1, 1, 6, 0, 0)\nend = datetime.datetime(2019, 1, 1, 6, 59, 59)\nprograms = [\"themis-asi\"]\nplatforms = [\"gillam\"]\ninstrument_types = [\"panchromatic ASI\"]\n\n# perform the ephemeris search\ns = aurorax.search.ephemeris.search(start,\n                                    end,\n                                    programs=programs,\n                                    platforms=platforms,\n                                    instrument_types=instrument_types,\n                                    verbose=True)\n\n# have a look at our results\nprint(s.data)\n</code></pre> <p>Example output from the search function (the output can be silenced if you don't set the <code>verbose</code> parameter):</p> <pre><code>[2022-02-10 18:58:17.199294] Search object created\n[2022-02-10 18:58:17.255970] Request submitted\n[2022-02-10 18:58:17.256096] Request ID: 86d06815-47da-4098-b04f-b021d9ae21bf\n[2022-02-10 18:58:17.256117] Request details available at: https://api.aurorax.space/api/v1/ephemeris/requests/86d06815-47da-4098-b04f-b021d9ae21bf\n[2022-02-10 18:58:17.256123] Waiting for data ...\n[2022-02-10 18:58:18.342237] Checking for data ...\n[2022-02-10 18:58:18.624596] Data is now available\n[2022-02-10 18:58:18.624683] Retrieving data ...\n[2022-02-10 18:58:18.705637] Retrieved 203.5 kB of data containing 60 records\n\n[\n    Ephemeris(data_source=DataSource(identifier=46, program='themis-asi', platform='gillam', instrument_type='panchromatic ASI', source_type='ground', display_name='THEMIS-ASI GILL'),\n              epoch=datetime.datetime(2019, 1, 1, 6, 0), \n              location_geo=Location(lat=56.376723, lon=-94.643664), \n              location_gsm=Location(lat=None, lon=None), \n              nbtrace=Location(lat=56.376723, lon=-94.643664), \n              nbtrace=Location(lat=56.376723, lon=-94.643664), \n              metadata={'clausen_ml_oath': ...}),\n    Ephemeris(data_source=DataSource(identifier=46, program='themis-asi', platform='gillam', instrument_type='panchromatic ASI', source_type='ground', display_name='THEMIS-ASI GILL'),\n              epoch=datetime.datetime(2019, 1, 1, 6, 1), \n              location_geo=Location(lat=56.376723, lon=-94.643664), \n              location_gsm=Location(lat=None, lon=None), \n              nbtrace=Location(lat=56.376723, lon=-94.643664), \n              nbtrace=Location(lat=56.376723, lon=-94.643664), \n              metadata={'clausen_ml_oath': ...}),\n    Ephemeris(data_source=DataSource(identifier=46, program='themis-asi', platform='gillam', instrument_type='panchromatic ASI', source_type='ground', display_name='THEMIS-ASI GILL'),\n              epoch=datetime.datetime(2019, 1, 1, 6, 2), \n              location_geo=Location(lat=56.376723, lon=-94.643664), \n              location_gsm=Location(lat=None, lon=None), \n              nbtrace=Location(lat=56.376723, lon=-94.643664), \n              nbtrace=Location(lat=56.376723, lon=-94.643664), \n              metadata={'clausen_ml_oath': ...}),\n    ...\n    ...\n    ...\n]\n</code></pre> <p>IDL-AuroraX provides the <code>aurorax_ephemeris_search()</code> function to perform an ephemeris search.</p> <pre><code>IDL&gt; response = aurorax_ephemeris_search('2019-01-01T06:00','2019-01-01T06:59',programs=['themis-asi'],platforms=['gillam'],instrument_types=['panchromatic ASI'])\n</code></pre> <p>Example output from the search function (the output can be silenced using the <code>/QUIET</code> keyword):</p> <pre><code>[Tue Mar 01 18:58:56 2022] Parsing start and end timestamps\n[Tue Mar 01 18:58:56 2022] Creating request struct\n[Tue Mar 01 18:58:56 2022] Sending search request ...\n[Tue Mar 01 18:58:56 2022] Search request accepted\n[Tue Mar 01 18:58:56 2022] Request ID: 815f36e9-80d5-4965-a4d1-1dba3810a337\n[Tue Mar 01 18:58:57 2022] Waiting for search to finish ...\n[Tue Mar 01 18:58:58 2022] Data is now available\n[Tue Mar 01 18:58:58 2022] Downloading 198.77 KB of data ...\n[Tue Mar 01 18:58:58 2022] Data downloaded, search completed\n[Tue Mar 01 18:58:58 2022] Search completed, found 60 records in 2.7 seconds\n</code></pre> <p>Example output of an ephemeris record returned by the function:</p> <pre><code>IDL&gt; help,response\n** Structure &lt;3cc9ec70&gt;, 3 tags, length=40, data length=36, refs=1:\n   REQUEST_TYPE    STRING    'ephemeris'\n   REQUEST_ID      STRING    'd7fe07f5-24b0-453d-8947-29b3493dbeff'\n   DATA            OBJREF    &lt;ObjHeapVar2361(LIST)&gt;\nIDL&gt; help,response.data[0]\n** Structure &lt;69a38590&gt;, 7 tags, length=248, data length=248, refs=2:\n   DATA_SOURCE     STRUCT    -&gt; &lt;Anonymous&gt; Array[1]\n   EPOCH           STRING    '2019-01-01T06:00:00'\n   LOCATION_GEO    STRUCT    -&gt; &lt;Anonymous&gt; Array[1]\n   LOCATION_GSM    STRUCT    -&gt; &lt;Anonymous&gt; Array[1]\n   NBTRACE         STRUCT    -&gt; &lt;Anonymous&gt; Array[1]\n   SBTRACE         STRUCT    -&gt; &lt;Anonymous&gt; Array[1]\n   METADATA        STRUCT    -&gt; &lt;Anonymous&gt; Array[1]\n\nIDL&gt; response.data[0]\n{\n    \"DATA_SOURCE\": {\n        \"IDENTIFIER\": 46,\n        \"PROGRAM\": \"themis-asi\",\n        \"PLATFORM\": \"gillam\",\n        \"INSTRUMENT_TYPE\": \"panchromatic ASI\",\n        \"SOURCE_TYPE\": \"ground\",\n        \"DISPLAY_NAME\": \"THEMIS-ASI GILL\"\n    },\n    \"EPOCH\": \"2019-01-01T06:00:00\",\n    \"LOCATION_GEO\": {\n        \"LAT\": 56.376722999999998,\n        \"LON\": -94.643664000000001\n    },\n    \"LOCATION_GSM\": {\n        \"LAT\": \"!NULL\",\n        \"LON\": \"!NULL\"\n    },\n    \"NBTRACE\": {\n        \"LAT\": 56.376722999999998,\n        \"LON\": -94.643664000000001\n    },\n    \"SBTRACE\": {\n        \"LAT\": -72.794974970070754,\n        \"LON\": -134.97438185364899\n    },\n    \"METADATA\": {\n        \"CLAUSEN_ML_OATH\": \"classified as discrete\",\n        \"CALGARY_APA_ML_V1\": \"classified as not APA\",\n        \"CALGARY_CLOUD_ML_V1\": \"classified as not cloudy\",\n        \"CALGARY_APA_ML_V1_CONFIDENCE\": 100.00000000000000,\n        \"CALGARY_CLOUD_ML_V1_CONFIDENCE\": 99.980000000000004\n    }\n}\n</code></pre> <p>Performing ephemeris searches from the command line can be done using <code>aurorax-cli</code> and an input JSON file with the search parameters specified in it.</p> <p>First step is to create your search JSON file.</p> <p>Filename: ephemeris_search.json <pre><code>{\n  \"start\": \"2019-01-01T06:00:00\",\n  \"end\": \"2019-01-01T06:59:59\",\n  \"data_sources\": {\n    \"programs\": [\"themis-asi\"],\n    \"platforms\": [\"gillam\"],\n    \"instrument_types\": [\"panchromatic ASI\"]\n  }\n}\n</code></pre></p> <p>Now, you can use the command line to run the search. The search results will be saved to a file that you can specify optionally.</p> <pre><code>$ aurorax-cli ephemeris search ephemeris_search.json\n</code></pre> <p>And here is the example output from that command:</p> <pre><code>[2022-02-10 19:09:02.252895] Reading in query file ...\n[2022-02-10 19:09:02.253117] Preparing search ...\n[2022-02-10 19:09:02.253493] Search object created\n[2022-02-10 19:09:02.319513] Request submitted\n[2022-02-10 19:09:02.319598] Request ID: c37fd159-36c3-47bd-a9e1-6b4ea7ec2138\n[2022-02-10 19:09:02.319611] Request details available at: https://api.aurorax.space/api/v1/ephemeris/requests/c37fd159-36c3-47bd-a9e1-6b4ea7ec2138\n[2022-02-10 19:09:03.395136] Checking for data ...\n[2022-02-10 19:09:03.493674] Data is now available\n[2022-02-10 19:09:03.511975] Downloading 60 results and 203.5 kB of data ...\n[2022-02-10 19:09:03.617620] Writing data to file ...\n[2022-02-10 19:09:03.620776] Data has been saved to 'c37fd159-36c3-47bd-a9e1-6b4ea7ec2138_data.json'\n</code></pre> <p>To view all available parameters for the search command, you can view the help:</p> <pre><code>$ aurorax-cli ephemeris search --help\n</code></pre>"},{"location":"code/idlaurorax_api_reference/overview/","title":"IDL-AuroraX API Reference","text":"<p>IDL-AuroraX is an IDL library for interacting with the AuroraX platform. It can be used to retrieve data such as ephemeris and data product records, and perform conjunction searches.</p> <p>The below pages provide the documentation for each function. Examples can be found in the over-arching \"Basic Usage\" and \"Advanced Usage\" sections.</p>"},{"location":"code/idlaurorax_api_reference/overview/#data-access","title":"Data Access","text":"<ul> <li><code>aurorax_list_datasets</code></li> <li><code>aurorax_list_observatories</code></li> <li><code>aurorax_ucalgary_get_urls</code></li> <li><code>aurorax_ucalgary_download</code></li> <li><code>aurorax_ucalgary_download_best_skymap</code></li> <li><code>aurorax_ucalgary_read</code></li> <li><code>aurorax_ucalgary_is_read_supported</code></li> </ul>"},{"location":"code/idlaurorax_api_reference/overview/#analysis-support-software","title":"Analysis Support Software","text":"<ul> <li><code>aurorax_bounding_box_extract_metric</code></li> <li><code>aurorax_calibrate_rego</code></li> <li><code>aurorax_calibrate_trex_nir</code></li> <li><code>aurorax_keogram_add_axis</code></li> <li><code>aurorax_keogram_create_custom</code></li> <li><code>aurorax_keogram_create</code></li> <li><code>aurorax_keogram_plot</code></li> <li><code>aurorax_montage_create</code></li> <li><code>aurorax_mosaic_plot</code></li> <li><code>aurorax_mosaic_oplot</code></li> <li><code>aurorax_mosaic_prep_images</code></li> <li><code>aurorax_mosaic_prep_skymap</code></li> <li><code>aurorax_get_decomposed_color</code></li> <li><code>aurorax_movie</code></li> </ul>"},{"location":"code/idlaurorax_api_reference/overview/#trex-auroral-transport-model-atm","title":"TREx Auroral Transport Model (ATM)","text":"<ul> <li><code>aurorax_atm_forward</code></li> <li><code>aurorax_atm_forward_get_output_flags</code></li> <li><code>aurorax_atm_inverse</code></li> <li><code>aurorax_atm_inverse_get_output_flags</code></li> </ul>"},{"location":"code/idlaurorax_api_reference/overview/#aurorax-search-engine","title":"AuroraX Search Engine","text":"<ul> <li><code>aurorax_conjunction_search</code></li> <li><code>aurorax_open_conjunctions_in_aurorax</code></li> <li><code>aurorax_open_conjunctions_in_swarmaurora</code></li> <li><code>aurorax_save_swarmaurora_custom_import_file</code></li> <li><code>aurorax_create_advanced_distances_hash</code></li> <li><code>aurorax_create_criteria_block</code></li> <li><code>aurorax_create_metadata_filter</code></li> <li><code>aurorax_create_metadata_filter_expression</code></li> <li><code>aurorax_data_products_availability</code></li> <li><code>aurorax_data_product_search</code></li> <li><code>aurorax_ephemeris_availability</code></li> <li><code>aurorax_ephemeris_search</code></li> <li><code>aurorax_list_sources</code></li> </ul>"},{"location":"code/idlaurorax_api_reference/data/aurorax_list_datasets/","title":"aurorax_list_datasets","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_LIST_DATASETS\n;\n; PURPOSE:\n;       Retrieve list of available datasets for which you can\n;       download data.\n;\n; EXPLANATION:\n;       Retrieve information about available datasets, including provider,\n;       short+long descriptions, and DOI details. Optional parameters are\n;       used to filter for certain matching datasets.\n;\n; CALLING SEQUENCE:\n;       aurorax_list_datasets()\n;\n; PARAMETERS:\n;       name         dataset name for filter on, case-sensitive and partial\n;                    matches are allowed. Optional.\n;\n; OUTPUT\n;       the found datasets\n;\n; OUTPUT TYPE:\n;       a list of structs\n;\n; EXAMPLES:\n;       datasets = aurorax_list_datasets()\n;       datasets = aurorax_list_datasets(name='THEMIS_ASI')\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/data/aurorax_list_observatories/","title":"aurorax_list_observatories","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_LIST_OVSERVATORIES\n;\n; PURPOSE:\n;       Retrieve list of available observatories where an instrument exists.\n;\n; EXPLANATION:\n;       Retrieve information about observatories, including full name, geodetic\n;       latitude and longitude. Optional parameters are used to filter for certain\n;       matching observatories.\n;\n; CALLING SEQUENCE:\n;       aurorax_list_observatories(instrument_array)\n;\n; PARAMETERS:\n;       insrument_array     the insrument array. Possible values are 'themis_asi',\n;                           'rego', 'trex_rgb', 'trex_nir', and 'trex_blue'.\n;       uid                 site unique identifier to filter on, optional\n;\n; OUTPUT\n;       the found observatories\n;\n; OUTPUT TYPE:\n;       a list of structs\n;\n; EXAMPLES:\n;       observatories = aurorax_list_observatories('themis_asi')\n;       observatories = aurorax_list_datasets('trex_rgb', uid='gill')\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/data/aurorax_ucalgary_download/","title":"aurorax_ucalgary_download","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_UCALGARY_DOWNLOAD\n;\n; PURPOSE:\n;       Download data from the UCalgary Open Data Platform\n;\n; EXPLANATION:\n;       Download data from the UCalgary Open Data Platform, for the given\n;       dataset, timeframe, and optional site/device.\n;\n; CALLING SEQUENCE:\n;       aurorax_ucalgary_download(dataset_name, start_ts, end_ts)\n;\n; PARAMETERS:\n;       dataset_name       name of the dataset to download data for\n;       start_ts           start timestamp, format as ISO time string (YYYY-MM-DDTHH:MM:SS)\n;       end_ts             end timestamp, format as ISO time string (YYYY-MM-DDTHH:MM:SS)\n;       site_uid           unique 4-letter site UID to filter on (e.g., atha, gill, fsmi), optional\n;       device_uid         unique device UID to filter on (e.g., themis08, rgb-09), optional\n;       download_path      path to save data to, default is your home directory; optional\n;\n; KEYWORDS:\n;       /OVERWRITE         download the files regardless of them existing locally already\n;       /QUIET             no print messages, data download will be silent\n;\n; OUTPUT\n;       information about the downloaded data\n;\n; OUTPUT TYPE:\n;       a struct\n;\n; EXAMPLES:\n;       d = aurorax_ucalgary_download('THEMIS_ASI_RAW','2022-01-01T06:00:00','2022-01-01T06:59:59',site_uid='atha')\n;       d = aurorax_ucalgary_download('TREX_RGB_RAW_NOMINAL','2022-01-01T06:00:00','2022-01-01T06:00:00',/overwrite)\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/data/aurorax_ucalgary_download_best_skymap/","title":"aurorax_ucalgary_download_best_skymap","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_UCALGARY_DOWNLOAD_BEST_SKYMAP\n;\n; PURPOSE:\n;       Download the best skymap for the corresponding parameters\n;\n; EXPLANATION:\n;       Download the best skymap for the given dataset name, timestamp, and site UID\n;\n; CALLING SEQUENCE:\n;       aurorax_ucalgary_download_best_skymap(dataset_name, site_uid, time_stamp)\n;\n; PARAMETERS:\n;       dataset_name       name of the skymap dataset to download data for\n;       site_uid           unique 4-letter site UID to retrieve skymap for\n;       time_stamp         timestamp, format as ISO time string (YYYY-MM-DDTHH:MM:SS)\n;       download_path      path to save data to, default is your home directory; optional\n;\n; KEYWORDS:\n;       /OVERWRITE         download the skymap files regardless of them existing locally already\n;       /QUIET             no print messages, data download will be silent\n;\n; OUTPUT\n;       information about the downloaded data\n;\n; OUTPUT TYPE:\n;       a struct\n;\n; EXAMPLES:\n;       d = aurorax_ucalgary_download_best_skymap('THEMIS_ASI_SKYMAP_IDLSAV','atha','2020-01-01T00:00:00')\n;       d = aurorax_ucalgary_download_best_skymap('TREX_RGB_SKYMAP_IDLSAV','gill','2023-02-01T06:00:00',/overwrite)\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/data/aurorax_ucalgary_get_urls/","title":"aurorax_ucalgary_get_urls","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_UCALGARY_GET_URLS\n;\n; PURPOSE:\n;       Retrieve list of URLS that can be downloaded from the UCalgary\n;       Open Data Platform.\n;\n; EXPLANATION:\n;       Retrieve the URLs of files available for download from the UCalgary\n;       Open Data Platform, for the given dataset, timeframe, and optional\n;       site/device. This function is used by the aurorax_ucalgary_download()\n;       function.\n;\n; CALLING SEQUENCE:\n;       aurorax_ucalgary_get_urls(dataset_name, start_ts, end_ts)\n;\n; PARAMETERS:\n;       dataset_name       name of the dataset to get URLs of data files for\n;       start_ts           start timestamp, format as ISO time string (YYYY-MM-DDTHH:MM:SS)\n;       end_ts             end timestamp, format as ISO time string (YYYY-MM-DDTHH:MM:SS)\n;       site_uid           unique 4-letter site UID to filter on (e.g., atha, gill, fsmi), optional\n;       device_uid         unique device UID to filter on (e.g., themis08, rgb-09), optional\n;\n; OUTPUT\n;       information about the available URLs of data files\n;\n; OUTPUT TYPE:\n;       a struct\n;\n; EXAMPLES:\n;       u = aurorax_ucalgary_get_urls('THEMIS_ASI_RAW','2022-01-01T06:00:00','2022-01-01T06:59:59',site_uid='atha')\n;       u = aurorax_ucalgary_get_urls('TREX_RGB_RAW_NOMINAL','2022-01-01T06:00:00','2022-01-01T06:00:00')\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/data/aurorax_ucalgary_is_read_supported/","title":"aurorax_ucalgary_is_read_supported","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_UCALGARY_IS_READ_SUPPORTED\n;\n; PURPOSE:\n;       Determine if a given dataset is supported in the aurorax_ucalgary_read()\n;       function.\n;\n; EXPLANATION:\n;       Some datasets provided by UCalgary require special readfile routines. This\n;       function provides the ability to programmatically determine if a dataset\n;       is supported in the aurorax_ucalgary_read() function.\n;\n;       Some datasets are simple enough for special read routines to be needed. For\n;       example, 'THEMIS_ASI_DAILY_KEOGRAM_JPG', can be read in using the built-in\n;       READ_JPEG procedure.\n;\n; CALLING SEQUENCE:\n;       aurorax_ucalgary_is_read_supported(dataset_name)\n;\n; PARAMETERS:\n;       dataset_name       name of the dataset check for read support\n;\n; OUTPUT\n;       0 for False, 1 for True\n;\n; OUTPUT TYPE:\n;       integer\n;\n; EXAMPLES:\n;       supported = aurorax_ucalgary_is_read_supported('THEMIS_ASI_RAW')\n;       supported = aurorax_ucalgary_is_read_supported('THEMIS_ASI_DAILY_KEOGRAM_JPG')\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/data/aurorax_ucalgary_read/","title":"aurorax_ucalgary_read","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_UCALGARY_READ\n;\n; PURPOSE:\n;       Read data downloaded from the UCalgary Open Data Platform\n;\n; EXPLANATION:\n;       Read data files that were dowloaded from the UCalgary Open\n;       Data Platform.\n;\n; CALLING SEQUENCE:\n;       aurorax_ucalgary_read(dataset, file_list)\n;\n; PARAMETERS:\n;       dataset            struct for the dataset that is being read in (retrieved from aurorax_list_dataset() function)\n;       file_list          list of files on the local computer to read in (can also be a single filename string)\n;\n; KEYWORDS:\n;       /FIRST_RECORD      only read the first record/frame/image in each file\n;       /NO_METADATA       exclude reading of metadata\n;       /QUIET             read data silently, no print messages will be shown\n;\n; OUTPUT\n;       the loaded data\n;\n; OUTPUT TYPE:\n;       a struct\n;\n; EXAMPLES:\n;       download_obj = aurorax_ucalgary_download('THEMIS_ASI_RAW','2022-01-01T06:00:00','2022-01-01T06:59:59',site_uid='gill')\n;       data = aurorax_ucalgary_read(d.dataset,f)\n;       help,data\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/models/atm/aurorax_atm_forward/","title":"aurorax_atm_forward","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_ATM_FORWARD\n;\n; PURPOSE:\n;       Perform TREx Auroral Transport Model (ATM) 'forward' calculations.\n;\n; EXPLANATION:\n;       Perform a forward calculation using the TREx Auroral Transport Model\n;       and the supplied input parameters. Note that this function utilizes the\n;       UCalgary Space Remote Sensing API to perform the calculation.\n;\n;       The ATM model is 1D and time-independent. However, the optional parameters\n;       timescale_auroral and timescale_transport provide limited support for time-dependent\n;       and transport process. The timescale_auroral parameter (T0) is the duration\n;       of the precipitation. The timescale_transport parameter is defined by L/v0,\n;       in which L is the dimension of the auroral structure, and v0 is the cross-structure\n;       drift speed. The model quasi-analytically solves the continuity equation under\n;       a square input (with time duration T0 and spatial width L) input of precipitation.\n;       The initial/boundary conditions are given by IRI. The output yields the mean\n;       density/VER over [0-L] at time T0.\n;\n; CALLING SEQUENCE:\n;       aurorax_atm_forward(time_stamp,geo_lat,geo_lon,output_flags,...)\n;\n; PARAMETERS:\n;       time_stamp                          Timestamp in UTC, format must be YYYY-MM-DDTHH:MM:SS. Required\n;       geo_lat                             Latitude in geodetic coordinates: -90.0 to 90.0. Required\n;       geo_lon                             Longitude in geodetic coordinates: -180.0 to 180.0. Required\n;       output_flags                        Flags to indictate which values are included in the output, generated\n;                                           using the aurorax_atm_forward_get_output_flags() function. Required\n;       maxwellian_energy_flux              Maxwellian energy flux in erg/cm2/s. Default is 10. This parameter is optional.\n;       gaussian_energy_flux                Gaussian energy flux in erg/cm2/s. Default is 0.0. Note that gaussian_peak_energy \n;                                             and gaussian_spectral_width must be specified if the gaussian_energy_flux is not \n;                                             0. This parameter is optional.\n;       maxwellian_characteristic_energy    Maxwellian characteristic energy in eV. Default is 5000. Note that maxwellian_characteristic_energy \n;                                             must be specified if the maxwellian_energy_flux is not 0. This parameter is optional.\n;       gaussian_peak_energy                Gaussian peak energy in eV. Default is 1000. Note this parameter must be specified \n;                                             if the gaussian_energy_flux is not 0. This parameter is optional.\n;       gaussian_spectral_width             Gaussian spectral width in eV. Default is 100. Note this parameter must be specified \n;                                             if the gaussian_energy_flux is not 0. This parameter is optional.\n;       nrlmsis_model_version               NRLMSIS version number. Possible values are 00 or 2.0. Default is 2.0. This parameter \n;                                             is optional. More details about this empirical model can be found here, and here.\n;       oxygen_correction_factor            Oxygen correction factor used to multiply by in the empirical model. Default is 1. \n;                                             This parameter is optional.\n;       timescale_auroral                   The duration of the precipitation, in seconds. Default is 600 (10 minutes). This \n;                                             parameter is optional.\n;       timescale_transport                 Defined by L/v0, in which L is the dimension of the auroral structure, and v0 is \n;                                             the cross-structure drift speed. Represented in seconds. Default is 600 (10 minutes). \n;                                             This parameter is optional.\n;       atm_model_version                   ATM model version number. Possible values are only '1.0' at this time, but will have \n;                                             additional possible values in the future. This parameter is optional.\n;       custom_spectrum                     A struct containing two 1D float arrays. One array containing values representing the \n;                                             energy in eV, and another representing flux in 1/cm2/sr/eV. Note that this array \n;                                             cannot contain negative values. This parameter is optional.\n;\n; KEYWORDS:\n;       /NO_CACHE         The UCalgary Space Remote Sensing API utilizes a caching layer for performing ATM \n;                         calculations. If this variation of input parameters has been run before (and the \n;                         cache is still valid), then it will not re-run the calculation. Instead it will \n;                         return the cached results immediately. To disable the caching layer, use this keyword.\n;\n; OUTPUT\n;       Calculated results\n;\n; OUTPUT TYPE:\n;       a struct\n;\n; EXAMPLES:\n;       Refer to examples directory, or data.phys.ucalgary.ca\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/models/atm/aurorax_atm_forward_get_output_flags/","title":"aurorax_atm_forward_get_output_flags","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_ATM_FORWARD_GET_OUTPUT_FLAGS\n;\n; PURPOSE:\n;       Initialize ATM 'forward' calculation output flag settings.\n;\n; EXPLANATION:\n;       Create an hash object which used to represent all output values included in \n;       an ATM forward calculation. ATM calculations are performed in a way where \n;       you can toggle ON/OFF whichever pieces of information you do or don't want. \n;       This improves efficiency of the calculation routine resulting in faster queries.\n;       \n;       By default, all output flags are disabled. There exist several helper keywords\n;       to enable all flags, or enable only height-integrated Rayleighs flags.\n;\n; CALLING SEQUENCE:\n;       aurorax_atm_forward_get_output_flags()\n;\n; KEYWORDS:\n;       /SET_ALL_TRUE                               enable all output flags to \n;       /ENABLE_ONLY_HEIGHT_INTEGRATED_RAYLEIGHS    enable only all height-integrated Rayleighs flags\n;\n; OUTPUT\n;       Output flags hash\n;\n; OUTPUT TYPE:\n;       a hash\n;\n; EXAMPLES:\n;       aurorax_atm_forward_get_output_flags()\n;       aurorax_atm_forward_get_output_flags(/SET_ALL_TRUE)\n;       aurorax_atm_forward_get_output_flags(/ENABLE_ONLY_HEIGHT_INTEGRATED_RAYLEIGHS)\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/models/atm/aurorax_atm_inverse/","title":"aurorax_atm_inverse","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_ATM_INVERSE\n;\n; PURPOSE:\n;       Perform TREx Auroral Transport Model (ATM) 'inverse' calculations.\n;\n; EXPLANATION:\n;       Perform a inverse calculation using the TREx Auroral Transport Model\n;       and the supplied input parameters. Note that this function utilizes the\n;       UCalgary Space Remote Sensing API to perform the calculation.\n;\n; CALLING SEQUENCE:\n;       aurorax_atm_inverse(time_stamp,geo_lat,geo_lon,intensity_4278,intensity_5577,intensity_6300,intensity_8446,output_flags,...)\n;\n; PARAMETERS:\n;       time_stamp                            Timestamp in UTC, format must be YYYY-MM-DDTHH:MM:SS. Required\n;       geo_lat                               Latitude in geodetic coordinates. Currently limited to the Transition Region Explorer \n;                                               (TREx) region of &gt;=50.0 and &lt;61.5 degrees. An error will be raised if outside of this \n;                                               range. This parameter is required.\n;       geo_lon                               Longitude in geodetic coordinates. Currently limited to the Transition Region Explorer \n;                                               (TREx) region of &gt;=-110 and &lt;-70 degrees. An error will be raised if outside of this \n;                                               range. This parameter is required.\n;       intensity_4278                        Intensity of the 427.8nm (blue) wavelength in Rayleighs. This parameter is required.\n;       intensity_5577                        Intensity of the 557.7nm (green) wavelength in Rayleighs. This parameter is required.\n;       intensity_6300                        Intensity of the 630.0nm (red) wavelength in Rayleighs. This parameter is required.\n;       intensity_8446                        Intensity of the 844.6nm (near infrared) wavelength in Rayleighs. This parameter is required.\n;       output_flags                          Flags to indictate which values are included in the output, generated\n;                                             using the aurorax_atm_forward_get_output_flags() function. Required\n;       precipitation_flux_spectral_type      The precipitation flux spectral type to use. Possible values are gaussian or maxwellian. The \n;                                               default is gaussian. This parameter is optional.\n;       nrlmsis_model_version                 NRLMSIS version number. Possible values are 00 or 2.0. Default is 2.0. This parameter\n;                                               is optional. More details about this empirical model can be found here, and here.\n;       atmospheric_attenuation_correction    Apply an atmospheric attenuation correction factor. Default is 0. Set to 1 to enable.\n;       atm_model_version                     ATM model version number. Possible values are only '1.0' at this time, but will have\n;                                               additional possible values in the future. This parameter is optional.\n;\n; KEYWORDS:\n;       /NO_CACHE         The UCalgary Space Remote Sensing API utilizes a caching layer for performing ATM\n;                         calculations. If this variation of input parameters has been run before (and the\n;                         cache is still valid), then it will not re-run the calculation. Instead it will\n;                         return the cached results immediately. To disable the caching layer, use this keyword.\n;\n; OUTPUT\n;       Calculated results\n;\n; OUTPUT TYPE:\n;       a struct\n;\n; EXAMPLES:\n;       Refer to examples directory, or data.phys.ucalgary.ca\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/models/atm/aurorax_atm_inverse_get_output_flags/","title":"aurorax_atm_inverse_get_output_flags","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_ATM_INVERSE_GET_OUTPUT_FLAGS\n;\n; PURPOSE:\n;       Initialize ATM 'inverse' calculation output flag settings.\n;\n; EXPLANATION:\n;       Create an hash object which used to represent all output values included in\n;       an ATM inverse calculation. ATM calculations are performed in a way where\n;       you can toggle ON/OFF whichever pieces of information you do or don't want.\n;       This improves efficiency of the calculation routine resulting in faster queries.\n;\n;       By default, all output flags are disabled. There exist several helper keywords\n;       to enable all flags, or enable only height-integrated Rayleighs flags.\n;\n; CALLING SEQUENCE:\n;       aurorax_atm_inverse_get_output_flags()\n;\n; KEYWORDS:\n;       /SET_ALL_TRUE          enable all output flags to\n;\n; OUTPUT\n;       Output flags hash\n;\n; OUTPUT TYPE:\n;       a hash\n;\n; EXAMPLES:\n;       aurorax_atm_inverse_get_output_flags()\n;       aurorax_atm_inverse_get_output_flags(/SET_ALL_TRUE)\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/search/availability/data_products/","title":"aurorax_data_products_availability","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_DATA_PRODUCTS_AVAILABILITY\n;\n; PURPOSE:\n;       Retrieve data availability information for data product records\n;\n; EXPLANATION:\n;       Retrieve data availability information for data product records\n;       in the AuroraX platform. Optional parameters are used to filter\n;       unwanted data sources out.\n;\n; CALLING SEQUENCE:\n;       aurorax_data_products_availability(start_date, end_date)\n;\n; PARAMETERS:\n;       start_date        start year to use, string (YYYY, YYYYMM, or YYYYMMDD)\n;       end_date          end year to use, string (YYYY, YYYYMM, or YYYYMMDD)\n;       program           program to filter on, string, optional\n;       platform          platform to filter on, string, optional\n;       instrument_type   instrument type to filter on, string, optional\n;       source_type       source type to filter on (valid values are: leo, heo,\n;                         lunar, ground, event_list), string, optional\n;\n; OUTPUT\n;       retrieved data availability information\n;\n; OUTPUT TYPE:\n;       a list of structs\n;\n; EXAMPLES:\n;       data = aurorax_data_products_availability('20200101','20200105',program='auroramax')\n;       data = aurorax_data_products_availability('2020-01-01','2020-03-15',program='trex',platform='gillam')\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/search/availability/ephemeris/","title":"aurorax_ephemeris_availability","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_EPHEMERIS_AVAILABILITY\n;\n; PURPOSE:\n;       Retrieve data availability information for ephemeris records\n;\n; EXPLANATION:\n;       Retrieve data availability information for ephemeris records\n;       in the AuroraX platform. Optional parameters are used to filter\n;       unwanted data sources out.\n;\n; CALLING SEQUENCE:\n;       aurorax_ephemeris_availability(start_date, end_date)\n;\n; PARAMETERS:\n;       start_date        start year to use, string (YYYY, YYYYMM, or YYYYMMDD)\n;       end_date          end year to use, string (YYYY, YYYYMM, or YYYYMMDD)\n;       program           program to filter on, string, optional\n;       platform          platform to filter on, string, optional\n;       instrument_type   instrument type to filter on, string, optional\n;       source_type       source type to filter on (valid values are: leo, heo,\n;                         lunar, ground, event_list), string, optional\n;\n; OUTPUT\n;       retrieved data availability information\n;\n; OUTPUT TYPE:\n;       a list of structs\n;\n; EXAMPLES:\n;       data = aurorax_ephemeris_availability('20200101','20200105',program='swarm')\n;       data = aurorax_ephemeris_availability('2020-01-01','2020-03-15',program='themis',platform='themisc')\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/search/conjunctions/create_advanced_distances/","title":"aurorax_create_advanced_distances_hash","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_CREATE_ADVANCED_DISTANCES_HASH\n;\n; PURPOSE:\n;       Create advanced distances pairing for a conjunction search\n;\n; EXPLANATION:\n;       The AuroraX conjunction search requires distance pairings for every\n;       possibility of criteria blocks. This function will generate all\n;       possibilities for you.\n;\n; CALLING SEQUENCE:\n;       aurorax_create_advanced_distances_hash(distance)\n;\n; PARAMETERS:\n;       distance           default distance for each pairing, integer\n;       ground_count       number of ground criteria blocks, integer, optional\n;       space_count        number of space criteria blocks, integer, optional\n;       events_count       number of events criteria blocks, integer, optional\n;\n; OUTPUT:\n;       the advanced distances\n;\n; OUTPUT TYPE:\n;       a hash, with the default value for each value being the 'distance' variable supplied\n;\n; EXAMPLES:\n;       distances = aurorax_create_advanced_distances_hash(500, ground_count=1, space_count=2)\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/search/conjunctions/create_criteria_block/","title":"aurorax_create_criteria_block","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_CREATE_CRITERIA_BLOCK\n;\n; PURPOSE:\n;       Create conjunction search criteria block\n;\n; EXPLANATION:\n;       The AuroraX conjunction search takes in sets of ground, space,\n;       and/or events \"criteria blocks\". These are objects describing\n;       the items to search for conjunction between. This function is\n;       meant to be an easy way to create a criteria block object\n;       for use in a subsequent conjunction search.\n;\n; CALLING SEQUENCE:\n;       aurorax_create_criteria_block\n;\n; PARAMETERS:\n;       programs           programs for this criteria block, list(string), optional\n;       platforms          platforms for this criteria block, list(string), optional\n;       instrument_types   instrument types for this criteria block, list(string), optional\n;       hemisphere         hemisphere values for this criteria block, list(string),\n;                          optional (valid values are 'northern' and/or 'southern')\n;       metadata_filters   metadata filters to filter for, hash, optional\n;\n; KEYWORDS:\n;       /GROUND            create a \"ground\" criteria block\n;       /SPACE             create a \"space\" criteria block\n;       /EVENTS            create a \"events\" criteria block\n;\n; OUTPUT:\n;       the criteria block\n;\n; OUTPUT TYPE:\n;       a struct\n;\n; EXAMPLES:\n;       expression = aurorax_create_metadata_filter_expression('calgary_apa_ml_v1',list('classified as APA'),/OPERATOR_IN)\n;       expression = aurorax_create_metadata_filter_expression('calgary_apa_ml_v1_confidence',95,/OPERATOR_GE)\n;       expression = aurorax_create_metadata_filter_expression('tii_on','true',/OPERATOR_IN)\n;       expression = aurorax_create_metadata_filter_expression('tii_quality_vixh','0,2',/OPERATOR_BETWEEN)\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/search/conjunctions/open_in_aurorax/","title":"aurorax_open_conjunctions_in_aurorax","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_OPEN_CONJUNCTIONS_IN_AURORAX\n;\n; PURPOSE:\n;       Show conjunction search results in AuroraX website\n;\n;\n; EXPLANATION:\n;       Realize a browser window showing conjunction search results\n;       in the AuroraX conjunction search website\n;\n; CALLING SEQUENCE:\n;       aurorax_open_conjunctions_in_aurorax,request_id\n;\n; PARAMETERS:\n;       request_id       the request ID for the conjunction search\n;       xsize            specify the width of the browser window rendered, optional,\n;                        default is 95% of native screen width\n;       ysize            specify the height of the browser window rendered, optional,\n;                        default is 90% of native screen height\n;\n; KEYWORDS:\n;       /CLIPBOARD       copy the AuroraX URL to the clipboard\n;       /PRINT_URL       instead of rendering a browser window, print out the AuroraX URL\n;       /EXPERT          open in the \"expert mode\" AuroraX conjunction search webpage\n;\n; EXAMPLES:\n;       ...\n;       ...\n;       response = aurorax_conjunction_search(start_dt,end_dt,distance,ground=ground,space=space)\n;       aurorax_open_conjunctions_in_aurorax,response.request_id\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/search/conjunctions/open_in_swarmaurora/","title":"aurorax_open_conjunctions_in_swarmaurora","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_OPEN_CONJUNCTIONS_IN_SWARMAURORA\n;\n; PURPOSE:\n;       Show conjunction search results in Swarm-Aurora\n;\n; EXPLANATION:\n;       Realize a browser window showing conjunction search results\n;       in Swarm-Aurora\n;\n; CALLING SEQUENCE:\n;       aurorax_open_conjunctions_in_swarmaurora,request_id\n;\n; PARAMETERS:\n;       request_id       the request ID for the conjunction search\n;       xsize            specify the width of the browser window rendered, optional,\n;                        default is 95% of native screen width\n;       ysize            specify the height of the browser window rendered, optional,\n;                        default is 90% of native screen height\n;\n; KEYWORDS:\n;       /CLIPBOARD       copy the Swarm-Aurora URL to the clipboard\n;       /PRINT_URL       instead of rendering a browser window, print out the Swarm-Aurora URL\n;\n; EXAMPLES:\n;       ...\n;       ...\n;       response = aurorax_conjunction_search(start_dt,end_dt,distance,ground=ground,space=space)\n;       aurorax_open_conjunctions_in_swarmaurora,response.request_id\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/search/conjunctions/save_swarmaurora_import_file/","title":"aurorax_save_swarmaurora_custom_import_file","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_SAVE_SWARMAURORA_CUSTOM_IMPORT_FILE\n;\n; PURPOSE:\n;       Download a Swarm-Aurora custom import file\n;\n; EXPLANATION:\n;       Retrieve a Swarm-Aurora custom import file for a conjunction\n;       search request, and save it to a JSON file\n;\n; CALLING SEQUENCE:\n;       aurorax_get_swarmaurora_custom_import_file,request_id\n;\n; PARAMETERS:\n;       request_id       the request ID for the conjunction search\n;       filename         the filename to save the custom import file to, optional,\n;                        default is a filename made up from the current working directory\n;                        of the IDL instance\n;\n; EXAMPLES:\n;       ...\n;       ...\n;       response = aurorax_conjunction_search(start_dt,end_dt,distance,ground=ground,space=space)\n;       aurorax_save_swarmaurora_custom_import_file,response.request_id\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/search/conjunctions/search/","title":"aurorax_conjunction_search","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_CONJUNCTION_SEARCH\n;\n; PURPOSE:\n;       Search AuroraX for conjunctions\n;\n; EXPLANATION:\n;       Search the AuroraX platform for conjunctions using the supplied\n;       filter criteria\n;\n; CALLING SEQUENCE:\n;       aurorax_conjunction_search(start_dt, end_dt, distance)\n;\n; PARAMETERS:\n;       start_dt           start datetime, string (different formats allowed, see below)\n;       end_dt             end datetime, string (different formats allowed, see below)\n;       distance           max distance between criteria blocks, integer or hash (different\n;                          formats allowed, see below)\n;       ground             ground criteria blocks, list, optional\n;       space              space criteria blocks, list, optional\n;       events             events criteria blocks, list, optional\n;       poll_interval      sleep time between polling events while waiting for data, integer,\n;                          optional (in seconds; default is 1s)\n;\n;       The 'start_dt' and 'end_dt' parameters are to be timestamps in a variety of formats. The\n;       following are examples of what is allowed:\n;\n;       The following are all interpreted as '2020-01-01T00:00:00':\n;         start_dt = '2020'\n;         start_dt = '202001'\n;         start_dt = '20200101'\n;         start_dt = '2020010100'\n;         start_dt = '202001010000'\n;         start_dt = '2020-01-01'\n;         start_dt = '2020/01/01T00:00'\n;         start_dt = '2020-01-01 00:00'\n;\n;       The following are all interpreted as '2020-12-31T23:59:59':\n;         end_dt = '2020'\n;         end_dt = '202012'\n;         end_dt = '20201231'\n;         end_dt = '2020123123'\n;         end_dt = '202012312359'\n;         end_dt = '2020-12-31'\n;         end_dt = '2020/12/31T23'\n;         end_dt = '2020-12-31 23'\n;\n; KEYWORDS:\n;       /NBTRACE         search for nbtrace conjunctions\n;       /SBTRACE         search for sbtrace conjunctions\n;       /GEOGRAPHIC      search for geographic conjunctions\n;       /QUIET           quiet output when searching, no print messages will be shown\n;       /DRYRUN          run in dry-run mode, which will exit before sending the search\n;                        request to AuroraX. The query will be printed though, so that\n;                        users can check to make sure it would have sent the request\n;                        that they wanted it to send.\n;\n; OUTPUT:\n;       the found conjunctions\n;\n; OUTPUT TYPE:\n;       a list of structs\n;\n; EXAMPLES:\n;       ; simple example\n;       distance = 500\n;       start_dt = '2019-01-01T00:00:00'\n;       end_dt = '2019-01-03T23:59:59'\n;       ground1 = aurorax_create_criteria_block(programs=['themis-asi'],platforms=['fort smith', 'gillam'],/GROUND)\n;       ground = list(ground1)\n;       space1 = aurorax_create_criteria_block(programs=['swarm'],hemisphere=['northern'],/SPACE)\n;       space = list(space1)\n;       data = aurorax_conjunction_search(start_dt,end_dt,distance,ground=ground,space=space,/nbtrace)\n;\n;       ; example with metadata\n;       distance = 500\n;       start_dt = '2008-01-01T00:00:00'\n;       end_dt = '2008-01-31T23:59:59'\n;       expression1 = aurorax_create_metadata_filter_expression('calgary_apa_ml_v1', list('classified as APA'),/OPERATOR_IN)\n;       expression2 = aurorax_create_metadata_filter_expression('calgary_apa_ml_v1_confidence', 95,/OPERATOR_GE)\n;       expressions = list(expression1, expression2)\n;       ground_metadata_filters = aurorax_create_metadata_filter(expressions,/OPERATOR_AND)\n;       ground1 = aurorax_create_criteria_block(programs=['themis-asi'],metadata_filters=ground_metadata_filters,/GROUND)\n;       ground = list(ground1)\n;       space1 = aurorax_create_criteria_block(programs=['themis'],hemisphere=['northern'],/SPACE)\n;       space = list(space1)\n;       data = aurorax_conjunction_search(start_dt,end_dt,distance,ground=ground,space=space,/nbtrace)\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/search/data_products/search/","title":"aurorax_data_product_search","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_DATA_PRODUCT_SEARCH\n;\n; PURPOSE:\n;       Retrieve AuroraX data product records\n;\n; EXPLANATION:\n;       Retrieve data product records from the AuroraX platform, with optional\n;       parameters used to filter for specific matching data.\n;\n; CALLING SEQUENCE:\n;       aurorax_data_product_search(start_dt, end_dt)\n;\n; PARAMETERS:\n;       start_dt             start datetime, string (different formats allowed, see below)\n;       end_dt               end datetime, string (different formats allowed, see below)\n;       programs             programs to filter for, list(string), optional\n;       platforms            platforms to filter for, list(string), optional\n;       instrument_types     instrument types to filter for, list(string), optional\n;       data_product_types   data product types to filter for, list(string), optional\n;       metadata_filters     metadata filters to filter for, hash, optional\n;       poll_interval        sleep time between polling events while waiting for data, integer,\n;                            optional (in seconds; default is 1s)\n;\n;       The 'start_dt' and 'end_dt' parameters are to be timestamps in a variety of formats. The\n;       following are examples of what is allowed:\n;\n;       The following are all interpreted as '2020-01-01T00:00:00':\n;         start_dt = '2020'\n;         start_dt = '202001'\n;         start_dt = '20200101'\n;         start_dt = '2020010100'\n;         start_dt = '202001010000'\n;         start_dt = '2020-01-01'\n;         start_dt = '2020/01/01T00:00'\n;         start_dt = '2020-01-01 00:00'\n;\n;       The following are all interpreted as '2020-12-31T23:59:59':\n;         end_dt = '2020'\n;         end_dt = '202012'\n;         end_dt = '20201231'\n;         end_dt = '2020123123'\n;         end_dt = '202012312359'\n;         end_dt = '2020-12-31'\n;         end_dt = '2020/12/31T23'\n;         end_dt = '2020-12-31 23'\n;\n; KEYWORDS:\n;       /QUIET           quiet output when searching, no print messages will be shown\n;       /DRYRUN          run in dry-run mode, which will exit before sending the search\n;                        request to AuroraX. The query will be printed though, so that\n;                        users can check to make sure it would have sent the request\n;                        that they wanted it to send.\n;\n; OUTPUT:\n;       the found data product records\n;\n; OUTPUT TYPE:\n;       a list of structs\n;\n; EXAMPLES:\n;       ; simple example\n;       data = aurorax_data_product_search('2020-01-01T00:00','2020-01-01T23:59',programs=['trex'],platforms=['gillam'],instrument_types=['RGB ASI'])\n;\n;       ; example with metadata\n;       expression = aurorax_create_metadata_filter_expression('keogram_type', list('daily'),/OPERATOR_IN)\n;       expressions = list(expression)\n;       metadata_filters = aurorax_create_metadata_filter(expressions,/OPERATOR_AND)\n;       data = aurorax_data_product_search('2020-01-01T00:00','2020-01-01T23:59',programs=['trex'],metadata_filters=metadata_filters)\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/search/ephemeris/search/","title":"aurorax_ephemeris_search","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_EPHEMERIS_SEARCH\n;\n; PURPOSE:\n;       Retrieve AuroraX ephemeris records\n;\n; EXPLANATION:\n;       Retrieve ephemeris records from the AuroraX platform, with optional\n;       parameters used to filter for specific matching data.\n;\n; CALLING SEQUENCE:\n;       aurorax_ephemeris_search(start_dt, end_dt)\n;\n; PARAMETERS:\n;       start_dt           start datetime, string (different formats allowed, see below)\n;       end_dt             end datetime, string (different formats allowed, see below)\n;       programs           programs to filter for, list(string), optional\n;       platforms          platforms to filter for, list(string), optional\n;       instrument_types   instrument types to filter for, list(string), optional\n;       metadata_filters   metadata filters to filter for, hash, optional\n;       poll_interval      sleep time between polling events while waiting for data, integer,\n;                          optional (in seconds; default is 1s)\n;\n;       The 'start_dt' and 'end_dt' parameters are to be timestamps in a variety of formats. The\n;       following are examples of what is allowed:\n;\n;       The following are all interpreted as '2020-01-01T00:00:00':\n;         start_dt = '2020'\n;         start_dt = '202001'\n;         start_dt = '20200101'\n;         start_dt = '2020010100'\n;         start_dt = '202001010000'\n;         start_dt = '2020-01-01'\n;         start_dt = '2020/01/01T00:00'\n;         start_dt = '2020-01-01 00:00'\n;\n;       The following are all interpreted as '2020-12-31T23:59:59':\n;         end_dt = '2020'\n;         end_dt = '202012'\n;         end_dt = '20201231'\n;         end_dt = '2020123123'\n;         end_dt = '202012312359'\n;         end_dt = '2020-12-31'\n;         end_dt = '2020/12/31T23'\n;         end_dt = '2020-12-31 23'\n;\n; KEYWORDS:\n;       /QUIET           quiet output when searching, no print messages will be shown\n;       /DRYRUN          run in dry-run mode, which will exit before sending the search\n;                        request to AuroraX. The query will be printed though, so that\n;                        users can check to make sure it would have sent the request\n;                        that they wanted it to send.\n;\n; OUTPUT:\n;       the found ephemeris records\n;\n; OUTPUT TYPE:\n;       a list of structs\n;\n; EXAMPLES:\n;       ; simple example\n;       data = aurorax_ephemeris_search('2020-01-01T00:00','2020-01-01T23:59',programs=['swarm'],platforms=['swarma'],instrument_types=['footprint'])\n;\n;       ; example with metadata\n;       expression = aurorax_create_metadata_filter_expression('nbtrace_region', list('north auroral oval', 'north mid-latitude'),/OPERATOR_IN)\n;       expressions = list(expression)\n;       metadata_filters = aurorax_create_metadata_filter(expressions,/OPERATOR_AND)\n;       data = aurorax_ephemeris_search('2020-01-01T00:00','2020-01-01T23:59',programs=['swarm'],metadata_filters=metadata_filters)\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/search/metadata_filters/create_expression/","title":"aurorax_create_metadata_filter_expression","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_CREATE_METADATA_FILTER_EXPRESSION\n;\n; PURPOSE:\n;       Create metadata filter expression for searches\n;\n; EXPLANATION:\n;       The AuroraX ephemeris, data products, and conjunction searches can take\n;       metadata filters to help refine your search. This function provides\n;       an easy way to create metadata filter expressions which will be added\n;       to a metadata_filter object later on.\n;\n; CALLING SEQUENCE:\n;       aurorax_create_metadata_filter_expression(key,values)\n;\n; PARAMETERS:\n;       key           the metadata field key, string\n;       values        the values to filter on, string or list\n;\n; KEYWORDS:\n;       /OPERATOR_EQ          operator for this expression will be '='\n;       /OPERATOR_NE          operator for this expression will be '!='\n;       /OPERATOR_GT          operator for this expression will be '&gt;'\n;       /OPERATOR_LT          operator for this expression will be '&lt;'\n;       /OPERATOR_GE          operator for this expression will be '&gt;='\n;       /OPERATOR_LE          operator for this expression will be '&lt;='\n;       /OPERATOR_BETWEEN     operator for this expression will be 'between'\n;       /OPERATOR_IN          operator for this expression will be 'in'\n;\n; OUTPUT:\n;       a metadata filter expression\n;\n; OUTPUT TYPE:\n;       a hash\n;\n; EXAMPLES:\n;       expression = aurorax_create_metadata_filter_expression('calgary_apa_ml_v1',list('classified as APA'),/OPERATOR_IN)\n;       expression = aurorax_create_metadata_filter_expression('calgary_apa_ml_v1_confidence',95,/OPERATOR_GE)\n;       expression = aurorax_create_metadata_filter_expression('tii_on','true',/OPERATOR_IN)\n;       expression = aurorax_create_metadata_filter_expression('tii_quality_vixh','0,2',/OPERATOR_BETWEEN)\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/search/metadata_filters/create_metadata_filter/","title":"aurorax_create_metadata_filter","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_CREATE_METADATA_FILTER\n;\n; PURPOSE:\n;       Create metadata filter object for searches\n;\n; EXPLANATION:\n;       The AuroraX ephemeris, data products, and conjunction searches can take\n;       metadata filters to help refine your search. This function provides\n;       an easy way to create a metadata filter object using a list of expressions.\n;\n; CALLING SEQUENCE:\n;       aurorax_create_metadata_filter(expressions)\n;\n; PARAMETERS:\n;       expressions       the expressions to use for this metadata filter, list (use\n;                         aurorax_create_metadata_filter_expressions() function to\n;                         create the expression(s))\n;\n; OUTPUT:\n;       the metadata filter\n;\n; OUTPUT TYPE:\n;       a hash\n;\n; EXAMPLES:\n;       expression1 = aurorax_create_metadata_filter_expression('calgary_apa_ml_v1', list('classified as APA'),/OPERATOR_IN)\n;       expression2 = aurorax_create_metadata_filter_expression('calgary_apa_ml_v1_confidence', 95,/OPERATOR_GE)\n;       expressions = list(expression1, expression2)\n;       metadata_filters = aurorax_create_metadata_filter(expressions,/OPERATOR_AND)\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/search/sources/list/","title":"aurorax_list_sources","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_LIST_SOURCES\n;\n; PURPOSE:\n;       Retrieve AuroraX Search Engine data sources\n;\n; EXPLANATION:\n;       Retrieve a list of data sources available in the AuroraX Search\n;       Engine, with optional parameters used to filter for certain data\n;       sources.\n;\n; CALLING SEQUENCE:\n;       aurorax_list_sources()\n;\n; PARAMETERS:\n;       program           program to filter on, string, optional\n;       platform          platform to filter on, string, optional\n;       instrument_type   instrument type to filter on, string, optional\n;       source_type       source type to filter on (valid values are: leo, heo,\n;                         lunar, ground, event_list), string, optional\n;\n; KEYWORDS:\n;       /FORMAT_FULL_RECORD       data sources returned have all available information\n;                                 about them\n;       /FORMAT_IDENTIFIER_ONLY   data sources returned have minimal information about\n;                                 them, just the identifier\n;       /INCLUDE_STATS            include stats information\n;\n; OUTPUT:\n;       the found data sources\n;\n; OUTPUT TYPE:\n;       a list of structs\n;\n; EXAMPLES:\n;       data = aurorax_list_sources()\n;       data = aurorax_list_sources(program='swarm',/FORMAT_FULL_RECORD)\n;       data = aurorax_list_sources(platform='gillam')\n;       data = aurorax_list_sources(program='trex', platform='fort smith')\n;       data = aurorax_list_sources(program='trex', /INCLUDE_STATS)\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/tools/aurorax_bounding_box_extract_metric/","title":"aurorax_bounding_box_extract_metric","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_BOUNDING_BOX_EXTRACT_METRIC\n;\n; PURPOSE:\n;       Extract a luminosity related metric from a portion of an image.\n;\n; EXPLANATION:\n;       Extract a metric, related to luminosity, from pixel data within\n;       some bounded region within a single or set of ASI CCD images,\n;       defined by CCD, lat/lon, elevation, or azimuth boundaries.\n;\n; CALLING SEQUENCE:\n;       aurorax_bounding_box_extract_metric(images, mode, xy_bounds)\n;\n; PARAMETERS:\n;       images          array of images to extract metric from\n;       mode            string giving the input coordinate type (\"geo\", \"mag\", \"ccd\", \"azim\", \"elev\")\n;       xy_bounds       a two or four element array giving the bounds of the region of interest,\n;                       for the desired mode ([lon0,lon1,lat0,lat1], [min_elev,max_elev], ... etc.)\n;       metric          the metric to compute, accepted is \"median\" (default), \"mean\", or \"sum\"\n;       time_stamp      the timestamp to use for magnetic coordinate conversions, optional\n;       skymap          the skymap to use for georeferencing, optional\n;       altitude_km     the altitude of the image data for georeferencing, optional\n;       n_channels      manually specify the image data channels, otherwise its estimated based on shape, optional\n;\n; KEYWORDS:\n;       /SHOW_PREVIEW   plot a preview of the bounded area on top of the first image frame\n;\n; OUTPUT\n;       extracted metric for all frames provided\n;\n; OUTPUT TYPE:\n;       array\n;\n; EXAMPLES:\n;       luminosity = aurorax_bounding_box_extract_metric(images, \"geo\", [-94, -95, 55, 55.5], skymap=skymap, altitude_km=110)\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/tools/aurorax_calibrate_rego/","title":"aurorax_calibrate_rego","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_CALIBRATE_REGO\n;\n; PURPOSE:\n;       Calibrate one or more REGO images.\n;\n; EXPLANATION:\n;       Apply a number of calibrations, such as dark frame subtraction,\n;       flatfield calibration, and calibration to Rayleighs, one can\n;       apply only certain calibration steps if desired.\n;\n; CALLING SEQUENCE:\n;       aurorax_calibrate_rego(images, cal_flatfield, cal_rayleighs)\n;\n; PARAMETERS:\n;       images                  array of images to calibrate\n;       cal_flatfield           the flatfield calibration to use (if desired), usually a result of reading a calibration file, optional\n;       cal_rayleighs           the rayleighs calibration to use (if desired), usually a result of reading a calibration file, optional\n;       exposure_length_sec     the exposure length for the image data being calibrated, optional (defaults to 3.0)\n;\n; KEYWORDS:\n;       /NO_DARK_SUBTRACT       omits the dark subtraction step of the calibration process\n;\n; OUTPUT\n;       calibrated image data\n;\n; OUTPUT TYPE:\n;       array\n;\n; EXAMPLES:\n;       rayleighs_images = aurorax_calibrate_rego(images, cal_flatfield=flatfield_cal, cal_rayleighs=rayleighs_cal)\n;       bg_subtracted_images = aurorax_calibrate_rego(images)\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/tools/aurorax_calibrate_trex_nir/","title":"aurorax_calibrate_trex_nir","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_CALIBRATE_TREX_NIR\n;\n; PURPOSE:\n;       Calibrate one or more TREx NIR images.\n;\n; EXPLANATION:\n;       Apply a number of calibrations, such as dark frame subtraction,\n;       flatfield calibration, and calibration to Rayleighs, one can\n;       apply only certain calibration steps if desired.\n;\n; CALLING SEQUENCE:\n;       aurorax_calibrate_trex_nir(images, cal_flatfield, cal_rayleighs)\n;\n; PARAMETERS:\n;       images                  array of images to calibrate\n;       cal_flatfield           the flatfield calibration to use (if desired), usually a result of reading a calibration file, optional\n;       cal_rayleighs           the rayleighs calibration to use (if desired), usually a result of reading a calibration file, optional\n;       exposure_length_sec     the exposure length for the image data being calibrated, optional (defaults to 5.0)\n;\n; KEYWORDS:\n;       /NO_DARK_SUBTRACT       omits the dark subtraction step of the calibration process\n;\n; OUTPUT\n;       calibrated image data\n;\n; OUTPUT TYPE:\n;       array\n;\n; EXAMPLES:\n;       rayleighs_images = aurorax_calibrate_trex_nir(images, cal_flatfield=flatfield_cal, cal_rayleighs=rayleighs_cal)\n;       bg_subtracted_images = aurorax_calibrate_trex_nir(images)\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/tools/aurorax_get_decomposed_color/","title":"aurorax_get_decomposed_color","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_GET_DECOMPOSED_COLOR\n;\n; PURPOSE:\n;       Convert RGB triple to decomposed long integer format.\n;\n; EXPLANATION:\n;       This function is useful for plotting in decomposed color mode.\n;       It converts an RGB triple to a long integer that can be used\n;       to plot the corresponding color in decomposed color mode.\n;\n; CALLING SEQUENCE:\n;       aurorax_get_decomposed_color([r,g,b])\n;\n; PARAMETERS:\n;       rgb_triple        a three element array specifying the RGB color to convert\n;\n; KEYWORDS:\n;\n; OUTPUT\n;       the decomposed long integer representation of the color\n;\n; OUTPUT TYPE:\n;       long\n;\n; EXAMPLES:\n;       long_cyan = aurorax_get_decomposed_color([0,255,255])\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/tools/aurorax_keogram_add_axis/","title":"aurorax_keogram_add_axis","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_KEOGRAM_ADD_AXIS\n;\n; PURPOSE:\n;       Add a georeferenced axis to a keogram structure.\n;\n; EXPLANATION:\n;       Add one or more desired physical axes to a keogram structure, which is\n;       usually obtained via aurorax_keogram_create. Options are elevation, and\n;       geographic/magnetic lats (lons for ewograms).\n;\n; CALLING SEQUENCE:\n;       aurorax_keogram_add_axis(keogram_struct, skymap, /axis_type)\n;\n; PARAMETERS:\n;       keogram_struct      keogram structure - usually the return value of aurorax_keogram_create()\n;       skymap              the skymap to use for georeferencing\n;       altitude_km         altitude, in kilometers, of the keogram data, optional\n;\n; KEYWORDS:\n;       /GEO        adds an axis of geographic coordinates\n;       /GEO        adds an axis of geomagnetic coordinates\n;       /GEO        adds an axis of elevation angles\n;\n; OUTPUT\n;       keogram structure containing new axes\n;\n; OUTPUT TYPE:\n;       struct\n;\n; EXAMPLES:\n;       keo = aurorax_keogram_add_axis(keo, skymap, /geo, /elev, altitude_km=110)\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/tools/aurorax_keogram_create/","title":"aurorax_keogram_create","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_KEOGRAM_CREATE\n;\n; PURPOSE:\n;       Create a keogram object.\n;\n; EXPLANATION:\n;       Create a keogram structure from an array of image data.\n;\n; CALLING SEQUENCE:\n;       aurorax_keogram_create(img, time_stamp)\n;\n; PARAMETERS:\n;       images          array of images to extract metric from\n;       time_stamp      array of timestamps corresponding to each frame in images\n;       axis            the axis index (1 or 0) to slice the keogram from - defualt is 1 (N-S slice)\n;\n; KEYWORDS:\n;\n; OUTPUT\n;       keogram object structure containing data and axes\n;\n; OUTPUT TYPE:\n;       struct\n;\n; EXAMPLES:\n;       keogram = aurorax_keogram_create(img, time_stamp)\n;       ewogram = aurorax_keogram_create(img, time_stamp, axis=1)\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/tools/aurorax_keogram_create_custom/","title":"aurorax_keogram_create_custom","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_KEOGRAM_CREATE_CUSTOM\n;\n; PURPOSE:\n;       Create a keogram from a custom slice of image data.\n;\n; EXPLANATION:\n;       Create a keogram by slicing image data along a custom contour\n;       defined by lats/lons or CCD coordintes.\n;\n; CALLING SEQUENCE:\n;       aurorax_keogram_create_custom(images, time_stamp, \"ccd\", x_locs, y_locs)\n;\n; PARAMETERS:\n;       images                array of images to extract metric from\n;       time_stamp            array of timestamps corresponding to each image frame\n;       coordinate_system     a string giving the coordinate system (\"ccd\", \"geo\", \"mag\")\n;       x_locs                the x locations, in desired coordinate system, to slice keogram along\n;       y_locs                the y locations, in desired coordinate system, to slice keogram along\n;       width                 the width of the keogram slice, in pixel units, optional (defaults to 2)\n;       skymap                the skymap to use for georeferencing, optional\n;       altitude_km           the altitude of the image data for georeferencing, optional\n;       metric                the metric to use to compute each keogram pixel \"median\" (default), \"mean\", or \"sum\", optional\n;\n; KEYWORDS:\n;       /SHOW_PREVIEW         plot a preview of the keogram slice on top of the first image frame\n;\n; OUTPUT\n;       custom keogram structure containing keogram data and temporal axis\n;\n; OUTPUT TYPE:\n;       struct\n;\n; EXAMPLES:\n;       ccd_keo = aurorax_keogram_create_custom(img, time_stamp, \"ccd\", x_arr, y_arr, width=5, metric=\"sum\", /show_preview)\n;       geo_keo = aurorax_keogram_create_custom(img, time_stamp, \"geo\", longitudes, latitudes, skymap=skymap, altitude_km=113)\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/tools/aurorax_keogram_plot/","title":"aurorax_keogram_plot","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_KEOGRAM_PLOT\n;\n; PURPOSE:\n;       Plot a keogram object.\n;\n; EXPLANATION:\n;       Plot keogram data, adding axes stored in the keogram\n;       structure as desired, defaults to CCD axis.\n;\n; CALLING SEQUENCE:\n;       aurorax_keogram_plot, keogram_struct, /keyword_args\n;\n; PARAMETERS:\n;       keogram_struct      keogram object to plot, usually the return value of aurorax_keogram_create()\n;       title               string giving the plot title, optional\n;       dimensions          two-element array giving dimensions of the plotting window in device coordinates, optional\n;       location            two-element array giving location of the plotting window in device coordinates, optional\n;       x_tick_interval     interval between ticks on the x-axis, optional (default is 200)\n;       y_tick_interval     interval between ticks on the y-axis, optional (default is 50)\n;       aspect_ratio        float giving the aspect ratio to display keogram data\n;\n; KEYWORDS:\n;       /GEO                labels geographic coordinates on the y-axis (axis must exist in keogram structure)\n;       /MAG                labels geomagnetic coordinates on the y-axis (axis must exist in keogram structure)\n;       /ELEV               labels elevation angles on the y-axis (axis must exist in keogram structure)\n;\n; OUTPUT\n;\n; OUTPUT TYPE:\n;\n; EXAMPLES:\n;       aurorax_keogram_plot, keo, title=\"Geographic\", /geo, location=[0,0], dimensions=[1000,400]\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/tools/aurorax_montage_create/","title":"aurorax_montage_create","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_MONTAGE_CREATE\n;\n; PURPOSE:\n;       Create and display a montage.\n;\n; EXPLANATION:\n;       Create a montage from a set of images, and display\n;       it, accompanied by timestamps.\n;\n; CALLING SEQUENCE:\n;       aurorax_montage_create, images, time_stamp, n_cols, n_rows\n;\n; PARAMETERS:\n;       images                  array of images to create the montage for \n;       timestamps              timestamps corresponding to each frame of images\n;       n_cols                  integer specifying the number of columns in the montage\n;       n_rows                  integer specifying the number of rows in the montage\n;       colortable              integer specifying the IDL colortable to use, optional (default is 0)\n;       timestamps_fontsize     font size for the timestamp labals, optional\n;       frame_step              interval to add frames from images to the montage, optional (default is 1)\n;       dimensions              two-element array giving dimensions of the plotting window in device coordinates, optional\n;       location                two-element array giving location of the plotting window in device coordinates, optional\n;       timestamps_color        a string giving the color to overplot timestamps, optional (default is 'white')\n;       \n; KEYWORDS:\n;       /NO_TIMESTAMPS          disable default behaviour of plotting timestamps\n;       \n; OUTPUT\n;\n; OUTPUT TYPE:\n;\n; EXAMPLES:\n;       aurorax_montage_create, images, timestamps, 5, 5, colortable=7, timestamps_fontsize=16\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/tools/aurorax_mosaic_oplot/","title":"aurorax_mosaic_oplot","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_MOSAIC_OPLOT\n;\n; PURPOSE:\n;       Plot lines of constant lat/lon, and custom points on a mosaic.\n;\n; EXPLANATION:\n;       Plot either, or a combination of, lines of constant geographic or\n;       geomagnetic latitude and/or longitude. Can also be used to plot\n;       a single point in geographic or geomagnetic coordinates.\n;\n; CALLING SEQUENCE:\n;       aurorax_mosaic_oplot, constant_lats=lats, constant_lons=lons, point=[lon,lat]\n;\n; PARAMETERS:\n;       constant_lats     a scalar or array giving latitude(s) to add constant lines, optional\n;       constant_lots     a scalar or array giving longitude(s) to add constant lines, optional\n;       point             a two element array specifying the lon, lat to plot, optional\n;       color             long integer giving the color to plot in, optional (default is 0 i.e. black)\n;       thick             integer giving line thickness for any lines plotted, optional (default is 1)\n;       linestyle         integer giving IDL linestyle, optional (default is 0, i.e. solid)\n;       symbol            integer giving IDL symbol, optional (default is 0, i.e. none for lines and circle for point)\n;       symsize           integer giving IDL symbol size, optional (default is 1)\n;\n; KEYWORDS:\n;       /MAG              specify that coordinates are given in geomagnetic coordinates (default is geographic)\n;\n; OUTPUT\n;\n; OUTPUT TYPE:\n;\n; EXAMPLES:\n;       aurorax_mosaic_oplot, point=[245,61.2], color=aurorax_get_decomposed_color([0,0,255])\n;       aurorax_mosaic_oplot, constant_lats=[40,50,60], constant_lons=[220,240,260], linestyle=2, thick=3\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/tools/aurorax_mosaic_plot/","title":"aurorax_mosaic_plot","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_MOSAIC_PLOT\n;\n; PURPOSE:\n;       Create a mosaic\n;\n; EXPLANATION:\n;       Plot a mosaic onto a pre-defined map window, using *prepared*\n;       image data and skymaps.\n;\n; CALLING SEQUENCE:\n;       aurorax_mosaic_plot, prepped_data, prepped_skymap, image_idx, min_elevation=5\n\n;\n; PARAMETERS:\n;       prepped_data          single, or array of 'prepped_data' structures (the return of aurorax_mosaic_prep_data())\n;       prepped_skymaps       single, or array of 'prepped_data' structures (the return of aurorax_mosaic_prep_data())\n;       frame_idx             integer specifying the frame idx of image data that is to be plotted\n;       min_elevation         int/float, or array (same length as prepped_data) of ints/floats specifying the minimum\n;                             elevation in degrees to begin plotting data, optional (default is 5 deg)\n;       intensity_scales      a two element array, or hash of two element arrays (for scaling on a per-site basis),\n;                             giving the min/max scale bounds for data (default is [0,20000])\n;       colortable            an integer, or array of integers with the same length as prepped_data, specifying the\n;                             IDL colortable to plot data with, optional (default is 0, i.e. gray)\n;       elevation_increment   a parameter that affects the plotting algorithm - the default is 0.25 - increasing this\n;                             parameter can speed up plotting, and decreasing it can help make boundaries between sites\n;                             more distinct (if they appear to be getting blended)\n;\n; KEYWORDS:\n;\n; OUTPUT\n;\n; OUTPUT TYPE:\n;\n; EXAMPLES:\n;       aurorax_mosaic_plot, prepped_data, prepped_skymap, image_idx, min_elevation=7, intensity_scales=[500,10000], colortable=3\n;\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/tools/aurorax_mosaic_prep_images/","title":"aurorax_mosaic_prep_images","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_MOSAIC_PREP_IMAGES\n;\n; PURPOSE:\n;       Prepare image data to create a mosaic\n;\n; EXPLANATION:\n;       Takes image data and formats it in a way such that it\n;       can be fed into the aurorax_mosaic_plot routine\n;\n; CALLING SEQUENCE:\n;       aurorax_mosaic_prep_images(list(img_data1, image_data2))\n;\n; PARAMETERS:\n;       image_data        a list of image data objects, where each object is usually the return\n;                         value of aurorax_ucalgary_read(). Note that even if preparing a single\n;                         image data object, it must be enclosed in a list.\n;\n; KEYWORDS:\n;\n; OUTPUT\n;       a prepped_data structure\n;\n; OUTPUT TYPE:\n;       struct\n;\n; EXAMPLES:\n;       prepped_data = aurorax_prep_images(list(aurorax_ucalgary_read(d.dataset, d.filenames)))\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/tools/aurorax_mosaic_prep_skymap/","title":"aurorax_mosaic_prep_skymap","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_MOSAIC_PREP_SKYMAPS\n;\n; PURPOSE:\n;       Prepare skymaps to create a mosaic\n;\n; EXPLANATION:\n;       Takes skymap(s) and formats them in a way such that they\n;       can be fed into the aurorax_mosaic_plot routine\n;\n; CALLING SEQUENCE:\n;       aurorax_mosaic_prep_skymap(list(skymap1, skymap2))\n;\n; PARAMETERS:\n;       image_data        a list of skymap data objects, where each object is usually the return\n;                         value of aurorax_ucalgary_read(). Note that even if preparing a single\n;                         skymap object, it must be enclosed in a list.\n;       altitude_km       the altitude (in kilometers) at which the image data should be\n;                         prepared for mosaicking\n;\n; KEYWORDS:\n;\n; OUTPUT\n;       a prepped_skymap structure\n;\n; OUTPUT TYPE:\n;       struct\n;\n; EXAMPLES:\n;       prepped_skymap = aurorax_prep_skymaps(list(aurorax_ucalgary_read(d.dataset, d.filenames)))\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"code/idlaurorax_api_reference/tools/aurorax_movie/","title":"aurorax_movie","text":"<pre><code>;-------------------------------------------------------------\n;+\n; NAME:\n;       AURORAX_MOVIE\n;\n; PURPOSE:\n;       Create a movie.\n;\n; EXPLANATION:\n;       Given a list of filenames referencing images, create and\n;       save a movie.\n;\n; CALLING SEQUENCE:\n;       aurorax_movie, input_filenames, output_filename, fps\n;\n; PARAMETERS:\n;       input_filenames     an array of strings giving filenames of all images\n;       output_filenames    the filename location at which to save the image\n;       fps                 integer giving the frames per second to create movie at\n;\n; KEYWORDS:\n;\n; OUTPUT\n;\n; OUTPUT TYPE:\n;\n; EXAMPLES:\n;       aurorax_create_movive, file_search(\"path\\to\\images\\*.png\"), \"movie.mp4\", 30\n;+\n;-------------------------------------------------------------\n</code></pre>"},{"location":"getting_started/1_intro/","title":"Getting Started","text":"<p>There are many different aspects to AuroraX and upon visiting the website for the first time, it can quickly become overwhelming with how deep down the rabbit hole you can go. This set of \"Getting Started\" topics is here to help you get a better grasp of what AuroraX is all about, and how you can interact with the system.</p> <p>We'll first discuss what data makes up AuroraX, since all tools available revolve around it. We'll then discuss the primary tool AuroraX has to offer - searching for Conjunctions and exploring them visually. Lastly, we'll outline how to interact with AuroraX programmatically using various methods such as PyAuroraX (the Python library).</p>"},{"location":"getting_started/1_intro/#what-is-aurorax","title":"What is AuroraX?","text":"<p>AuroraX aims to be the world's first and foremost data platform for auroral science. The primary objective of AuroraX is to enable mining and exploration of existing and future auroral data, enabling key science and enhancing the benefits of the world's investment in auroral instrumentation. This is being accomplished with the development of key systems/standards for uniform metadata generation and search, image content analysis, interfaces to leading international tools, and a community involvement that includes more than 80% of the world's data providers.</p>"},{"location":"getting_started/1_intro/#brief-summary-of-what-aurorax-has-to-offer","title":"Brief summary of what AuroraX has to offer","text":"<p>The core components of AuroraX are its metadata database and API, with all webpages and supporting programmatic tools built on top of those. The primary tool that AuroraX offers is the Conjunction Search; allowing users to search through the vast metadata database looking for times when ground-based instrumentation and satellites were in conjunction, based on the inputted search parameters (ie. distance, combinations of data sources). Using metadata filters in your search query can further enhance the Conjunction Search by reducing results down to times when certain characteristics about the data were true. For example, times when THEMIS spacecraft were in the plasma sheet, or when a machine learning algorithm determined that a THEMIS ground-based ASI had Amorphous Pulsating Aurora (APA) in its field of view.</p> <p>Below are a list of the different components we have available as part of AuroraX:</p> Component Description Open Conjunction Search Search for conjunctions between ground-based auroral instrumentation and spacecrafts Keogramist Browse ground-based auroral imager data using keograms and movies Event Explorer Explore auroral data and spacecraft locations using an interactive globe Swarm-Aurora Explore auroral and spacecraft summary data using web-based interfaces AuroraX RESTful API Interact with AuroraX programmatically using an HTTPS-based RESTful API PyAuroraX Python library for using the AuroraX API programmatically AuroraX Data Availability View what data is presently in the AuroraX database"},{"location":"getting_started/1_intro/#next-step","title":"Next step","text":"<p>Now that you have a brief idea of what AuroraX is, let's have a look at what kind of data is in AuroraX.</p> <p>Next step\u00a0\u00a0</p>"},{"location":"getting_started/2_aurorax_data/","title":"A Brief Look at AuroraX Data","text":"<p>The AuroraX database consists of metadata about ground-based auroral instrumentation and spacecrafts. AuroraX doesn't contain any raw data, and any summary data products (ie. keograms and movies) are linked to via URL records in the database. Data in AuroraX is not owned by this project, but rather is an aggregated database of different types of metadata. This helps keep the database slim and optimized for the search engine (still &gt;1 billion records, but manageable).</p> <p>The metadata in the AuroraX database is derived from several ground-based ASI arrays, spacecrafts, and spacecrafts on-board instruments. We organize the metadata into two categories:</p> <ol> <li>ephemeris records which provide location and operational information for a given ground/space data source</li> <li>data product metadata describing keograms or other summary products (note: no images are stored in the database, only URLs which are used as unique identifiers)</li> </ol> <p>To view what ASI arrays and spacecrafts are currently in AuroraX, you can look at either the Data Availability webpage or further documentation we have available. </p> <p>We are working hard to add more and the mentioned lists will be updated as new metadata is integrated. If you're interested in getting metadata for your instrumentation into the system, please reach out to Eric Donovan and/or Darren Chaddock.</p>"},{"location":"getting_started/2_aurorax_data/#what-is-ephemeris-data","title":"What is ephemeris data?","text":"<p>Ephemeris data are 1-minute location records corresponding the times that a ground-based or space-based instrument was operating. One of the defining qualities of AuroraX is that data contained in the database consists of only times that instruments definitively collected data. This allows applications such as the Conjunction Search to return more useful query results; ones where theres definitely data that can be further evaluated by researchers.</p> <p>The following is an example of a single ground-based ephemeris record:</p> <pre><code>{\n  \"data_source\": {\n    \"identifier\": 46,\n    \"program\": \"themis-asi\",\n    \"platform\": \"gillam\",\n    \"instrument_type\": \"panchromatic ASI\",\n    \"source_type\": \"ground\",\n    \"display_name\": \"THEMIS-ASI GILL\"\n  },\n  \"epoch\": \"2020-01-01T00:00:00\",\n  \"location_geo\": {\n    \"lat\": 56.376723,\n    \"lon\": -94.643664\n  },\n  \"location_gsm\": {\n    \"lat\": null,\n    \"lon\": null\n  },\n  \"nbtrace\": {\n    \"lat\": 56.376723,\n    \"lon\": -94.643664\n  },\n  \"sbtrace\": {\n    \"lat\": -72.76907128936035,\n    \"lon\": -134.6681254931047\n  },\n  \"metadata\": {\n    \"clausen_ml_oath\": \"classified as discrete\",\n    \"calgary_apa_ml_v1\": \"classified as not APA\",\n    \"calgary_cloud_ml_v1\": \"classified as cloudy\",\n    \"calgary_apa_ml_v1_confidence\": 100,\n    \"calgary_cloud_ml_v1_confidence\": 99.94\n  }\n}\n</code></pre>"},{"location":"getting_started/2_aurorax_data/#what-are-data-products","title":"What are data products?","text":"<p>In addition to ephemeris metadata, AuroraX also contains metadata representing data products. There are several different types currently: keogram, montage, average, movie, summary_plot, data_availability, and gridded_data.</p> <p>Keograms are the most recognizable data product for ground-based ASIs; they are images that represent a period of time for imaging. More information about them can be found here.</p> THEMIS ASI hourly keogram from Gillam, MB, representing the hour 2008-09-04 UT07 <p>AuroraX contains data product records for an assortment of different projects and are used by web applications such as Keogramist. Below is an example of a daily keogram record in AuroraX:</p> <pre><code>{\n  \"start\": \"2020-01-01T00:00:00\",\n  \"end\": \"2020-01-01T23:59:00\",\n  \"data_source\": {\n    \"identifier\": 103,\n    \"program\": \"trex\",\n    \"platform\": \"gillam\",\n    \"instrument_type\": \"RGB ASI\",\n    \"source_type\": \"ground\",\n    \"display_name\": \"TREx RGB GILL\"\n  },\n  \"url\": \"https://data.phys.ucalgary.ca/sort_by_project/TREx/RGB/stream2/2020/01/01/gill_rgb-04/20200101__gill_rgb-04_full-keogram.jpg\",\n  \"data_product_type\": \"keogram\",\n  \"metadata\": {\n    \"keogram_type\": \"daily\",\n    \"imaging_end_time\": \"2020-01-01T13:16:00.000000\",\n    \"imaging_start_time\": \"2019-12-31T23:30:00.000000\"\n  }\n}\n</code></pre>"},{"location":"getting_started/2_aurorax_data/#learn-more-about-ephemeris-and-data-product-records","title":"Learn more about ephemeris and data product records","text":"<p>If you want to learn more about ephemeris and data product records, have a look at:</p> <ul> <li>Data Categories</li> <li>Instrument Descriptions: Ground-based</li> <li>Instrument Descriptions: Space-based</li> </ul>"},{"location":"getting_started/2_aurorax_data/#next-step","title":"Next step","text":"<p>Now that you know what kind of data is in the AuroraX database, let's investigate one of the most powerful features: conjunctions.</p> <p>Next step\u00a0\u00a0</p>"},{"location":"getting_started/3_what_are_conjunctions/","title":"What are Conjunctions?","text":"<p>The most simplistic definition of a conjunction is a time when two things are close to each other. For AuroraX, we further define it as when the magnetic footprints of two data sources are within a certain distance for a given minute.</p> <p>The set of data sources can be ground-based instrumentation, spacecrafts, or instruments operating onboard certain spacecrafts. We can easily illustrate this using a screenshot from the Swarm-Aurora Conjunction Browser, seen below. This is an example of a conjunction where the magnetic footprints of two spacecrafts - Swarm A and Swarm C in this case - passed through the field of view (FoV) of several ASIs in Fort Smith, NWT, Canada (which were collecting data at the time).</p> Example of a conjunction between two satellites and several ground-based ASIs (Swarm A, Swarm C, and Fort Smith in this case) <p>A differentiating factor of AuroraX \"conjunction\" searching from other systems available (ie. NASA's SSCWeb) is that the AuroraX database only contains data for when instruments collected data. This removes all the possibilities where the spacecraft could have passed through the FoV, but, the ASI didn't collect any data. The key benefit of this data architecture is that \"event discovery\" processes are much faster and significantly less labour-intensive.</p>"},{"location":"getting_started/3_what_are_conjunctions/#next-step","title":"Next step","text":"<p>Next, we'll explore performing conjunction searches using AuroraX.</p> <p>Next step\u00a0\u00a0</p>"},{"location":"getting_started/4_searching_conjunctions/","title":"Searching and Exploring Conjunctions","text":"<p>With AuroraX, you can use the search engine to perform various types of conjunction search queries. We'll have a look at some examples in the sections below.</p> <p>Note that the examples we go through will be using the Conjunction Search web interface.</p>"},{"location":"getting_started/4_searching_conjunctions/#your-first-conjunction-search","title":"Your first conjunction search","text":"<p>On the Conjunction Search web interface, we have several examples pre-configured to help you get a sense of what kinds of searches you can do. We'll start by going through Example 1 - a search to find conjunctions between two THEMIS ASI sites (Fort Smith and Gillam), and any Swarm spacecraft (Swarm A, B, or C). The timeframe is 3 days at the beginning of 2020, and the maximum distance is 500km. Other details are that we're restricting the search to only evaluate North B-Trace magnetic footprints, and times where Swarm spacecraft geographic location is in the northern hemisphere.</p> <p></p>"},{"location":"getting_started/4_searching_conjunctions/#exploring-results-with-swarm-aurora","title":"Exploring results with Swarm-Aurora","text":"<p>When this search finishes after a couple seconds, the search returned 11 results. You can then visualize the conjunctions using Swarm-Aurora via the \"Open\" buttons in the results table, or using the \"Open all results\" Swarm-Aurora button (in the set of tools buttons, above the search button).</p> <p></p>"},{"location":"getting_started/4_searching_conjunctions/#triple-conjunction-searches","title":"Triple-conjunction searches","text":"<p>Criteria blocks are what we call each \"Ground X\" or \"Space X\" row in the query table. These criteria blocks are logically AND'd together, where-as specifications within a criteria block field (ie. platforms) are logically OR'd.</p> <p>We can add another criteria block to our search to find \"triple\" conjunctions: conjunctions between three different data sources. Example 5 on the Conjunction Search webpage is one such search.</p> <p></p> <p>This search returns 24 results, with one being a conjunction between \"THEMIS-ASI NRSQ and THEMIS-A and Swarm A\". Note the AND statements and how there exists one data source from each criteria block.</p>"},{"location":"getting_started/4_searching_conjunctions/#using-metadata-filters","title":"Using metadata filters","text":"<p>Conjunction searches can be made more complex by leveraging metadata that is entered into ephemeris records in the database. This metadata is entirely flexible, and up to the maintainer of a data source's ephemeris records.</p> <p>Using the \"metadata filters\" section of a criteria block, we can add different values for our conjunction results to filter for. The metadata filters is the section where you can specify that results should include only conjunctions where a spacecraft was in the plasma sheet, or a machine learning model thinks that there's Amorphous Pulsating Aurora (APA) is in the FoV, or if an instrument onboard a spacecraft was operating (ie. FAI was collecting data on ePOP).</p> <p>Example 7 on the Conjunction Search webpage illustrates the use of the metadata filters and a machine learning model. Below is a screenshot of the metadata filters modal for this example. You can also change the logical expression that the search engine uses when evaluating multiple metadata filters. By default, it is a logical \"AND\", but can be adjusted in the modal.</p> <p></p> <p>To give a brief glimpse as to how the search engine evaluates these metadata filters, we can look at some ephemeris data. Below is a single 1-minute ephemeris record for the Swarm A spacecraft.</p> <pre><code>{\n  \"data_source\": {\n    \"identifier\": 3,\n    \"program\": \"swarm\",\n    \"platform\": \"swarma\",\n    \"instrument_type\": \"footprint\",\n    \"source_type\": \"leo\",\n    \"display_name\": \"Swarm A\"\n  },\n  \"epoch\": \"2020-01-01T00:00:00\",\n  \"location_geo\": {\n    \"lat\": 76.696365,\n    \"lon\": 103.03342\n  },\n  \"location_gsm\": {\n    \"lat\": 76.696365,\n    \"lon\": 103.03342\n  },\n  \"nbtrace\": {\n    \"lat\": 76.86447,\n    \"lon\": 103.15613\n  },\n  \"sbtrace\": {\n    \"lat\": -58.288635,\n    \"lon\": 114.33702\n  },\n  \"metadata\": {\n    \"state\": \"definitive\",\n    \"tii_on\": true,\n    \"nbtrace_region\": \"north mid-latitude\",\n    \"sbtrace_region\": \"south mid-latitude\",\n    \"radial_distance\": 6802.930422181797,\n    \"tii_quality_viy\": 0,\n    \"tii_quality_viz\": 0,\n    \"tii_quality_vixh\": 0,\n    \"tii_quality_vixv\": 1,\n    \"spacecraft_region\": \"nightside magnetosphere\",\n    \"radial_trace_region\": \"north mid-latitude\"\n  }\n}\n</code></pre> <p>The metadata section of ephemeris records is what is used when evaluating metadata filters. The specification for metadata filters - such as descriptions and allowed values - are outlined in a data source' ephemeris metadata schema.</p> Click to view ephemeris metadata schema for Swarm A <p>Below is the data source record for Swarm A which contains the <code>ephemeris_metadata_schema</code> specification.</p> <pre><code>{\n  \"identifier\": 3,\n  \"program\": \"swarm\",\n  \"platform\": \"swarma\",\n  \"instrument_type\": \"footprint\",\n  \"source_type\": \"leo\",\n  \"display_name\": \"Swarm A\",\n  \"metadata\": {},\n  \"owner\": \"dchaddoc@ucalgary.ca\",\n  \"maintainers\": [],\n  \"ephemeris_metadata_schema\": [\n    {\n      \"field_name\": \"nbtrace_region\",\n      \"description\": \"Region based on where the magnetic field line that passes through the spacecraft intersects the Earth's surface in the Earth's northern magnetic hemisphere\",\n      \"data_type\": \"string\",\n      \"allowed_values\": [\n        \"north polar cap\",\n        \"north cusp\",\n        \"north cleft\",\n        \"north auroral oval\",\n        \"north mid-latitude\",\n        \"low latitude\"\n      ],\n      \"searchable\": true\n    },\n    {\n      \"field_name\": \"sbtrace_region\",\n      \"description\": \"Region based on where the magnetic field line that passes through the spacecraft intersects the Earth's surface in the Earth's southern magnetic hemisphere\",\n      \"data_type\": \"string\",\n      \"allowed_values\": [\n        \"south polar cap\",\n        \"south cusp\",\n        \"south cleft\",\n        \"south auroral oval\",\n        \"south mid-latitude\",\n        \"low latitude\"\n      ],\n      \"searchable\": true\n    },\n    {\n      \"field_name\": \"radial_distance\",\n      \"description\": \"Distance spacecraft is from Earth in kilometers\",\n      \"data_type\": \"double\",\n      \"allowed_values\": [],\n      \"searchable\": true\n    },\n    {\n      \"field_name\": \"spacecraft_region\",\n      \"description\": \"Region based on the spacecraft's position within the magnetosphere\",\n      \"data_type\": \"string\",\n      \"allowed_values\": [\n        \"interplanetary medium\",\n        \"dayside magnetosheath\",\n        \"nightside magnetosheath\",\n        \"dayside magnetosphere\",\n        \"nightside magnetosphere\",\n        \"dayside plasmasphere\",\n        \"nightside plasmasphere\",\n        \"plasma sheet\",\n        \"tail lobe\",\n        \"low latitude boundary layer\",\n        \"high latitude boundary layer\"\n      ],\n      \"additional_description\": \"A spacecraft can occupy only one region of this region type at any given time. The North and South Mid-Latitude regions are defined as the two bands about the Earth that extend from +30 degrees latitude to the North Auroral Oval, and -30 degrees latitude to the South Auroral Oval. The Low-Latitude is the band that extends from +30 degrees latitude to -30 degrees latitude.\",\n      \"searchable\": true\n    },\n    {\n      \"field_name\": \"radial_trace_region\",\n      \"description\": \"Region based on the location on the Earth's surface where a straight line would intersect when connecting the spacecraft and the Earth's center\",\n      \"data_type\": \"string\",\n      \"allowed_values\": [\n        \"north polar cap\",\n        \"south polar cap\",\n        \"north cusp\",\n        \"south cusp\",\n        \"north cleft\",\n        \"south cleft\",\n        \"north auroral oval\",\n        \"south auroral oval\",\n        \"north mid-latitude\",\n        \"south mid-latitude\",\n        \"low latitude\"\n      ],\n      \"searchable\": true\n    },\n    {\n      \"field_name\": \"state\",\n      \"description\": \"Data is based on predictive or definitive information\",\n      \"data_type\": \"string\",\n      \"allowed_values\": [\n        \"predictive\",\n        \"definitive\"\n      ],\n      \"searchable\": true\n    },\n    {\n      \"field_name\": \"tii_on\",\n      \"description\": \"Indicates that the TII instrument was operational at this time.\",\n      \"data_type\": \"bool\",\n      \"allowed_values\": [\n        \"true\",\n        \"false\"\n      ],\n      \"additional_description\": \"Retrieved from TII 2Hz v0301 files. Further information and documentation found at http://efi.phys.ucalgary.ca/tii-cross-track-ion-flow-dataset-0301-released/\",\n      \"searchable\": true\n    },\n    {\n      \"field_name\": \"tii_quality_vixh\",\n      \"description\": \"Quality flag for Vixh data (along-track component from the horizontal sensor)\",\n      \"data_type\": \"int\",\n      \"allowed_values\": [],\n      \"additional_description\": \"Retrieved from TII 2Hz v0301 files. Further information and documentation found at http://efi.phys.ucalgary.ca/tii-cross-track-ion-flow-dataset-0301-released/\",\n      \"searchable\": true\n    },\n    {\n      \"field_name\": \"tii_quality_vixv\",\n      \"description\": \"Quality flag for Vixv data (along-track component from the vertical sensor)\",\n      \"data_type\": \"int\",\n      \"allowed_values\": [],\n      \"additional_description\": \"Retrieved from TII 2Hz v0301 files. Further information and documentation found at http://efi.phys.ucalgary.ca/tii-cross-track-ion-flow-dataset-0301-released/\",\n      \"searchable\": true\n    },\n    {\n      \"field_name\": \"tii_quality_viy\",\n      \"description\": \"Quality flag for Viy data (to the right, observer facing forward)\",\n      \"data_type\": \"int\",\n      \"allowed_values\": [],\n      \"additional_description\": \"Retrieved from TII 2Hz v0301 files. Further information and documentation found at http://efi.phys.ucalgary.ca/tii-cross-track-ion-flow-dataset-0301-released/\",\n      \"searchable\": true\n    },\n    {\n      \"field_name\": \"tii_quality_viz\",\n      \"description\": \"Quality flag for Viz data (downward)\",\n      \"data_type\": \"int\",\n      \"allowed_values\": [],\n      \"additional_description\": \"Retrieved from TII 2Hz v0301 files. Further information and documentation found at http://efi.phys.ucalgary.ca/tii-cross-track-ion-flow-dataset-0301-released/\",\n      \"searchable\": true\n    }\n  ],\n  \"data_product_metadata_schema\": []\n}\n</code></pre>"},{"location":"getting_started/4_searching_conjunctions/#advanced-distances","title":"Advanced distances","text":"<p>As conjunction searches grow to have 2+ criteria blocks, this introduces the need to sometime specify the distances between each criteria block. For example, if you had one ground and two space criteria blocks, you may not care if the two spacecrafts are close to each other. You may only care that the two spacecrafts are close to the ground one.</p> <p>This flexibility in distances is where the \"advanced distances\" component comes into play. By clicking the  icon beside the distance input, you can explore this capability. When the distance is left empty for a matching, this means that the search algorithm shouldn't care about its distance when deriving conjunctions.</p> <p>Below is the advanced distanced modal for example 5 on the Conjunction Search webpage. In this example, we are searching for triple conjunctions between one ground and two space, where the maximum distance between the ground and each space is 900 km, and the distance between the two space is not a restriction.</p> <p></p>"},{"location":"getting_started/4_searching_conjunctions/#searching-ephemeris-and-data-product-records","title":"Searching Ephemeris and Data Product Records","text":"<p>In addition to conjunction searches, the AuroraX search engine can also be used to search the database for ephemeris and data product records. Queries are very similar to conjunction searches, with the ability to use metadata filters in the exact same way. </p> <p>You can easily do an ephemeris search to retrieve all 1-minute records for a set of THEMIS ASIs where a machine learning model thinks APA is in the FoV. With this information, you can feed it into other research you're doing locally (outside of the AuroraX platform).</p>"},{"location":"getting_started/4_searching_conjunctions/#next-step","title":"Next step","text":"<p>Now that we've dipped our toes into searching for conjunctions, we'll explore the the search engine's capabilities of retrieving ephemeris and data product records.</p> <p>Next step\u00a0\u00a0</p>"},{"location":"getting_started/5_exploring_keograms/","title":"Using Keogramist to Explore Keograms and Movies","text":"<p>Another resource in AuroraX is a web interface called Keogramist.</p> <p></p>"},{"location":"getting_started/5_exploring_keograms/#about-keogramist","title":"About Keogramist","text":"<p>Keogramist is a tool that helps quickly navigate auroral data in AuroraX using keograms and movies, some of the most common data products generated by All-Sky Imagers (ASIs).</p> <p>Using keogramist you can browse through large amounts of keograms for different ASI networks. When you find a day that is interesting, you can click on it to expand the view. A movie player and the \"Snipping Tool\" will then be visible buttons, where you can watch the movie of the night of data with some nice playback tools to help investigate further.</p>"},{"location":"getting_started/5_exploring_keograms/#what-are-keograms","title":"What are keograms?","text":"<p>Keograms are images that represent a period of time of data from an ASI. The centre column of each frame is extracted and stacked left-to-right to form the keogram. North is at the top, south at the bottom, and time runs from left-to-right. You can learn more about them here and here.</p> <p>Below is one example of keograms with several stacked vertically. The top frames are all from a certain time identified by the red lines, each image is from a different ASI (left to right and top to bottom: TREx Blueline, TREx NIR, TREx RGB, REGO).</p> <p></p>"},{"location":"getting_started/5_exploring_keograms/#snipping-tool","title":"Snipping Tool","text":"<p>The \"Snipping Tool\" in Keogramist is something that we came up with out of the endless nights before a conference presentation where we need a quick good example of some phenomenon as a movie, but don't have the time to process the data and make it in time. So, we created this interface where you can take a nightly movie and change the resolution, playback speed, and start/end times. Then with a single click, AuroraX will create the movie file for you.</p> <p></p>"},{"location":"getting_started/5_exploring_keograms/#next-step","title":"Next step","text":"<p>Let's now move on to a little tool we have in AuroraX that lets us know quickly what data we have on the platform.</p> <p>Next step\u00a0\u00a0</p>"},{"location":"getting_started/6_data_availability/","title":"Data Availability and Statistics","text":"<p>Since AuroraX has a lot of data in its database, it's important to be able to quickly identify what periods of time have data from certain data sources. To do this, we have developed two interfaces that provide this kind of information: 1) data availability, and 2) data statistics. Below, we'll have a look at both briefly.</p> <p>Note that Swarm-Aurora also has this quick-look availability interface.</p>"},{"location":"getting_started/6_data_availability/#availability","title":"Availability","text":"<p>The data availability information for AuroraX is visualized using the Data Availability webpage. Below is a screenshot of it. You can look at availability information for ephemeris or data products records, filtering by program if desired. The interface visualizes one year of data at a time.</p> <p></p>"},{"location":"getting_started/6_data_availability/#statistics","title":"Statistics","text":"<p>The data statistics information for AuroraX is shown in a table with columns for record counts and earliest/latest timestamps of records.</p> <p>You can view the page here.</p>"},{"location":"getting_started/6_data_availability/#next-step","title":"Next step","text":"<p>Lastly, we'll have a look into ways of interacting with AuroraX programmatically. Such as the API and the Python library called PyAuroraX.</p> <p>Next step\u00a0\u00a0</p>"},{"location":"getting_started/7_interacting_programmatically/","title":"Interacting Programmatically with AuroraX","text":"<p>Under-the-hood, AuroraX is programmatic by nature. It is built on top of a database and a HTTPS-based RESTful APIs. All webpages and other tools we have available are built on top of the APIs to provide more human-friendly or robust interfaces (webpages, client libraries).</p> <p>Below, we'll have a look at what's available to use if you want to programmatically interact with the platform.</p>"},{"location":"getting_started/7_interacting_programmatically/#programmatic-methods","title":"Programmatic methods","text":"<p>There are four main ways of interacting with AuroraX programmatically:</p> <ol> <li>Making raw HTTP/HTTPS requests to the RESTful APIs</li> <li>Writing Python code with PyAuroraX</li> <li>Using the command line with aurorax-cli (part of PyAuroraX)</li> <li>Writing IDL code with IDL-AuroraX</li> </ol> <p>Below, we'll introduce you to each and discuss the tools available.</p>"},{"location":"getting_started/7_interacting_programmatically/#making-raw-httphttps-requests-to-the-restful-apis","title":"Making raw HTTP/HTTPS requests to the RESTful APIs","text":"<p>Since AuroraX operates as a HTTPS-based RESTful API, you can interact with it using any number of programming languages. You can use command line tools like wget and curl, build a web application that sends requests using JavaScript, or write programs that send HTTPS requests (ie. Python's requests or urllib3 libraries).</p> <p>The API provides a basic interactive website for documenting and running endpoints:</p> <ul> <li>Interactive Swagger API documentation</li> </ul>"},{"location":"getting_started/7_interacting_programmatically/#writing-python-code-with-pyaurorax","title":"Writing Python code with PyAuroraX","text":"<p>AuroraX provides a Python library to make life easier for application development. The software can be found on Github, and the API reference documentation can be found on this documentation website.</p> <ul> <li>PyAuroraX code repository</li> <li>PyAuroraX API reference documentation</li> </ul> <p>You can install it and import it like so:</p> <pre><code>$ pip install pyaurorax\n$ python\n&gt;&gt;&gt; import pyaurorax\n&gt;&gt;&gt; sources = pyaurorax.sources.list(program=\"swarm\")\n</code></pre> Click to view the output of the above pyaurorax function call <p>Below is the <code>sources</code> variable from the <code>pyaurorax.sources.list()</code> function when the program is set to \"swarm\".</p> <pre><code>&gt;&gt;&gt; import pyaurorax\n&gt;&gt;&gt; import pprint\n&gt;&gt;&gt; sources = pyaurorax.sources.list(program=\"swarm\")\n&gt;&gt;&gt; pprint.pprint(sources)\n[\n  DataSource(identifier=3, program='swarm', platform='swarma', instrument_type='footprint', source_type='leo', display_name='Swarm A', metadata={}, owner='dchaddoc@ucalgary.ca', maintainers=[], ephemeris_metadata_schema=[{'field_name': 'nbt...}], data_product_metadata_schema=[]),\n  DataSource(identifier=29, program='swarm', platform='swarmb', instrument_type='footprint', source_type='leo', display_name='Swarm B', metadata={}, owner='dchaddoc@ucalgary.ca', maintainers=[], ephemeris_metadata_schema=[{'field_name': 'nbt...}], data_product_metadata_schema=[]),\n  DataSource(identifier=30, program='swarm', platform='swarmc', instrument_type='footprint', source_type='leo', display_name='Swarm C', metadata={}, owner='dchaddoc@ucalgary.ca', maintainers=[], ephemeris_metadata_schema=[{'field_name': 'nbt...}], data_product_metadata_schema=[])\n]\n</code></pre> <p>More details on installation can be found here.</p>"},{"location":"getting_started/7_interacting_programmatically/#using-the-command-line-with-aurorax-cli","title":"Using the command line with aurorax-cli","text":"<p>If you only need to interact with AuroraX from the command line, you can use the <code>aurorax-cli</code> program that is bundled with the PyAuroraX library. The software is part of the PyAuroraX repository and can be found here on Github.</p> <p>After installing the PyAuroraX library, you can view the usage information by typing:</p> <pre><code>$ aurorax-cli --help\n$ aurorax-cli sources list --program=swarm\nIdentifier \u2193   Display Name   Program   Platform   Instrument Type   Source Type\n================================================================================\n3              Swarm A        swarm     swarma     footprint         leo        \n29             Swarm B        swarm     swarmb     footprint         leo        \n30             Swarm C        swarm     swarmc     footprint         leo        \n</code></pre>"},{"location":"getting_started/7_interacting_programmatically/#writing-idl-code-with-idl-aurorax","title":"Writing IDL code with IDL-AuroraX","text":"<p>AuroraX provides an IDL library for retrieving data from the platform, and performing conjunction searches. The software can be found on Github, and the API reference documentation can be found on this documentation website.</p> <ul> <li>IDL-AuroraX code repository</li> <li>IDL-AuroraX API reference documentation</li> </ul> <p>You can install it and use it like so:</p> <pre><code>IDL&gt; ipm,/install,'https://data.aurorax.space/data/software/idl-aurorax/latest.zip'\n[ add \".run aurorax_startup\" to your startup file (see Github README) ]\nIDL&gt; sources = aurorax_list_sources(program='swarm')\n</code></pre> Click to view the output of the above idl-aurorax function call <p>Below is the <code>sources</code> variable from the <code>aurorax_list_sources()</code> function when the program is set to \"swarm\".</p> <pre><code>IDL&gt; sources = aurorax_list_sources(program='swarm')\nIDL&gt; help,sources\nSOURCES        LIST  &lt;ID=2158  NELEMENTS=3&gt;\nIDL&gt; help,sources[0]\n** Structure &lt;69a1b2d0&gt;, 6 tags, length=88, data length=88, refs=2:\n   IDENTIFIER      LONG64                         3\n   PROGRAM         STRING    'swarm'\n   PLATFORM        STRING    'swarma'\n   INSTRUMENT_TYPE STRING    'footprint'\n   SOURCE_TYPE     STRING    'leo'\n   DISPLAY_NAME    STRING    'Swarm A'\nIDL&gt; help,sources[1]\n** Structure &lt;69a1b890&gt;, 6 tags, length=88, data length=88, refs=2:\n   IDENTIFIER      LONG64                        29\n   PROGRAM         STRING    'swarm'\n   PLATFORM        STRING    'swarmb'\n   INSTRUMENT_TYPE STRING    'footprint'\n   SOURCE_TYPE     STRING    'leo'\n   DISPLAY_NAME    STRING    'Swarm B'\nIDL&gt; help,sources[2]\n** Structure &lt;69a1cf90&gt;, 6 tags, length=88, data length=88, refs=2:\n   IDENTIFIER      LONG64                        30\n   PROGRAM         STRING    'swarm'\n   PLATFORM        STRING    'swarmc'\n   INSTRUMENT_TYPE STRING    'footprint'\n   SOURCE_TYPE     STRING    'leo'\n   DISPLAY_NAME    STRING    'Swarm C'\n</code></pre> <p>More details on installation can be found here.</p>"},{"location":"getting_started/7_interacting_programmatically/#all-done","title":"All done!","text":"<p>That's a wrap for the introduction to the AuroraX platform. This documentation website has more technical details about different aspects of AuroraX data and resources, so be sure to check them out as needed.</p>"},{"location":"ml/overview/","title":"Machine Learning","text":"<p>One of the major goals of AuroraX is to leverage machine learning to enhance the discoverability of auroral data, providing a way to sift through images and quickly find what you're looking for. Since ASIs collect significant volumes of data (hundreds of TBs) we would benefit from a way to determine the content in images automatically, and be able to search looking for specific types of aurora.</p> <p>Metadata derived from machine learning models is included in the AuroraX database. This allows the AuroraX search engine to filter on image content derived from any number of models. For example, searching for conjunctions that are not cloudy, or contain specific kinds of aurora.</p>"},{"location":"ml/overview/#how-are-models-used-in-aurorax","title":"How are models used in AuroraX?","text":"<p>Machine learning models are currently used to enhance the AuroraX Conjunction Search capabilities. For example, you can perform searches with metadata filters specified to reduce the search down to only times when it was not cloudy, or an imager had Amorphous Pulsating Aurora (APA) in the field of view.</p> <p>You can try this functionality out by clicking on \"Example 7\" on the Conjunction Search page. This example searches for conjunctions between any THEMIS ASI and any THEMIS satellite, where the \"ucalgary_apa\" ML model says there's amorphous pulsating aurora in the field of view of the camera. You can perform the search and view the data using the Swarm-Aurora \"open all results\" button, as seen in the below screenshots.</p> Conjunction search results from \"example 7\". Conjunctions between THEMIS-ASI and THEMIS spacecrafts where the \"ucalgary_apa\" ML model believes there's Amorphous Pulsating Aurora (APA) in the field of view of a camera. Swarm-Aurora interface showing the first result from the above conjunction search"},{"location":"ml/overview/#what-models-are-available","title":"What models are available?","text":"<p>We currently only have models for the THEMIS ASI array. There exist three models, Lasse Clausen's OATH 6-class model, a UCalgary binary classifier for cloud/not-cloud, and a UCalgary binary classifier for APA/not-APA (Amorphous Pulsating Aurora).</p> <p>Further information on these models can be found here:</p> <ul> <li>UCalgary Cloud model</li> <li>UCalgary Amorphous Pulsating Aurora (APA) model</li> <li>Lasse Clausen OATH model</li> </ul>"},{"location":"ml/models/clausen_oath/","title":"Lasse Clausen OATH model","text":"<p>For further information about this model, please see the below links to the paper and a webpage containing the model. This paper has two versions of the model, one that is a binary classifier (aurora/no aurora), and one that is a 6-class classifier. AuroraX currently only contains metadata derived from the 6-class model.</p> <ul> <li>DOI: https://doi.org/10.1029/2018JA025274</li> <li>More details: http://tid.uio.no/plasma/oath</li> </ul> <p>You can use this model in the Conjunction Search webpage and the Ephemeris search PyAuroraX/API functions with the below values:</p> <ul> <li>Metadata field: clausen_ml_oath</li> <li>Allowed values:<ul> <li>classified as arc</li> <li>classified as diffuse</li> <li>classified as discrete</li> <li>classified as cloudy</li> <li>classified as moon</li> <li>classified as no aurora</li> <li>not classified</li> </ul> </li> </ul> AuroraX Conjunction Search metadata filter modal showing the \"clausen_ml_oath\" field."},{"location":"ml/models/ucalgary_apa/","title":"UCalgary APA detection model","text":"<p>This model is a binary classifier which predicts whether Amorphous Pulsating Aurora (APA) is visible in THEMIS ASI data. APA is a type of pulsating aurora, discussed in the paper Grono, Donovan [2018].</p> Hourly keogram showing an example of Amorphous Pulsating Aurora from Fort Smith, Canada (2019-03-16 UT11) <p>You can use this model in the Conjunction Search webpage and the Ephemeris search PyAuroraX/API functions with the below values:</p> <ul> <li>Metadata field: calgary_apa_ml_v1<ul> <li>Allowed values<ul> <li>classified as APA</li> <li>classified as not APA</li> <li>not classified</li> </ul> </li> </ul> </li> <li>Metadata field: calgary_apa_ml_v1_confidence<ul> <li>Allowed values<ul> <li>float between 0.0 and 100.0</li> </ul> </li> </ul> </li> </ul> <p> AuroraX Conjunction Search metadata filter modal showing the \"calgary_apa_ml_v1\" and \"calgary_apa_ml_v1_confidence\" fields.</p>"},{"location":"ml/models/ucalgary_cloud/","title":"UCalgary Cloud detection model","text":"<p>This model is a binary classifier which predicts whether clouds are visible in THEMIS ASI data.</p> <p>You can use this model in the Conjunction Search webpage and the Ephemeris search PyAuroraX/API functions with the below values:</p> <ul> <li>Metadata field: calgary_cloud_ml_v1<ul> <li>Allowed values<ul> <li>classified as cloudy</li> <li>classified as not cloudy</li> <li>not classified</li> </ul> </li> </ul> </li> <li>Metadata field: calgary_cloud_ml_v1_confidence<ul> <li>Allowed values<ul> <li>float between 0.0 and 100.0</li> </ul> </li> </ul> </li> </ul> AuroraX Conjunction Search metadata filter modal showing the \"calgary_cloud_ml_v1\" and \"calgary_cloud_ml_v1_confidence\" fields."},{"location":"web/citizen_science/","title":"Citizen Science","text":"<p>A component of AuroraX is to engage with citizen scientists in a meaningful way to help bring them closer to researchers across the globe.</p> <p>To do this, we are working on a way to browse and upload images taken by citizen scientists in an effort to help centralize the location of all auroral images useful for research purposes. The Citizen Science Photo Gallery will be an interface available for browsing images of this type, and to upload your own. </p> <p>The gallery tool is under development and will be made accessible once completed.</p>"},{"location":"web/conjunction_search/","title":"Conjunction Search","text":"<p>The AuroraX Conjunction Search engine is a tool for finding conjunctions between ground-based ASIs and space-based instruments. It helps researchers streamline the process of \"event discovery\", quickly narrowing down the possible times that may contain interesting data.</p>"},{"location":"web/conjunction_search/#how-can-i-use-it","title":"How can I use it?","text":"<p>The Conjunction Search is available in several different forms:</p> <ul> <li>Using the AuroraX website</li> <li>Using the AuroraX website's expert mode </li> <li>Programmatically using the HTTPS-based RESTful API or PyAuroraX</li> </ul>"},{"location":"web/conjunction_search/#what-are-conjunctions","title":"What are conjunctions?","text":"<p>The most simplistic definition of a conjunction is a time when two things are close to each other. For AuroraX, we further define it as when the magnetic footprints of two data sources are within a certain distance for a given minute.</p> <p>The set of data sources can be ground-based instrumentation, spacecrafts, or instruments operating onboard certain spacecrafts. We can easily illustrate this using a screenshot from the Swarm-Aurora Conjunction Browser, seen below. This is an example of a conjunction where the magnetic footprints of two spacecrafts - Swarm A and Swarm C in this case - passed through the field of view (FoV) of several ASIs in Fort Smith, NWT, Canada (which were collecting data at the time).</p> Example of a conjunction between two satellites and several ground-based ASIs (Swarm A, Swarm C, and Fort Smith in this case) <p>A differentiating factor of AuroraX \"conjunction\" searching from other systems available (ie. NASA's SSCWeb) is that the AuroraX database only contains data for when instruments collected data. This removes all the possibilities where the spacecraft could have passed through the FoV, but, the ASI didn't collect any data. The key benefit of this data architecture is that \"event discovery\" processes are much faster and significantly less labour-intensive.</p>"},{"location":"web/conjunction_search/#introduction-to-using-the-conjunction-search","title":"Introduction to using the conjunction search","text":"<p>In the \"Getting Started\" section of this documentation website, we have a few pages devoted to helping users get a bit more familiar with the AuroraX Conjunction Search engine.</p> <p>Get started with conjunction searching\u00a0\u00a0</p>"},{"location":"web/overview/","title":"Web Tools","text":"<p>There exists a series of web-based tools for interacting with the AuroraX platform.</p> <ul> <li>Conjunction Search</li> <li>Virtual Observatory</li> <li>Citizen Science Photo Gallery</li> </ul> <p>The pages in this section give you some more details on each, and how to use them.</p> <p>You can navigate to the AuroraX website to find them all: https://aurorax.space</p> <p></p>"},{"location":"web/virtual_observatory/","title":"Virtual Observatory","text":"<p>The AuroraX Virtual Observatory aims at providing interactive visualizations and data browsing tools to quickly navigate the vast amount of data available. These web-based applications are geared towards identifying auroral events of interest using summary data of different types.</p> <p>The Virtual Observatory currently has two web interfaces available: Keogramist, and the Event Explorer. The Event Explorer is under active development, and currently in an \"alpha\" state.</p>"},{"location":"web/virtual_observatory/#keogramist","title":"Keogramist","text":"<p>Keogramist is a tool that helps quickly navigate auroral data in AuroraX using keograms and movies, some of the most common data products generated by All-Sky Imagers (ASIs).</p> <p>Using keogramist you can browse through large amounts of keograms for different ASI networks. When you find a day that is interesting, you can click on it to expand the view. A movie player and the \"Snipping Tool\" will then be visible buttons, where you can watch the movie of the night of data with some nice playback tools to help investigate further.</p> <p>Get started with Keogramist\u00a0\u00a0 Learn about keograms\u00a0\u00a0</p>"},{"location":"web/virtual_observatory/#event-explorer","title":"Event Explorer","text":"<p>The Event Explorer uses an interactive globe to help browse ASI data and satellite location data. This tool is meant to assist with exploring data from a global point of view, with different layers of data able to be overlapped on top of one another. Please note: this tool is very early in development and is not meant for significant usage yet.</p>"}]}