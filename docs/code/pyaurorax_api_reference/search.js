window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pyaurorax", "modulename": "pyaurorax", "kind": "module", "doc": "<p>The PyAuroraX package provides a way to interact with the\n<a href=\"https://aurorax.space/data/apiLibraries\">AuroraX API</a>. It is intended\nto provide an intuitive process for those in the space physics and related\ncommunities to programmatically query AuroraX's vast database for conjunctions,\nephemeris or data product records, data availability information, and more.\nPyAuroraX requires Python 3.7, 3.8, 3.9, or 3.10.</p>\n\n<p>Check out this project on <a href=\"https://github.com/aurorax-space/pyaurorax\">GitHub</a>\nand explore the evolving ecosystem of visualizations, tools, and data\nat <a href=\"https://aurorax.space/\">AuroraX</a>.</p>\n\n<p>For an overview of usage and examples, visit the\n<a href=\"https://docs.aurorax.space/code/overview\">AuroraX Documentation website</a>.\nDetails of functionality and options are available in the\n<a href=\"https://docs.aurorax.space/code/pyaurorax_api_reference/pyaurorax/\">API reference</a>.</p>\n\n<p>Installation:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">$ </span>python<span class=\"w\"> </span>-m<span class=\"w\"> </span>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>pyaurorax\n</code></pre>\n</div>\n\n<p>Basic usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pyaurorax</span>\n</code></pre>\n</div>\n"}, {"fullname": "pyaurorax._internal.util", "modulename": "pyaurorax._internal.util", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyaurorax._internal.util.json_converter", "modulename": "pyaurorax._internal.util", "qualname": "json_converter", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">o</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.api", "modulename": "pyaurorax.api", "kind": "module", "doc": "<p>This module is the under-the-hood interface for RESTful API\nrequests. It provides helper functions that the PyAuroraX library\nuses to make robust requests.</p>\n\n<p>Note that all functions and classes from submodules are all imported\nat this level of the api module. They can be referenced from here\ninstead of digging in deeper to the submodules.</p>\n"}, {"fullname": "pyaurorax.api.DEFAULT_BASE_URL", "modulename": "pyaurorax.api", "qualname": "DEFAULT_BASE_URL", "kind": "variable", "doc": "<p>The default API base URL to use when sending requests</p>\n", "annotation": ": str", "default_value": "&#x27;https://api.aurorax.space&#x27;"}, {"fullname": "pyaurorax.api.AuroraXRequest", "modulename": "pyaurorax.api", "qualname": "AuroraXRequest", "kind": "class", "doc": "<p>AuroraX API request class</p>\n\n<p>Attributes:\n    url: the URL to make the request against\n    method: the HTTP method to use (get, post, put, delete, etc.)\n    params: any URL parameters to send in the request, defaults to {}\n    body: the body of the request (ie. post data), defaults to {}\n    headers: any headers to send as part of the request (in addition to the default ones), default is {}\n    null_response: signifies if we expect a response from the API that has no\n        body/data in it (ie. requests to upload data that respond with just a\n        202 status code), defaults to False</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "pyaurorax.api.AuroraXRequest.execute", "modulename": "pyaurorax.api", "qualname": "AuroraXRequest.execute", "kind": "function", "doc": "<p>Execute an AuroraX request</p>\n\n<p>Args:\n    limited_evaluation: don't evaluate the response after the retry\n        mechanism, defaults to False\n    skip_retry_logic: exclude the retry logic in the request, defaults\n        to False</p>\n\n<p>Returns:\n    an AuroraXResponse object</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXMaxRetriesException: max retry error\n    pyaurorax.exceptions.AuroraXNotFoundException: requested resource was not found\n    pyaurorax.exceptions.AuroraXUnexpectedContentTypeException: unexpected content error\n    pyaurorax.exceptions.AuroraXUnexpectedEmptyResponse: unexpected empty response\n    pyaurorax.exceptions.AuroraXUnauthorizedException: invalid API key for this operation</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">limited_evaluation</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">skip_retry_logic</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">AuroraXResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.api.AuroraXResponse", "modulename": "pyaurorax.api", "qualname": "AuroraXResponse", "kind": "class", "doc": "<p>AuroraX API response class</p>\n\n<p>Attributes:\n    request: the request object\n    data: the data received as part of the request\n    status_code: the HTTP status code received when making the request</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "pyaurorax.api.get_api_key", "modulename": "pyaurorax.api", "qualname": "get_api_key", "kind": "function", "doc": "<p>Returns the currently set API key for the module</p>\n\n<p>Returns:\n    current API key</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.api.authenticate", "modulename": "pyaurorax.api", "qualname": "authenticate", "kind": "function", "doc": "<p>Set authentication values for use with subsequent queries</p>\n\n<p>Args:\n    api_key: an AuroraX API key string</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.api.set_base_url", "modulename": "pyaurorax.api", "qualname": "set_base_url", "kind": "function", "doc": "<p>Change the base URL for the API (ie. change to the staging\nsystem or local server)</p>\n\n<p>Args:\n    url: the new base url string (ie. 'https://api.staging.aurorax.space')</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.api.get_base_url", "modulename": "pyaurorax.api", "qualname": "get_base_url", "kind": "function", "doc": "<p>Returns the current base URL for the API</p>\n\n<p>Returns:\n    current base URL</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.api.reset_base_url", "modulename": "pyaurorax.api", "qualname": "reset_base_url", "kind": "function", "doc": "<p>Set the base URL for the API back to the default</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.availability", "modulename": "pyaurorax.availability", "kind": "module", "doc": "<p>The availability module provides functions to quickly\ndetermine what data exists on the AuroraX platform.</p>\n\n<p>Note that all functions and classes from submodules are all imported\nat this level of the availability module. They can be referenced from\nhere instead of digging in deeper to the submodules.</p>\n"}, {"fullname": "pyaurorax.availability.ephemeris", "modulename": "pyaurorax.availability", "qualname": "ephemeris", "kind": "function", "doc": "<p>Retrieve information about the number of existing ephemeris records</p>\n\n<p>Args:\n    start: start date to retrieve availability info from (inclusive)\n    end: end date to retrieve availability info until (inclusive)\n    program: program name to filter sources by, defaults to None\n    platform: platform name to filter sources by, defaults to None\n    instrument_type: instrument type to filter sources by, defaults to None\n    source_type: source type to filter sources by, defaults to None. Other\n        options are in the pyaurorax.sources module, or at the top level\n        using the pyaurorax.SOURCE_TYPE_* variables.\n    owner: owner email address to filter sources by, defaults to None\n    format: the format of the data sources returned, defaults to \"basic_info\".\n        Other options are in the pyaurorax.sources module, or at the top level\n        using the pyaurorax.FORMAT_* variables.\n    slow: query the data using a slower, but more accurate method, defaults to False</p>\n\n<p>Returns:\n    ephemeris availability information matching the requested parameters</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span>,</span><span class=\"param\">\t<span class=\"n\">program</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">platform</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">source_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">owner</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;basic_info&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">slow</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">availability</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">availability_result</span><span class=\"o\">.</span><span class=\"n\">AvailabilityResult</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.availability.data_products", "modulename": "pyaurorax.availability", "qualname": "data_products", "kind": "function", "doc": "<p>Retrieve information about the number of existing data product records</p>\n\n<p>Args:\n    start: start date to retrieve availability info from (inclusive)\n    end: end date to retrieve availability info until (inclusive)\n    program: program name to filter sources by, defaults to None\n    platform: platform name to filter sources by, defaults to None\n    instrument_type: instrument type to filter sources by, defaults to None\n    source_type: source type to filter sources by, defaults to None. Other\n        options are in the pyaurorax.sources module, or at the top level\n        using the pyaurorax.SOURCE_TYPE_* variables.\n    owner: owner email address to filter sources by, defaults to None\n    format: the format of the data sources returned, defaults to \"basic_info\".\n        Other options are in the pyaurorax.sources module, or at the top level\n        using the pyaurorax.FORMAT_* variables.\n    slow: query the data using a slower, but more accurate method, defaults to False</p>\n\n<p>Returns:\n    data product availability information matching the requested parameters</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span>,</span><span class=\"param\">\t<span class=\"n\">program</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">platform</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">source_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">owner</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;basic_info&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">slow</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">availability</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">availability_result</span><span class=\"o\">.</span><span class=\"n\">AvailabilityResult</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.availability.AvailabilityResult", "modulename": "pyaurorax.availability", "qualname": "AvailabilityResult", "kind": "class", "doc": "<p>Availability information object</p>\n\n<p>Attributes:\n    data_source: the data source that the records are associated with\n    available_data_products: the data product availability information\n    available_ephemeris: the ephemeris availability information</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "pyaurorax.cli", "modulename": "pyaurorax.cli", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyaurorax.cli.availability", "modulename": "pyaurorax.cli.availability", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyaurorax.cli.availability.commands", "modulename": "pyaurorax.cli.availability.commands", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyaurorax.cli.availability.commands.ephemeris", "modulename": "pyaurorax.cli.availability.commands", "qualname": "ephemeris", "kind": "variable", "doc": "<p>Get data availability information about ephemeris records</p>\n\n<p>\b\nSTART_DATE    the start date to retrieve info for, inclusive (YYYY/MM/DD)\nEND_DATE      the end date to retrieve info for, inclusive (YYYY/MM/DD)</p>\n", "default_value": "&lt;Command ephemeris&gt;"}, {"fullname": "pyaurorax.cli.availability.commands.data_products", "modulename": "pyaurorax.cli.availability.commands", "qualname": "data_products", "kind": "variable", "doc": "<p>Get data availability information about data product records</p>\n\n<p>\b\nSTART_DATE    the start date to retrieve info for, inclusive (YYYY/MM/DD)\nEND_DATE      the end date to retrieve info for, inclusive (YYYY/MM/DD)</p>\n", "default_value": "&lt;Command data_products&gt;"}, {"fullname": "pyaurorax.cli.cli", "modulename": "pyaurorax.cli.cli", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyaurorax.cli.cli.Config", "modulename": "pyaurorax.cli.cli", "qualname": "Config", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pyaurorax.cli.cli.Config.__init__", "modulename": "pyaurorax.cli.cli", "qualname": "Config.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pyaurorax.cli.cli.cli", "modulename": "pyaurorax.cli.cli", "qualname": "cli", "kind": "variable", "doc": "<p>Welcome to the AuroraX CLI program!</p>\n\n<p>This program is meant to provide an easy interface with AuroraX\nfrom the command line. It uses the PyAuroraX library behind the scenes.</p>\n", "default_value": "&lt;Group cli&gt;"}, {"fullname": "pyaurorax.cli.conjunctions", "modulename": "pyaurorax.cli.conjunctions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyaurorax.cli.conjunctions.commands", "modulename": "pyaurorax.cli.conjunctions.commands", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyaurorax.cli.conjunctions.commands.get_status", "modulename": "pyaurorax.cli.conjunctions.commands", "qualname": "get_status", "kind": "variable", "doc": "<p>Get information for a conjunction search request</p>\n\n<p>\b\nREQUEST_UUID    the request unique identifier</p>\n", "default_value": "&lt;Command get_status&gt;"}, {"fullname": "pyaurorax.cli.conjunctions.commands.get_logs", "modulename": "pyaurorax.cli.conjunctions.commands", "qualname": "get_logs", "kind": "variable", "doc": "<p>Get the logs for a conjunction search request</p>\n\n<p>\b\nREQUEST_UUID    the request unique identifier</p>\n", "default_value": "&lt;Command get_logs&gt;"}, {"fullname": "pyaurorax.cli.conjunctions.commands.get_query", "modulename": "pyaurorax.cli.conjunctions.commands", "qualname": "get_query", "kind": "variable", "doc": "<p>Get the query for a conjunction search request</p>\n\n<p>\b\nREQUEST_UUID    the request unique identifier</p>\n", "default_value": "&lt;Command get_query&gt;"}, {"fullname": "pyaurorax.cli.conjunctions.commands.get_data", "modulename": "pyaurorax.cli.conjunctions.commands", "qualname": "get_data", "kind": "variable", "doc": "<p>Get the data for a conjunction search request</p>\n\n<p>\b\nREQUEST_UUID    the request unique identifier</p>\n", "default_value": "&lt;Command get_data&gt;"}, {"fullname": "pyaurorax.cli.conjunctions.commands.search_resubmit", "modulename": "pyaurorax.cli.conjunctions.commands", "qualname": "search_resubmit", "kind": "variable", "doc": "<p>Resubmit a conjunction search request</p>\n\n<p>\b\nREQUEST_UUID    the request unique identifier</p>\n", "default_value": "&lt;Command search_resubmit&gt;"}, {"fullname": "pyaurorax.cli.conjunctions.commands.search_template", "modulename": "pyaurorax.cli.conjunctions.commands", "qualname": "search_template", "kind": "variable", "doc": "<p>Output template for a conjunction search request</p>\n", "default_value": "&lt;Command search_template&gt;"}, {"fullname": "pyaurorax.cli.conjunctions.commands.search", "modulename": "pyaurorax.cli.conjunctions.commands", "qualname": "search", "kind": "variable", "doc": "<p>Perform a conjunction search request</p>\n\n<p>\b\nINFILE      input file with query (must be a JSON)</p>\n", "default_value": "&lt;Command search&gt;"}, {"fullname": "pyaurorax.cli.conjunctions.commands.describe", "modulename": "pyaurorax.cli.conjunctions.commands", "qualname": "describe", "kind": "variable", "doc": "<p>Describe a conjunction search request using\n\"SQL-like\" syntax</p>\n\n<p>\b\nINFILE      input file with query (must be a JSON)</p>\n", "default_value": "&lt;Command describe&gt;"}, {"fullname": "pyaurorax.cli.data_products", "modulename": "pyaurorax.cli.data_products", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyaurorax.cli.data_products.commands", "modulename": "pyaurorax.cli.data_products.commands", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyaurorax.cli.data_products.commands.get_status", "modulename": "pyaurorax.cli.data_products.commands", "qualname": "get_status", "kind": "variable", "doc": "<p>Get information for a data product search request</p>\n\n<p>\b\nREQUEST_UUID    the request unique identifier</p>\n", "default_value": "&lt;Command get_status&gt;"}, {"fullname": "pyaurorax.cli.data_products.commands.get_logs", "modulename": "pyaurorax.cli.data_products.commands", "qualname": "get_logs", "kind": "variable", "doc": "<p>Get the logs for a data product search request</p>\n\n<p>\b\nREQUEST_UUID    the request unique identifier</p>\n", "default_value": "&lt;Command get_logs&gt;"}, {"fullname": "pyaurorax.cli.data_products.commands.get_query", "modulename": "pyaurorax.cli.data_products.commands", "qualname": "get_query", "kind": "variable", "doc": "<p>Get the query for a data product search request</p>\n\n<p>\b\nREQUEST_UUID    the request unique identifier</p>\n", "default_value": "&lt;Command get_query&gt;"}, {"fullname": "pyaurorax.cli.data_products.commands.get_data", "modulename": "pyaurorax.cli.data_products.commands", "qualname": "get_data", "kind": "variable", "doc": "<p>Get the data for a data product search request</p>\n\n<p>\b\nREQUEST_UUID    the request unique identifier</p>\n", "default_value": "&lt;Command get_data&gt;"}, {"fullname": "pyaurorax.cli.data_products.commands.search_resubmit", "modulename": "pyaurorax.cli.data_products.commands", "qualname": "search_resubmit", "kind": "variable", "doc": "<p>Resubmit a data product search request</p>\n\n<p>\b\nREQUEST_UUID    the request unique identifier</p>\n", "default_value": "&lt;Command search_resubmit&gt;"}, {"fullname": "pyaurorax.cli.data_products.commands.search_template", "modulename": "pyaurorax.cli.data_products.commands", "qualname": "search_template", "kind": "variable", "doc": "<p>Output template for a data product search request</p>\n", "default_value": "&lt;Command search_template&gt;"}, {"fullname": "pyaurorax.cli.data_products.commands.search", "modulename": "pyaurorax.cli.data_products.commands", "qualname": "search", "kind": "variable", "doc": "<p>Perform a data product search request</p>\n\n<p>\b\nINFILE      input file with query (must be a JSON)</p>\n", "default_value": "&lt;Command search&gt;"}, {"fullname": "pyaurorax.cli.data_products.commands.describe", "modulename": "pyaurorax.cli.data_products.commands", "qualname": "describe", "kind": "variable", "doc": "<p>Describe a data product search request using\n\"SQL-like\" syntax</p>\n\n<p>\b\nINFILE      input file with query (must be a JSON)</p>\n", "default_value": "&lt;Command describe&gt;"}, {"fullname": "pyaurorax.cli.ephemeris", "modulename": "pyaurorax.cli.ephemeris", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyaurorax.cli.ephemeris.commands", "modulename": "pyaurorax.cli.ephemeris.commands", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyaurorax.cli.ephemeris.commands.get_status", "modulename": "pyaurorax.cli.ephemeris.commands", "qualname": "get_status", "kind": "variable", "doc": "<p>Get information for an ephemeris search request</p>\n\n<p>\b\nREQUEST_UUID    the request unique identifier</p>\n", "default_value": "&lt;Command get_status&gt;"}, {"fullname": "pyaurorax.cli.ephemeris.commands.get_logs", "modulename": "pyaurorax.cli.ephemeris.commands", "qualname": "get_logs", "kind": "variable", "doc": "<p>Get the logs for an ephemeris search request</p>\n\n<p>\b\nREQUEST_UUID    the request unique identifier</p>\n", "default_value": "&lt;Command get_logs&gt;"}, {"fullname": "pyaurorax.cli.ephemeris.commands.get_query", "modulename": "pyaurorax.cli.ephemeris.commands", "qualname": "get_query", "kind": "variable", "doc": "<p>Get the query for an ephemeris search request</p>\n\n<p>\b\nREQUEST_UUID    the request unique identifier</p>\n", "default_value": "&lt;Command get_query&gt;"}, {"fullname": "pyaurorax.cli.ephemeris.commands.get_data", "modulename": "pyaurorax.cli.ephemeris.commands", "qualname": "get_data", "kind": "variable", "doc": "<p>Get the data for an ephemeris search request</p>\n\n<p>\b\nREQUEST_UUID    the request unique identifier</p>\n", "default_value": "&lt;Command get_data&gt;"}, {"fullname": "pyaurorax.cli.ephemeris.commands.search_resubmit", "modulename": "pyaurorax.cli.ephemeris.commands", "qualname": "search_resubmit", "kind": "variable", "doc": "<p>Resubmit an ephemeris search request</p>\n\n<p>\b\nREQUEST_UUID    the request unique identifier</p>\n", "default_value": "&lt;Command search_resubmit&gt;"}, {"fullname": "pyaurorax.cli.ephemeris.commands.search_template", "modulename": "pyaurorax.cli.ephemeris.commands", "qualname": "search_template", "kind": "variable", "doc": "<p>Output template for an ephemeris search request</p>\n", "default_value": "&lt;Command search_template&gt;"}, {"fullname": "pyaurorax.cli.ephemeris.commands.search", "modulename": "pyaurorax.cli.ephemeris.commands", "qualname": "search", "kind": "variable", "doc": "<p>Perform an ephemeris search request</p>\n\n<p>\b\nINFILE      input file with query (must be a JSON)</p>\n", "default_value": "&lt;Command search&gt;"}, {"fullname": "pyaurorax.cli.ephemeris.commands.describe", "modulename": "pyaurorax.cli.ephemeris.commands", "qualname": "describe", "kind": "variable", "doc": "<p>Describe an ephemeris search request using\n\"SQL-like\" syntax</p>\n\n<p>\b\nINFILE      input file with query (must be a JSON)</p>\n", "default_value": "&lt;Command describe&gt;"}, {"fullname": "pyaurorax.cli.helpers", "modulename": "pyaurorax.cli.helpers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyaurorax.cli.helpers.print_request_logs_table", "modulename": "pyaurorax.cli.helpers", "qualname": "print_request_logs_table", "kind": "function", "doc": "<p>Function to print request logs table</p>\n\n<p>This is a shared helper function because it is used by the\nconjunction, data products, and ephemeris command modules.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">logs</span>, </span><span class=\"param\"><span class=\"n\">filter_level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">table_max_width</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">truncate</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.cli.helpers.print_request_status", "modulename": "pyaurorax.cli.helpers", "qualname": "print_request_status", "kind": "function", "doc": "<p>Function to print request status information</p>\n\n<p>This is a shared helper function because it is used by the\nconjunction, data products, and ephemeris command modules.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">s</span>,</span><span class=\"param\">\t<span class=\"n\">show_logs</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">show_query</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">filter_logs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">table_max_width</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.cli.helpers.get_search_data", "modulename": "pyaurorax.cli.helpers", "qualname": "get_search_data", "kind": "function", "doc": "<p>Function to get search request data</p>\n\n<p>This is a shared helper function because it is used by the\nconjunction, data products, and ephemeris command modules.\nSome if statements are used to differentiate between the\ncommans.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">type</span>,</span><span class=\"param\">\t<span class=\"n\">request_uuid</span>,</span><span class=\"param\">\t<span class=\"n\">outfile</span>,</span><span class=\"param\">\t<span class=\"n\">output_to_terminal</span>,</span><span class=\"param\">\t<span class=\"n\">indent</span>,</span><span class=\"param\">\t<span class=\"n\">minify</span>,</span><span class=\"param\">\t<span class=\"n\">show_times</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">search_obj</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.cli.sources", "modulename": "pyaurorax.cli.sources", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyaurorax.cli.sources.commands", "modulename": "pyaurorax.cli.sources.commands", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyaurorax.cli.sources.commands.list", "modulename": "pyaurorax.cli.sources.commands", "qualname": "list", "kind": "variable", "doc": "<p>List data sources using the options to filter as desired</p>\n", "default_value": "&lt;Command list&gt;"}, {"fullname": "pyaurorax.cli.sources.commands.search", "modulename": "pyaurorax.cli.sources.commands", "qualname": "search", "kind": "variable", "doc": "<p>Search for data sources using the options to filter as desired. Unlike\nthe 'list' command filters, this command supports multiple programs,\nplatforms, or instrument types (using commas).</p>\n", "default_value": "&lt;Command search&gt;"}, {"fullname": "pyaurorax.cli.sources.commands.get", "modulename": "pyaurorax.cli.sources.commands", "qualname": "get", "kind": "variable", "doc": "<p>Get a single data source record</p>\n\n<p>\b\nPROGRAM           the program value\nPLATFORM          the platform value\nINSTRUMENT_TYPE   the instrument type value</p>\n", "default_value": "&lt;Command get&gt;"}, {"fullname": "pyaurorax.cli.sources.commands.get_using_identifier", "modulename": "pyaurorax.cli.sources.commands", "qualname": "get_using_identifier", "kind": "variable", "doc": "<p>Get a single data source record using an identifier</p>\n\n<p>\b\nIDENTIFIER     the identifier of the data source</p>\n", "default_value": "&lt;Command get_using_identifier&gt;"}, {"fullname": "pyaurorax.cli.sources.commands.get_stats", "modulename": "pyaurorax.cli.sources.commands", "qualname": "get_stats", "kind": "variable", "doc": "<p>Get statistics about a data source</p>\n\n<p>\b\nIDENTIFIER     the identifier of the data source</p>\n", "default_value": "&lt;Command get_stats&gt;"}, {"fullname": "pyaurorax.cli.sources.commands.add", "modulename": "pyaurorax.cli.sources.commands", "qualname": "add", "kind": "variable", "doc": "<p>Add a data source</p>\n\n<p>\b\nPROGRAM           the program to set\nPLATFORM          the platform to set\nINSTRUMENT_TYPE   the instrument type to set\nSOURCE_TYPE       the source type to set\nDISPLAY_NAME      the display name to set</p>\n", "default_value": "&lt;Command add&gt;"}, {"fullname": "pyaurorax.cli.sources.commands.update", "modulename": "pyaurorax.cli.sources.commands", "qualname": "update", "kind": "variable", "doc": "<p>Update a data source</p>\n\n<p>\b\nIDENTIFIER     the identifier of the data source</p>\n", "default_value": "&lt;Command update&gt;"}, {"fullname": "pyaurorax.cli.sources.commands.delete", "modulename": "pyaurorax.cli.sources.commands", "qualname": "delete", "kind": "variable", "doc": "<p>Delete a data source</p>\n\n<p>\b\nIDENTIFIER     the identifier of the data source</p>\n", "default_value": "&lt;Command delete&gt;"}, {"fullname": "pyaurorax.cli.templates", "modulename": "pyaurorax.cli.templates", "kind": "module", "doc": "<p>This module contains the templates for different search\nrequests (conjunction, data products, ephemeris)</p>\n"}, {"fullname": "pyaurorax.cli.util", "modulename": "pyaurorax.cli.util", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyaurorax.cli.util.commands", "modulename": "pyaurorax.cli.util.commands", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyaurorax.cli.util.commands.ground_to_nbtrace", "modulename": "pyaurorax.cli.util.commands", "qualname": "ground_to_nbtrace", "kind": "variable", "doc": "<p>Convert a geographic location (assumed to be on the ground) to a north\nB-trace location. Note that the timestamp is needed since the B-trace\nvalues are derived using magnetic coordinates</p>\n\n<p>Important! If you supply negative numbers, prefix it with '--' to\ntell the terminal to not evaluate dash (-) characters as options\nafter it. For example, \"aurorax-cli util ground_to_nbtrace -- 90.0 -120.0\"</p>\n\n<p>\b\nLAT    the latitude, in geographic coordinates (-90 to 90)\nLON    the longitude, in geographic coordinates (-180 to 180)</p>\n", "default_value": "&lt;Command ground_to_nbtrace&gt;"}, {"fullname": "pyaurorax.cli.util.commands.ground_to_sbtrace", "modulename": "pyaurorax.cli.util.commands", "qualname": "ground_to_sbtrace", "kind": "variable", "doc": "<p>Convert a geographic location (assumed to be on the ground) to a south\nB-trace location. Note that the timestamp is needed since the B-trace\nvalues are derived using magnetic coordinates</p>\n\n<p>Important! If you supply negative numbers, prefix it with '--' to\ntell the terminal to not evaluate dash (-) characters as options\nafter it. For example, \"aurorax-cli util ground_to_nbtrace -- 90.0 -120.0\"</p>\n\n<p>\b\nLAT    the latitude, in geographic coordinates (-90 to 90)\nLON    the longitude, in geographic coordinates (-180 to 180)</p>\n", "default_value": "&lt;Command ground_to_sbtrace&gt;"}, {"fullname": "pyaurorax.cli.util.commands.list_search_requests", "modulename": "pyaurorax.cli.util.commands", "qualname": "list_search_requests", "kind": "variable", "doc": "<p>Retrieve a list of matching search requests (admins only)</p>\n", "default_value": "&lt;Command list_search_requests&gt;"}, {"fullname": "pyaurorax.cli.util.commands.delete_search_request", "modulename": "pyaurorax.cli.util.commands", "qualname": "delete_search_request", "kind": "variable", "doc": "<p>Delete a search request from AuroraX (admins only)</p>\n\n<p>REQUEST_UUID     the request unique identifier</p>\n", "default_value": "&lt;Command delete_search_request&gt;"}, {"fullname": "pyaurorax.conjunctions", "modulename": "pyaurorax.conjunctions", "kind": "module", "doc": "<p>The conjunction module is used for finding conjunctions between\ngroupings of data sources.</p>\n\n<p>Note that all functions and classes from submodules are all imported\nat this level of the conjunctions module. They can be referenced from\nhere instead of digging in deeper to the submodules.</p>\n"}, {"fullname": "pyaurorax.conjunctions.CONJUNCTION_TYPE_NBTRACE", "modulename": "pyaurorax.conjunctions", "qualname": "CONJUNCTION_TYPE_NBTRACE", "kind": "variable", "doc": "<p>Conjunction search 'conjunction_type' category for\nfinding conjunctions using the north B-trace data</p>\n", "annotation": ": str", "default_value": "&#x27;nbtrace&#x27;"}, {"fullname": "pyaurorax.conjunctions.CONJUNCTION_TYPE_SBTRACE", "modulename": "pyaurorax.conjunctions", "qualname": "CONJUNCTION_TYPE_SBTRACE", "kind": "variable", "doc": "<p>Conjunction search 'conjunction_type' category for\nfinding conjunctions using the south B-trace data</p>\n", "annotation": ": str", "default_value": "&#x27;sbtrace&#x27;"}, {"fullname": "pyaurorax.conjunctions.search", "modulename": "pyaurorax.conjunctions", "qualname": "search", "kind": "function", "doc": "<p>Search for conjunctions between data sources</p>\n\n<p>By default, this function will block and wait until the request completes and\nall data is downloaded. If you don't want to wait, set the 'return_immediately`\nvalue to True. The Search object will be returned right after the search has been\nstarted, and you can use the helper functions as part of that object to get the\ndata when it's done.</p>\n\n<p>Args:\n    start: start timestamp of the search (inclusive)\n    end: end timestamp of the search (inclusive)\n    distance: the maximum distance allowed between data sources when searching for\n        conjunctions. This can either be a number (int or float), or a dictionary\n        modified from the output of the \"get_advanced_distances_combos()\" function.\n    ground: list of ground instrument search parameters, defaults to []</p>\n\n<pre><code>    Example:\n\n        [{\n            \"programs\": [\"themis-asi\"],\n            \"platforms\": [\"gillam\", \"rabbit lake\"],\n            \"instrument_types\": [\"RGB\"],\n            \"ephemeris_metadata_filters\": {\n                \"logical_operator\": \"AND\",\n                \"expressions\": [\n                    {\n                        \"key\": \"calgary_apa_ml_v1\",\n                        \"operator\": \"in\",\n                        \"values\": [ \"classified as APA\" ]\n                    }\n                ]\n            }\n        }]\nspace: list of one or more space instrument search parameters, defaults to []\n\n    Example:\n\n        [{\n            \"programs\": [\"themis-asi\", \"swarm\"],\n            \"platforms\": [\"themisa\", \"swarma\"],\n            \"instrument_types\": [\"footprint\"],\n            \"ephemeris_metadata_filters\": {\n                \"logical_operator\": \"AND\",\n                \"expressions\": [\n                    {\n                        \"key\": \"nbtrace_region\",\n                        \"operator\": \"in\",\n                        \"values\": [ \"north auroral oval\" ]\n                    }\n                ]\n            },\n            \"hemisphere\": [\n                \"northern\"\n            ]\n        }]\nevents: list of one or more events search parameters, defaults to []\n\n    Example:\n\n        [{\n            \"programs\": [ \"events\" ],\n            \"instrument_types\": [ \"substorm onsets\" ]\n        }]\nconjunction_types: list of conjunction types, defaults to [] (meaning all conjunction\n    types). Options are in the pyaurorax.conjunctions module, or at the top level using\n    the pyaurorax.CONJUNCTION_TYPE_* variables.\nepoch_search_precision: the time precision to which conjunctions are calculated. Can be\n    30 or 60 seconds. Defaults to 60 seconds. Note - this parameter is under active\n    development and still considered \"alpha\".\nresponse_format: JSON representation of desired data response format\npoll_interval: seconds to wait between polling calls, defaults to\n    pyaurorax.requests.STANDARD_POLLING_SLEEP_TIME\nreturn_immediately: initiate the search and return without waiting for data to\n    be received, defaults to False\nverbose: show the progress of the request using the request log, defaults\n</code></pre>\n\n<p>Returns:\n    a pyaurorax.conjunctions.Search object</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">distance</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">ground</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">space</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">events</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">conjunction_types</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">epoch_search_precision</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">60</span>,</span><span class=\"param\">\t<span class=\"n\">response_format</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">poll_interval</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">return_immediately</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">conjunctions</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"o\">.</span><span class=\"n\">Search</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.conjunctions.describe", "modulename": "pyaurorax.conjunctions", "qualname": "describe", "kind": "function", "doc": "<p>Describe a conjunction search as an \"SQL-like\" string</p>\n\n<p>Args:\n    search_obj: the conjunction search to describe</p>\n\n<p>Returns:\n    the \"SQL-like\" string describing the conjunction search object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">search_obj</span><span class=\"p\">:</span> <span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">conjunctions</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"o\">.</span><span class=\"n\">Search</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.conjunctions.get_request_url", "modulename": "pyaurorax.conjunctions", "qualname": "get_request_url", "kind": "function", "doc": "<p>Get the conjunction search request URL for a given\nrequest ID. This URL can be used for subsequent\npyaurorax.requests function calls. Primarily this method\nfacilitates delving into details about a set of already-submitted\nconjunction searches.</p>\n\n<p>Args:\n    request_id: the request identifier</p>\n\n<p>Returns:\n    the request URL</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">request_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.conjunctions.Conjunction", "modulename": "pyaurorax.conjunctions", "qualname": "Conjunction", "kind": "class", "doc": "<p>Conjunction object</p>\n\n<p>Attributes:\n    conjunction_type: the type of location data used when the\n        conjunction was found (either be 'nbtrace' or 'sbtrace')\n    start: start timestamp of the conjunction\n    end: end timestamp of the conjunction\n    data_sources: data sources in the conjunction\n    min_distance: minimum kilometer distance of the conjunction\n    max_distance: maximum kilometer distance of the conjunction\n    events: the sub-conjunctions that make up this over-arching\n        conjunction (the conjunctions between each set of two data\n        sources)</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "pyaurorax.conjunctions.Search", "modulename": "pyaurorax.conjunctions", "qualname": "Search", "kind": "class", "doc": "<p>Class representing a conjunction search</p>\n\n<p>Attributes:\n    start: start timestamp of the search (inclusive)\n    end: end timestamp of the search (inclusive)\n    distance: the maximum distance allowed between data sources when searching for\n        conjunctions. This can either be a number (int or float), or a dictionary\n        modified from the output of the \"get_advanced_distances_combos()\" function.\n    ground: list of ground instrument search parameters, defaults to []</p>\n\n<pre><code>    Example:\n\n        [{\n            \"programs\": [\"themis-asi\"],\n            \"platforms\": [\"gillam\", \"rabbit lake\"],\n            \"instrument_types\": [\"RGB\"],\n            \"ephemeris_metadata_filters\": {\n                \"logical_operator\": \"AND\",\n                \"expressions\": [\n                    {\n                        \"key\": \"calgary_apa_ml_v1\",\n                        \"operator\": \"in\",\n                        \"values\": [ \"classified as APA\" ]\n                    }\n                ]\n            }\n        }]\nspace: list of one or more space instrument search parameters, defaults to []\n\n    Example:\n\n        [{\n            \"programs\": [\"themis-asi\", \"swarm\"],\n            \"platforms\": [\"themisa\", \"swarma\"],\n            \"instrument_types\": [\"footprint\"],\n            \"ephemeris_metadata_filters\": {\n                \"logical_operator\": \"AND\",\n                \"expressions\": [\n                    {\n                        \"key\": \"nbtrace_region\",\n                        \"operator\": \"in\",\n                        \"values\": [ \"north auroral oval\" ]\n                    }\n                ]\n            },\n            \"hemisphere\": [\n                \"northern\"\n            ]\n        }]\nevents: list of one or more events search parameters, defaults to []\n\n    Example:\n\n        [{\n            \"programs\": [ \"events\" ],\n            \"instrument_types\": [ \"substorm onsets\" ]\n        }]\nconjunction_types: list of conjunction types, defaults to [\"nbtrace\"]. Options are\n    in the pyaurorax.conjunctions module, or at the top level using the\n    pyaurorax.CONJUNCTION_TYPE_* variables.\nepoch_search_precision: the time precision to which conjunctions are calculated. Can be\n    30 or 60 seconds. Defaults to 60 seconds. Note - this parameter is under active\n    development and still considered \"alpha\".\nresponse_format: JSON representation of desired data response format\nrequest: AuroraXResponse object returned when the search is executed\nrequest_id: unique ID assigned to the request by the AuroraX API\nrequest_url: unique URL assigned to the request by the AuroraX API\nexecuted: indicates if the search has been executed/started\ncompleted: indicates if the search has finished\ndata_url: the URL where data is accessed\nquery: the query for this request as JSON\nstatus: the status of the query\ndata: the conjunctions found\nlogs: all log messages outputed by the AuroraX API for this request\n\nReturns:\n    a pyaurorax.conjunctions.Search object\n</code></pre>\n"}, {"fullname": "pyaurorax.conjunctions.Search.__init__", "modulename": "pyaurorax.conjunctions", "qualname": "Search.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">distance</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">ground</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">space</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">events</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">conjunction_types</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;nbtrace&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">epoch_search_precision</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">60</span>,</span><span class=\"param\">\t<span class=\"n\">response_format</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pyaurorax.conjunctions.Search.distance", "modulename": "pyaurorax.conjunctions", "qualname": "Search.distance", "kind": "variable", "doc": "<p>Property for the distance parameter</p>\n\n<p>Returns:\n    the distance dictionary with all combinations</p>\n", "annotation": ": Union[int, float, Dict[str, Union[int, float]]]"}, {"fullname": "pyaurorax.conjunctions.Search.query", "modulename": "pyaurorax.conjunctions", "qualname": "Search.query", "kind": "variable", "doc": "<p>Property for the query value</p>\n\n<p>Returns:\n    the query parameter</p>\n", "annotation": ": Dict"}, {"fullname": "pyaurorax.conjunctions.Search.check_criteria_block_count_validity", "modulename": "pyaurorax.conjunctions", "qualname": "Search.check_criteria_block_count_validity", "kind": "function", "doc": "<p>Check the number of of criteria blocks to see if there\nis too many. A max of 10 is allowed by the AuroraX\nconjunction search engine. An exception is raised if\nit was determined to have too many.</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXBadParametersException: too many criteria blocks are found</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.conjunctions.Search.get_advanced_distances_combos", "modulename": "pyaurorax.conjunctions", "qualname": "Search.get_advanced_distances_combos", "kind": "function", "doc": "<p>Get the advanced distances combinations for this search</p>\n\n<p>Args:\n    default_distance: the default distance to use, defaults to None</p>\n\n<p>Returns:\n    the advanced distances combinations</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default_distance</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.conjunctions.Search.execute", "modulename": "pyaurorax.conjunctions", "qualname": "Search.execute", "kind": "function", "doc": "<p>Initiate a conjunction search request</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXBadParametersException: too many criteria blocks</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.conjunctions.Search.update_status", "modulename": "pyaurorax.conjunctions", "qualname": "Search.update_status", "kind": "function", "doc": "<p>Update the status of this conjunction search request</p>\n\n<p>Args:\n    status: the previously-retrieved status of this request (include\n        to avoid requesting it from the API again), defaults to None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">status</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.conjunctions.Search.check_for_data", "modulename": "pyaurorax.conjunctions", "qualname": "Search.check_for_data", "kind": "function", "doc": "<p>Check to see if data is available for this conjunction\nsearch request</p>\n\n<p>Returns:\n    True if data is available, else False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.conjunctions.Search.get_data", "modulename": "pyaurorax.conjunctions", "qualname": "Search.get_data", "kind": "function", "doc": "<p>Retrieve the data available for this conjunction search request</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.conjunctions.Search.wait", "modulename": "pyaurorax.conjunctions", "qualname": "Search.wait", "kind": "function", "doc": "<p>Block and wait until the request is complete and data is\navailable for retrieval</p>\n\n<p>Args:\n    poll_interval: time in seconds to wait between polling attempts, defaults\n        to pyaurorax.requests.STANDARD_POLLING_SLEEP_TIME\n    verbose: output poll times and other progress messages, defaults to False</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">poll_interval</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.conjunctions.Search.cancel", "modulename": "pyaurorax.conjunctions", "qualname": "Search.cancel", "kind": "function", "doc": "<p>Cancel the conjunction search request</p>\n\n<p>This method returns immediately by default since the API processes\nthis request asynchronously. If you would prefer to wait for it\nto be completed, set the 'wait' parameter to True. You can adjust\nthe polling time using the 'poll_interval' parameter.</p>\n\n<p>Args:\n    wait: wait until the cancellation request has been\n        completed (may wait for several minutes)\n    poll_interval: seconds to wait between polling\n        calls, defaults to STANDARD_POLLING_SLEEP_TIME.\n    verbose: output poll times and other progress messages, defaults\n        to False</p>\n\n<p>Returns:\n    1 on success</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXUnexpectedContentTypeException: unexpected error\n    pyaurorax.exceptions.AuroraXUnauthorizedException: invalid API key for this operation</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">wait</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">poll_interval</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.data_products", "modulename": "pyaurorax.data_products", "kind": "module", "doc": "<p>The data_products module is used to search and upload data\nproduct records within AuroraX. One example of a data product\nis a keogram.</p>\n\n<p>Note that all functions and classes from submodules are all imported\nat this level of the data_products module. They can be referenced from\nhere instead of digging in deeper to the submodules.</p>\n"}, {"fullname": "pyaurorax.data_products.DATA_PRODUCT_TYPE_KEOGRAM", "modulename": "pyaurorax.data_products", "qualname": "DATA_PRODUCT_TYPE_KEOGRAM", "kind": "variable", "doc": "<p>Data product type for keograms. Keograms are a 2-D\nrepresentation of a series of images, and are one of\nthe most popular data products that auroral science\nuses. More information can be found at\n<a href=\"https://docs.aurorax.space/about_the_data/standards/#keograms\">https://docs.aurorax.space/about_the_data/standards/#keograms</a>.</p>\n", "default_value": "&#x27;keogram&#x27;"}, {"fullname": "pyaurorax.data_products.DATA_PRODUCT_TYPE_MONTAGE", "modulename": "pyaurorax.data_products", "qualname": "DATA_PRODUCT_TYPE_MONTAGE", "kind": "variable", "doc": "<p>Data product type for montages. Like keograms, montages are\nanother representation of a series of images. However, montages\nare not a 2D representation but rather a collage of thumnbail\nimages for the period of time. An example can be found at\n<a href=\"https://data.phys.ucalgary.ca/sort_by_project/THEMIS/asi/stream2/2021/12/28/gill_themis19/20211228__gill_themis19_full-montage.pgm.jpg\">https://data.phys.ucalgary.ca/sort_by_project/THEMIS/asi/stream2/2021/12/28/gill_themis19/20211228__gill_themis19_full-montage.pgm.jpg</a></p>\n", "default_value": "&#x27;montage&#x27;"}, {"fullname": "pyaurorax.data_products.DATA_PRODUCT_TYPE_MOVIE", "modulename": "pyaurorax.data_products", "qualname": "DATA_PRODUCT_TYPE_MOVIE", "kind": "variable", "doc": "<p>Data product type for movies. Movies are timelapse video\nfiles of auroral data, usually as MP4 or MPEG. They can\nconsist of frames for a whole night, or an hour, and can\nbe at any cadence that is most appropriate.</p>\n", "default_value": "&#x27;movie&#x27;"}, {"fullname": "pyaurorax.data_products.DATA_PRODUCT_TYPE_SUMMARY_PLOT", "modulename": "pyaurorax.data_products", "qualname": "DATA_PRODUCT_TYPE_SUMMARY_PLOT", "kind": "variable", "doc": "<p>Data product type for summary plots. A summary plot can be any type\nof plot that shows auroral data in a summary format, for example a\nbackground-subtracted meridian scanning photometer plot showing\ncounts in Rayleighs.</p>\n", "default_value": "&#x27;summary_plot&#x27;"}, {"fullname": "pyaurorax.data_products.DATA_PRODUCT_TYPE_DATA_AVAILABILITY", "modulename": "pyaurorax.data_products", "qualname": "DATA_PRODUCT_TYPE_DATA_AVAILABILITY", "kind": "variable", "doc": "<p>Data product type for data availability. The AuroraX data availability\nsystem does not account for times when data was not expected to be\ncollected, such as summer shutdowns due to inadequate night hours. This\ndata product type for 'data availbility' is meant to be used as a smarter\ndata availability mechanism for Aurora.</p>\n", "default_value": "&#x27;data_availability&#x27;"}, {"fullname": "pyaurorax.data_products.search", "modulename": "pyaurorax.data_products", "qualname": "search", "kind": "function", "doc": "<p>Search for data product records</p>\n\n<p>By default, this function will block and wait until the request completes and\nall data is downloaded. If you don't want to wait, set the 'return_immediately`\nvalue to True. The Search object will be returned right after the search has been\nstarted, and you can use the helper functions as part of that object to get the\ndata when it's done.</p>\n\n<p>Note: At least one search criteria from programs, platforms, or\ninstrument_types, must be specified.</p>\n\n<p>Args:\n    start: start timestamp of the search (inclusive)\n    end: end timestamp of the search (inclusive)\n    programs: list of programs to search through, defaults to None\n    platforms: list of platforms to search through, defaults to None\n    instrument_types: list of instrument types to search through, defaults to None\n    data_product_types: list of dictionaries describing data product\n        types to filter on e.g. \"keogram\", defaults to None. Options are in the\n        pyaurorax.data_products module, or at the top level using the\n        pyaurorax.DATA_PRODUCT_TYPE* variables.\n    metadata_filters: list of dictionaries describing metadata keys and\n        values to filter on, defaults to None</p>\n\n<pre><code>    Example:\n\n        [{\n            \"key\": \"nbtrace_region\",\n            \"operator\": \"in\",\n            \"values\": [\"north polar cap\"]\n        }]\nmetadata_filters_logical_operator: the logical operator to use when\n    evaluating metadata filters (either 'AND' or 'OR'), defaults\n    to \"AND\"\nresponse_format: JSON representation of desired data response format\npoll_interval: time in seconds to wait between polling attempts, defaults\n    to pyaurorax.requests.STANDARD_POLLING_SLEEP_TIME\nreturn_immediately: initiate the search and return without waiting for data to\n    be received, defaults to False\nverbose: output poll times and other progress messages, defaults to False\n</code></pre>\n\n<p>Returns:\n    a pyaurorax.data_products.Search object</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">programs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">platforms</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_types</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">data_product_types</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">metadata_filters</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">metadata_filters_logical_operator</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">response_format</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">poll_interval</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">return_immediately</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">data_products</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"o\">.</span><span class=\"n\">Search</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.data_products.upload", "modulename": "pyaurorax.data_products", "qualname": "upload", "kind": "function", "doc": "<p>Upload data product records to AuroraX</p>\n\n<p>Args:\n    identifier: the AuroraX data source ID\n    records: data product records to upload\n    validate_source: validate all records before uploading, defaults to False</p>\n\n<p>Returns:\n    0 for success, raises exception on error</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXMaxRetriesException: max retry error\n    pyaurorax.exceptions.AuroraXUnexpectedContentTypeException: unexpected content error\n    pyaurorax.exceptions.AuroraXUploadException: upload error\n    pyaurorax.exceptions.AuroraXValidationException: data source validation error</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">records</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">data_products</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">data_product</span><span class=\"o\">.</span><span class=\"n\">DataProduct</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">validate_source</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.data_products.delete_urls", "modulename": "pyaurorax.data_products", "qualname": "delete_urls", "kind": "function", "doc": "<p>Delete data products by URL.</p>\n\n<p>The API processes this request asynchronously, so this method will return\nimmediately whether or not the data has already been deleted.</p>\n\n<p>Args:\n    data_source: data source associated with the data product records (note that\n        identifier, program, platform, and instrument_type are required)\n    urls: URLs of data product records to delete</p>\n\n<p>Returns:\n    0 on success</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXMaxRetriesException: max retry error\n    pyaurorax.exceptions.AuroraXUnexpectedContentTypeException: unexpected error\n    pyaurorax.exceptions.AuroraXBadParametersException: invalid parameters entered\n    pyaurorax.exceptions.AuroraXUnauthorizedException: invalid API key for this operation</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_source</span><span class=\"p\">:</span> <span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">sources</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">data_source</span><span class=\"o\">.</span><span class=\"n\">DataSource</span>,</span><span class=\"param\">\t<span class=\"n\">urls</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.data_products.delete", "modulename": "pyaurorax.data_products", "qualname": "delete", "kind": "function", "doc": "<p>Delete data products associated with a data source within a date range.</p>\n\n<p>The API processes this request asynchronously, so this method will return\nimmediately whether or not the data has already been deleted.</p>\n\n<p>Args:\n    data_source: data source associated with the data product records (note that\n        identifier, program, platform, and instrument_type are required)\n    start: timestamp marking beginning of range to delete records for, inclusive\n    end: timestamp marking end of range to delete records for, inclusive\n    data_product_types: specific types of data product to delete, e.g.\n        [\"keogram\", \"movie\"]. If omitted, all data product types will be deleted.</p>\n\n<p>Returns:\n    1 on success</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXMaxRetriesException: max retry error\n    pyaurorax.exceptions.AuroraXUnexpectedContentTypeException: unexpected error\n    pyaurorax.exceptions.AuroraXNotFoundException: source not found\n    pyaurorax.exceptions.AuroraXUnauthorizedException: invalid API key for this operation</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_source</span><span class=\"p\">:</span> <span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">sources</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">data_source</span><span class=\"o\">.</span><span class=\"n\">DataSource</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">data_product_types</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.data_products.describe", "modulename": "pyaurorax.data_products", "qualname": "describe", "kind": "function", "doc": "<p>Describe a data product search as an \"SQL-like\" string</p>\n\n<p>Args:\n    search_obj: the data product search object to describe</p>\n\n<p>Returns:\n    the \"SQL-like\" string describing the data product search object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">search_obj</span><span class=\"p\">:</span> <span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">data_products</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"o\">.</span><span class=\"n\">Search</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.data_products.get_request_url", "modulename": "pyaurorax.data_products", "qualname": "get_request_url", "kind": "function", "doc": "<p>Get the data product search request URL for a given\nrequest ID. This URL can be used for subsequent\npyaurorax.requests function calls. Primarily this method\nfacilitates delving into details about a set of already-submitted\ndata product searches.</p>\n\n<p>Args:\n    request_id: the request identifier</p>\n\n<p>Returns:\n    the request URL</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">request_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.data_products.DataProduct", "modulename": "pyaurorax.data_products", "qualname": "DataProduct", "kind": "class", "doc": "<p>Data product object</p>\n\n<p>Attributes:\n    data_source: data source that the ephemeris record is associated with\n    data_product_type: data product type (\"keogram\", \"movie\", \"summary_plot\")\n    start: starting timestamp for the record (assumed it is in UTC), inclusive\n    end: ending timestamp for the record (assumed it is in UTC), inclusive\n    url: the URL of data product\n    metdata: metadata for this record (arbitrary keys and values)</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "pyaurorax.data_products.DataProduct.to_json_serializable", "modulename": "pyaurorax.data_products", "qualname": "DataProduct.to_json_serializable", "kind": "function", "doc": "<p>Convert object to a JSON-serializable object (ie. translate\ndatetime objects to strings)</p>\n\n<p>Returns:\n    a dictionary object that is JSON-serializable</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.data_products.Search", "modulename": "pyaurorax.data_products", "qualname": "Search", "kind": "class", "doc": "<p>Class representing a data product search</p>\n\n<p>Attributes:\n    start: start timestamp of the search (inclusive)\n    end: end timestamp of the search (inclusive)\n    programs: list of program names to search\n    platforms: list of platform names to search\n    instrument_types: list of instrument types to search\n    data_product_types: list of dictionaries describing data product\n        types to filter on e.g. \"keogram\", defaults to None. Options are in the\n        pyaurorax.data_products module, or at the top level using the\n        pyaurorax.DATA_PRODUCT_TYPE* variables.\n    metadata_filters: list of dictionaries describing metadata keys and\n        values to filter on, defaults to None</p>\n\n<pre><code>    Example:\n\n        [{\n            \"key\": \"nbtrace_region\",\n            \"operator\": \"in\",\n            \"values\": [\"north polar cap\"]\n        }]\nmetadata_filters_logical_operator: the logical operator to use when\n    evaluating metadata filters (either 'AND' or 'OR'), defaults\n    to \"AND\"\nresponse_format: JSON representation of desired data response format\nrequest: AuroraXResponse object returned when the search is executed\nrequest_id: unique ID assigned to the request by the AuroraX API\nrequest_url: unique URL assigned to the request by the AuroraX API\nexecuted: indicates if the search has been executed/started\ncompleted: indicates if the search has finished\ndata_url: the URL where data is accessed\nquery: the query for this request as JSON\nstatus: the status of the query\ndata: the data product records found\nlogs: all log messages outputed by the AuroraX API for this request\n</code></pre>\n"}, {"fullname": "pyaurorax.data_products.Search.__init__", "modulename": "pyaurorax.data_products", "qualname": "Search.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">programs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">platforms</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_types</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">data_product_types</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">metadata_filters</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">metadata_filters_logical_operator</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;AND&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">response_format</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pyaurorax.data_products.Search.query", "modulename": "pyaurorax.data_products", "qualname": "Search.query", "kind": "variable", "doc": "<p>Property for the query value</p>\n"}, {"fullname": "pyaurorax.data_products.Search.execute", "modulename": "pyaurorax.data_products", "qualname": "Search.execute", "kind": "function", "doc": "<p>Initiate a data product search request</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.data_products.Search.update_status", "modulename": "pyaurorax.data_products", "qualname": "Search.update_status", "kind": "function", "doc": "<p>Update the status of this data product search request</p>\n\n<p>Args:\n    status: the previously-retrieved status of this request (include\n        to avoid requesting it from the API again), defaults to None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">status</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.data_products.Search.check_for_data", "modulename": "pyaurorax.data_products", "qualname": "Search.check_for_data", "kind": "function", "doc": "<p>Check to see if data is available for this data product\nsearch request</p>\n\n<p>Returns:\n    True if data is available, else False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.data_products.Search.get_data", "modulename": "pyaurorax.data_products", "qualname": "Search.get_data", "kind": "function", "doc": "<p>Retrieve the data available for this data product search request</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.data_products.Search.wait", "modulename": "pyaurorax.data_products", "qualname": "Search.wait", "kind": "function", "doc": "<p>Block and wait for the request to complete and data is available\nfor retrieval</p>\n\n<p>Args:\n    poll_interval: time in seconds to wait between polling attempts,\n        defaults to pyaurorax.requests.STANDARD_POLLING_SLEEP_TIME\n    verbose: output poll times and other progress messages, defaults\n        to False</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">poll_interval</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.data_products.Search.cancel", "modulename": "pyaurorax.data_products", "qualname": "Search.cancel", "kind": "function", "doc": "<p>Cancel the data product search request</p>\n\n<p>This method returns immediately by default since the API processes\nthis request asynchronously. If you would prefer to wait for it\nto be completed, set the 'wait' parameter to True. You can adjust\nthe polling time using the 'poll_interval' parameter.</p>\n\n<p>Args:\n    wait: wait until the cancellation request has been\n        completed (may wait for several minutes)\n    poll_interval: seconds to wait between polling\n        calls, defaults to STANDARD_POLLING_SLEEP_TIME.\n    verbose: output poll times and other progress messages, defaults\n        to False</p>\n\n<p>Returns:\n    1 on success</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXUnexpectedContentTypeException: unexpected error\n    pyaurorax.exceptions.AuroraXUnauthorizedException: invalid API key for this operation</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">wait</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">poll_interval</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.ephemeris", "modulename": "pyaurorax.ephemeris", "kind": "module", "doc": "<p>The ephemeris module is used to search and upload ephemeris records\nwithin AuroraX.</p>\n\n<p>Note that all functions and classes from submodules are all imported\nat this level of the ephemeris module. They can be referenced from\nhere instead of digging in deeper to the submodules.</p>\n"}, {"fullname": "pyaurorax.ephemeris.search", "modulename": "pyaurorax.ephemeris", "qualname": "search", "kind": "function", "doc": "<p>Search for ephemeris records</p>\n\n<p>By default, this function will block and wait until the request completes and\nall data is downloaded. If you don't want to wait, set the 'return_immediately`\nvalue to True. The Search object will be returned right after the search has been\nstarted, and you can use the helper functions as part of that object to get the\ndata when it's done.</p>\n\n<p>Note: At least one search criteria from programs, platforms, or\ninstrument_types, must be specified.</p>\n\n<p>Args:\n    start: start timestamp of the search (inclusive)\n    end: end timestamp of the search (inclusive)\n    programs: list of programs to search through, defaults to None\n    platforms: list of platforms to search through, defaults to None\n    instrument_types: list of instrument types to search through, defaults to None\n    metadata_filters: list of dictionaries describing metadata keys and\n        values to filter on, defaults to None</p>\n\n<pre><code>    Example:\n\n        [{\n            \"key\": \"nbtrace_region\",\n            \"operator\": \"in\",\n            \"values\": [\"north polar cap\"]\n        }]\nmetadata_filters_logical_operator: the logical operator to use when\n    evaluating metadata filters (either 'AND' or 'OR'), defaults\n    to \"AND\"\nresponse_format: JSON representation of desired data response format\npoll_interval: time in seconds to wait between polling attempts, defaults\n    to pyaurorax.requests.STANDARD_POLLING_SLEEP_TIME\nreturn_immediately: initiate the search and return without waiting for data to\n    be received, defaults to False\nverbose: output poll times and other progress messages, defaults to False\n</code></pre>\n\n<p>Returns:\n    A pyaurorax.ephemeris.Search object</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXBadParametersException: missing parameters</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">programs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">platforms</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_types</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">metadata_filters</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">metadata_filters_logical_operator</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">response_format</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">poll_interval</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">return_immediately</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">ephemeris</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"o\">.</span><span class=\"n\">Search</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.ephemeris.upload", "modulename": "pyaurorax.ephemeris", "qualname": "upload", "kind": "function", "doc": "<p>Upload ephemeris records to AuroraX</p>\n\n<p>Args:\n    identifier: AuroraX data source ID\n    records: ephemeris records to upload\n    validate_source: validate all records before uploading, defaults to False</p>\n\n<p>Returns:\n    0 for success, raises exception on error</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXMaxRetriesException: max retry error\n    pyaurorax.exceptions.AuroraXUnexpectedContentTypeException: unexpected content error\n    pyaurorax.exceptions.AuroraXUploadException: upload error\n    pyaurorax.exceptions.AuroraXValidationException: data source validation error</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">records</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">ephemeris</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">ephemeris</span><span class=\"o\">.</span><span class=\"n\">Ephemeris</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">validate_source</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.ephemeris.delete", "modulename": "pyaurorax.ephemeris", "qualname": "delete", "kind": "function", "doc": "<p>Delete ephemeris records between a timeframe.</p>\n\n<p>The API processes this request asynchronously, so this method will return\nimmediately whether or not the data has already been deleted.</p>\n\n<p>Args:\n    data_source: data source associated with the data product records (note that\n        identifier, program, platform, and instrument_type are required)\n    start: timestamp marking beginning of range to delete records for, inclusive\n    end: timestamp marking end of range to delete records for, inclusive</p>\n\n<p>Returns:\n    0 on success</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXMaxRetriesException: max retry error\n    pyaurorax.exceptions.AuroraXUnexpectedContentTypeException: unexpected error\n    pyaurorax.exceptions.AuroraXNotFoundException: source not found\n    pyaurorax.exceptions.AuroraXUnauthorizedException: invalid API key for this operation\n    pyaurorax.exceptions.AuroraXBadParametersException: missing parameters</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_source</span><span class=\"p\">:</span> <span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">sources</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">data_source</span><span class=\"o\">.</span><span class=\"n\">DataSource</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.ephemeris.describe", "modulename": "pyaurorax.ephemeris", "qualname": "describe", "kind": "function", "doc": "<p>Describe an ephemeris search as a \"SQL-like\" string</p>\n\n<p>Args:\n    search_obj: the ephemeris search object to describe</p>\n\n<p>Returns:\n    the \"SQL-like\" string describing the ephemeris search object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">search_obj</span><span class=\"p\">:</span> <span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">ephemeris</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"o\">.</span><span class=\"n\">Search</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.ephemeris.get_request_url", "modulename": "pyaurorax.ephemeris", "qualname": "get_request_url", "kind": "function", "doc": "<p>Get the ephemeris search request URL for a given\nrequest ID. This URL can be used for subsequent\npyaurorax.requests function calls. Primarily this method\nfacilitates delving into details about a set of already-submitted\nephemeris searches.</p>\n\n<p>Args:\n    request_id: the request identifier</p>\n\n<p>Returns:\n    the request URL</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">request_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.ephemeris.Ephemeris", "modulename": "pyaurorax.ephemeris", "qualname": "Ephemeris", "kind": "class", "doc": "<p>Ephemeris object</p>\n\n<p>Attributes:\n    data_source: data source that the ephemeris record is associated with\n    epoch: timestamp for the record (assumed it is in UTC)\n    location_geo: Location object containing geographic latitude and longitude\n    location_gsm: Location object containing GSM latitude and longitude (leave\n        empty for data sources with a type of 'ground')\n    nbtrace: Location object with north B-trace geographic latitude and longitude\n    sbtrace: Location object with south B-trace geographic latitude and longitude\n    metadata: metadata for this record (arbitrary keys and values)</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "pyaurorax.ephemeris.Ephemeris.to_json_serializable", "modulename": "pyaurorax.ephemeris", "qualname": "Ephemeris.to_json_serializable", "kind": "function", "doc": "<p>Convert object to a JSON-serializable object (ie. translate\ndatetime objects to strings)</p>\n\n<p>Returns:\n    a dictionary object that is JSON-serializable</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.ephemeris.Search", "modulename": "pyaurorax.ephemeris", "qualname": "Search", "kind": "class", "doc": "<p>Class representing an ephemeris search</p>\n\n<p>Note: At least one search criteria from programs, platforms, or instrument_types\nmust be specified.</p>\n\n<p>Args:\n    start: start timestamp of the search (inclusive)\n    end: end timestamp of the search (inclusive)\n    programs: list of programs to search through, defaults to None\n    platforms: list of platforms to search through, defaults to None\n    instrument_types: list of instrument types to search through, defaults to None\n    metadata_filters: list of dictionaries describing metadata keys and\n        values to filter on, defaults to None</p>\n\n<pre><code>    e.g. {\n        \"key\": \"string\",\n        \"operator\": \"=\",\n        \"values\": [\n            \"string\"\n        ]\n    }\nmetadata_filters_logical_operator: the logical operator to use when\n    evaluating metadata filters (either 'AND' or 'OR'), defaults\n    to \"AND\"\nresponse_format: JSON representation of desired data response format\nrequest: AuroraXResponse object returned when the search is executed\nrequest_id: unique ID assigned to the request by the AuroraX API\nrequest_url: unique URL assigned to the request by the AuroraX API\nexecuted: indicates if the search has been executed/started\ncompleted: indicates if the search has finished\ndata_url: the URL where data is accessed\nquery: the query for this request as JSON\nstatus: the status of the query\ndata: the ephemeris records found\nlogs: all log messages outputted by the AuroraX API for this request\n</code></pre>\n"}, {"fullname": "pyaurorax.ephemeris.Search.__init__", "modulename": "pyaurorax.ephemeris", "qualname": "Search.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">programs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">platforms</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_types</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">metadata_filters</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">metadata_filters_logical_operator</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;AND&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">response_format</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pyaurorax.ephemeris.Search.query", "modulename": "pyaurorax.ephemeris", "qualname": "Search.query", "kind": "variable", "doc": "<p>Property for the query value</p>\n"}, {"fullname": "pyaurorax.ephemeris.Search.execute", "modulename": "pyaurorax.ephemeris", "qualname": "Search.execute", "kind": "function", "doc": "<p>Initiate ephemeris search request</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXBadParametersException: missing parameters</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.ephemeris.Search.update_status", "modulename": "pyaurorax.ephemeris", "qualname": "Search.update_status", "kind": "function", "doc": "<p>Update the status of this ephemeris search request</p>\n\n<p>Args:\n    status: the previously-retrieved status of this request (include\n        to avoid requesting it from the API again), defaults to None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">status</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.ephemeris.Search.check_for_data", "modulename": "pyaurorax.ephemeris", "qualname": "Search.check_for_data", "kind": "function", "doc": "<p>Check to see if data is available for this ephemeris\nsearch request</p>\n\n<p>Returns:\n    True if data is available, else False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.ephemeris.Search.get_data", "modulename": "pyaurorax.ephemeris", "qualname": "Search.get_data", "kind": "function", "doc": "<p>Retrieve the data available for this ephemeris search\nrequest</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.ephemeris.Search.wait", "modulename": "pyaurorax.ephemeris", "qualname": "Search.wait", "kind": "function", "doc": "<p>Block and wait for the request to complete and data is\navailable for retrieval</p>\n\n<p>Args:\n    poll_interval: time in seconds to wait between polling attempts,\n        defaults to pyaurorax.requests.STANDARD_POLLING_SLEEP_TIME\n    verbose: output poll times and other progress messages, defaults\n        to False</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">poll_interval</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.ephemeris.Search.cancel", "modulename": "pyaurorax.ephemeris", "qualname": "Search.cancel", "kind": "function", "doc": "<p>Cancel the ephemeris search request</p>\n\n<p>This method returns immediately by default since the API processes\nthis request asynchronously. If you would prefer to wait for it\nto be completed, set the 'wait' parameter to True. You can adjust\nthe polling time using the 'poll_interval' parameter.</p>\n\n<p>Args:\n    wait: wait until the cancellation request has been\n        completed (may wait for several minutes)\n    poll_interval: seconds to wait between polling\n        calls, defaults to STANDARD_POLLING_SLEEP_TIME.\n    verbose: output poll times and other progress messages, defaults\n        to False</p>\n\n<p>Returns:\n    1 on success</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXUnexpectedContentTypeException: unexpected error\n    pyaurorax.exceptions.AuroraXUnauthorizedException: invalid API key for this operation</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">wait</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">poll_interval</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.exceptions", "modulename": "pyaurorax.exceptions", "kind": "module", "doc": "<p>The exceptions module contains exceptions unique to the PyAuroraX library</p>\n"}, {"fullname": "pyaurorax.exceptions.AuroraXException", "modulename": "pyaurorax.exceptions", "qualname": "AuroraXException", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "pyaurorax.exceptions.AuroraXException.__init__", "modulename": "pyaurorax.exceptions", "qualname": "AuroraXException.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pyaurorax.exceptions.AuroraXNotFoundException", "modulename": "pyaurorax.exceptions", "qualname": "AuroraXNotFoundException", "kind": "class", "doc": "<p>The AuroraX record was not found</p>\n", "bases": "AuroraXException"}, {"fullname": "pyaurorax.exceptions.AuroraXDuplicateException", "modulename": "pyaurorax.exceptions", "qualname": "AuroraXDuplicateException", "kind": "class", "doc": "<p>A duplicate record already exists</p>\n", "bases": "AuroraXException"}, {"fullname": "pyaurorax.exceptions.AuroraXValidationException", "modulename": "pyaurorax.exceptions", "qualname": "AuroraXValidationException", "kind": "class", "doc": "<p>Validation of data failed</p>\n", "bases": "AuroraXException"}, {"fullname": "pyaurorax.exceptions.AuroraXUnexpectedContentTypeException", "modulename": "pyaurorax.exceptions", "qualname": "AuroraXUnexpectedContentTypeException", "kind": "class", "doc": "<p>The API responded with an unexpected content type</p>\n", "bases": "AuroraXException"}, {"fullname": "pyaurorax.exceptions.AuroraXMaxRetriesException", "modulename": "pyaurorax.exceptions", "qualname": "AuroraXMaxRetriesException", "kind": "class", "doc": "<p>The maximum number of retries for the request has been reached</p>\n", "bases": "AuroraXException"}, {"fullname": "pyaurorax.exceptions.AuroraXBadParametersException", "modulename": "pyaurorax.exceptions", "qualname": "AuroraXBadParametersException", "kind": "class", "doc": "<p>Bad parameters were given in the request</p>\n", "bases": "AuroraXException"}, {"fullname": "pyaurorax.exceptions.AuroraXUnauthorizedException", "modulename": "pyaurorax.exceptions", "qualname": "AuroraXUnauthorizedException", "kind": "class", "doc": "<p>A privileged operation was attempted without authorization</p>\n", "bases": "AuroraXException"}, {"fullname": "pyaurorax.exceptions.AuroraXConflictException", "modulename": "pyaurorax.exceptions", "qualname": "AuroraXConflictException", "kind": "class", "doc": "<p>A conflict occurred while modifying records</p>\n", "bases": "AuroraXException"}, {"fullname": "pyaurorax.exceptions.AuroraXUploadException", "modulename": "pyaurorax.exceptions", "qualname": "AuroraXUploadException", "kind": "class", "doc": "<p>Error occurred during upload operation</p>\n", "bases": "AuroraXException"}, {"fullname": "pyaurorax.exceptions.AuroraXUnexpectedEmptyResponse", "modulename": "pyaurorax.exceptions", "qualname": "AuroraXUnexpectedEmptyResponse", "kind": "class", "doc": "<p>An empty response was received when it wasn't expected</p>\n", "bases": "AuroraXException"}, {"fullname": "pyaurorax.exceptions.AuroraXDataRetrievalException", "modulename": "pyaurorax.exceptions", "qualname": "AuroraXDataRetrievalException", "kind": "class", "doc": "<p>Error occurred while retrieving search data</p>\n", "bases": "AuroraXException"}, {"fullname": "pyaurorax.exceptions.AuroraXTimeoutException", "modulename": "pyaurorax.exceptions", "qualname": "AuroraXTimeoutException", "kind": "class", "doc": "<p>A timeout was reached while communicating with the AuroraX API</p>\n", "bases": "AuroraXException"}, {"fullname": "pyaurorax.exceptions.AuroraXSearchException", "modulename": "pyaurorax.exceptions", "qualname": "AuroraXSearchException", "kind": "class", "doc": "<p>An error occured in the API while performing a search</p>\n", "bases": "AuroraXException"}, {"fullname": "pyaurorax.location", "modulename": "pyaurorax.location", "kind": "module", "doc": "<p>The Location module provides a class used throughout the PyAuroraX\nlibrary to manage lat/lon positions of different things.</p>\n"}, {"fullname": "pyaurorax.location.Location", "modulename": "pyaurorax.location", "qualname": "Location", "kind": "class", "doc": "<p>Class representing an AuroraX location (ie. geographic coordinates,\nGSM coordinates, northern/southern B-trace magnetic footprints)</p>\n\n<p>The numbers are in decimal degrees format and range from -90 to 90\nfor latitude and -180 to 180 for longitude.</p>\n\n<p>Attributes:\n    lat: latitude value\n    lon: longitude value</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "pyaurorax.metadata", "modulename": "pyaurorax.metadata", "kind": "module", "doc": "<p>AuroraX metadata schemas describe the intended structure of metadata stored in\nephemeris and data product records. This module provides functions for\ninteracting with the schemas.</p>\n\n<p>Note that all functions and classes from submodules are all imported\nat this level of the metadata module. They can be referenced from\nhere instead of digging in deeper to the submodules.</p>\n"}, {"fullname": "pyaurorax.metadata.get_data_products_schema", "modulename": "pyaurorax.metadata", "qualname": "get_data_products_schema", "kind": "function", "doc": "<p>Retrieve the data products metadata schema for a data source</p>\n\n<p>Args:\n    identifier: the AuroraX data source ID</p>\n\n<p>Returns:\n    the data products metadata schema for the data source</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.metadata.get_ephemeris_schema", "modulename": "pyaurorax.metadata", "qualname": "get_ephemeris_schema", "kind": "function", "doc": "<p>Retrieve the ephemeris metadata schema for a data source</p>\n\n<p>Args:\n    identifier: the AuroraX data source ID</p>\n\n<p>Returns:\n    the ephemeris metadata schema for the data source</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.metadata.validate", "modulename": "pyaurorax.metadata", "qualname": "validate", "kind": "function", "doc": "<p>Validate a metadata record against a schema. This checks that the\nkey names match and there aren't fewer or more keys than expected.</p>\n\n<p>Args:\n    schema: the metadata schema to validate against\n    record: metadata record to validate</p>\n\n<p>Returns:\n    True if the metadata record is valid, False if it is not</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">schema</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">record</span><span class=\"p\">:</span> <span class=\"n\">Dict</span>, </span><span class=\"param\"><span class=\"n\">quiet</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.requests", "modulename": "pyaurorax.requests", "kind": "module", "doc": "<p>The requests module contains helper methods for retrieving data from\nan AuroraX request.</p>\n\n<p>Note that all functions and classes from submodules are all imported\nat this level of the requests module. They can be referenced from\nhere instead of digging in deeper to the submodules.</p>\n"}, {"fullname": "pyaurorax.requests.get_data", "modulename": "pyaurorax.requests", "qualname": "get_data", "kind": "function", "doc": "<p>Retrieve the data for a request</p>\n\n<p>Args:\n    data_url: the URL for the data of a request,\n    response_format: the response format to send as post data, defaults\n        to None\n    skip_serializing: skip any object serializing, defaults to False</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXDataRetrievalException: error retrieving data</p>\n\n<p>Returns:\n    the data for this request</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">response_format</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">skip_serializing</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.requests.get_logs", "modulename": "pyaurorax.requests", "qualname": "get_logs", "kind": "function", "doc": "<p>Retrieve the logs for a request</p>\n\n<p>Args:\n    request_url: the URL of the request information</p>\n\n<p>Returns:\n    the log messages for the request</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">request_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.requests.get_status", "modulename": "pyaurorax.requests", "qualname": "get_status", "kind": "function", "doc": "<p>Retrieve the status of a request</p>\n\n<p>Args:\n    request_url: the URL of the request information</p>\n\n<p>Returns:\n    the status information for the request</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">request_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.requests.wait_for_data", "modulename": "pyaurorax.requests", "qualname": "wait_for_data", "kind": "function", "doc": "<p>Block and wait for the data to be made available for a request</p>\n\n<p>Args:\n    request_url: the URL of the request information\n    poll_interval: seconds to wait between polling calls, defaults\n        to STANDARD_POLLING_SLEEP_TIME\n    verbose: output poll times and other progress messages, defaults to False</p>\n\n<p>Returns:\n    the status information for the request</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">request_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">poll_interval</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.requests.cancel", "modulename": "pyaurorax.requests", "qualname": "cancel", "kind": "function", "doc": "<p>Cancel the request at the given URL.</p>\n\n<p>This method returns immediately by default since the API processes\nthis request asynchronously. If you would prefer to wait for it\nto be completed, set the 'wait' parameter to True. You can adjust\nthe polling time using the 'poll_interval' parameter.</p>\n\n<p>Args:\n    request_url: the URL string of the request to be canceled\n    wait: set to True to block until the cancellation request\n        has been completed (may wait for several minutes)\n    poll_interval: seconds to wait between polling\n        calls, defaults to STANDARD_POLLING_SLEEP_TIME.\n    verbose: if True then output poll times and other\n        progress, defaults to False</p>\n\n<p>Returns:\n    0 on success</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXUnexpectedContentTypeException: unexpected error\n    pyaurorax.exceptions.AuroraXUnauthorizedException: invalid API key for this operation</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">request_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">wait</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">poll_interval</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.requests.list", "modulename": "pyaurorax.requests", "qualname": "list", "kind": "function", "doc": "<p>Retrieve a list of search requests matching certain criteria.  Administrators only.</p>\n\n<p>Args:\n    search_type: the type of search request, valid values are 'conjunction',\n        'ephemeris', or 'data_product'. Exclusion of value will return all\n        search requests of any type, defaults to None\n    active: return searches that are currently active or not, exclude for\n        both, defaults to None\n    start: start timestamp for narrowing down search timeframes, defaults to None\n    end: end timestamp for narrowing down search timeframes, defaults to None\n    file_size: filter by result file size, measured in KB, defaults to None\n    result_count: filter by result count, defaults to None\n    query_duration: filter by query duration, measured in milliseconds, defaults\n        to None\n    error_condition: filter by if an error occurred or not, exclude for both,\n        defaults to None</p>\n\n<p>Returns:\n    list of matching search requests</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXUnauthorizedException: invalid API key for this operation</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">search_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">active</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">file_size</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">result_count</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">query_duration</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">error_condition</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.requests.delete", "modulename": "pyaurorax.requests", "qualname": "delete", "kind": "function", "doc": "<p>Entirely remove a search request from the AuroraX\ndatabase. Administrators only.</p>\n\n<p>Args:\n    request_id: search request UUID</p>\n\n<p>Returns:\n    0 on success, raises error on failure</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXNotFoundException: data source not found</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">request_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.sources", "modulename": "pyaurorax.sources", "kind": "module", "doc": "<p>AuroraX data sources are unique instruments that produce ephemeris or\ndata product records.</p>\n\n<p>Note that all functions and classes from submodules are all imported\nat this level of the sources module. They can be referenced from\nhere instead of digging in deeper to the submodules.</p>\n"}, {"fullname": "pyaurorax.sources.FORMAT_BASIC_INFO", "modulename": "pyaurorax.sources", "qualname": "FORMAT_BASIC_INFO", "kind": "variable", "doc": "<p>Data sources are returned with the basic information: identifier,\nprogram, platform, instrument type, source type, and display name</p>\n", "annotation": ": str", "default_value": "&#x27;basic_info&#x27;"}, {"fullname": "pyaurorax.sources.FORMAT_BASIC_INFO_WITH_METADATA", "modulename": "pyaurorax.sources", "qualname": "FORMAT_BASIC_INFO_WITH_METADATA", "kind": "variable", "doc": "<p>Data sources are returned with the basic information, plus the metadata</p>\n", "annotation": ": str", "default_value": "&#x27;with_metadata&#x27;"}, {"fullname": "pyaurorax.sources.FORMAT_FULL_RECORD", "modulename": "pyaurorax.sources", "qualname": "FORMAT_FULL_RECORD", "kind": "variable", "doc": "<p>Data sources are returned with all information about them. This\nincludes at least: identifier, program, platform, instrument type,\nsource type, display name, metadata, owner, maintainers, the\nephemeris metadata schema, and the data products meatadata schema.</p>\n", "annotation": ": str", "default_value": "&#x27;full_record&#x27;"}, {"fullname": "pyaurorax.sources.FORMAT_IDENTIFIER_ONLY", "modulename": "pyaurorax.sources", "qualname": "FORMAT_IDENTIFIER_ONLY", "kind": "variable", "doc": "<p>Data sources are returned with only the identifier</p>\n", "annotation": ": str", "default_value": "&#x27;identifier_only&#x27;"}, {"fullname": "pyaurorax.sources.FORMAT_DEFAULT", "modulename": "pyaurorax.sources", "qualname": "FORMAT_DEFAULT", "kind": "variable", "doc": "<p>Default data source format (basic info)</p>\n", "annotation": ": str", "default_value": "&#x27;basic_info&#x27;"}, {"fullname": "pyaurorax.sources.SOURCE_TYPE_NOT_APPLICABLE", "modulename": "pyaurorax.sources", "qualname": "SOURCE_TYPE_NOT_APPLICABLE", "kind": "variable", "doc": "<p>Data source 'source_type' category for a specially-curated event list</p>\n", "annotation": ": str", "default_value": "&#x27;not_applicable&#x27;"}, {"fullname": "pyaurorax.sources.SOURCE_TYPE_EVENT_LIST", "modulename": "pyaurorax.sources", "qualname": "SOURCE_TYPE_EVENT_LIST", "kind": "variable", "doc": "<p>Data source 'source_type' category for a specially-curated event list</p>\n", "annotation": ": str", "default_value": "&#x27;event_list&#x27;"}, {"fullname": "pyaurorax.sources.SOURCE_TYPE_GROUND", "modulename": "pyaurorax.sources", "qualname": "SOURCE_TYPE_GROUND", "kind": "variable", "doc": "<p>Data source 'source_type' category for a ground instrument</p>\n", "annotation": ": str", "default_value": "&#x27;ground&#x27;"}, {"fullname": "pyaurorax.sources.SOURCE_TYPE_HEO", "modulename": "pyaurorax.sources", "qualname": "SOURCE_TYPE_HEO", "kind": "variable", "doc": "<p>Data source 'source_type' category for a highly-elliptical orbiting satellite</p>\n", "annotation": ": str", "default_value": "&#x27;heo&#x27;"}, {"fullname": "pyaurorax.sources.SOURCE_TYPE_LEO", "modulename": "pyaurorax.sources", "qualname": "SOURCE_TYPE_LEO", "kind": "variable", "doc": "<p>Data source 'source_type' category for a low-earth orbiting satellite</p>\n", "annotation": ": str", "default_value": "&#x27;leo&#x27;"}, {"fullname": "pyaurorax.sources.SOURCE_TYPE_LUNAR", "modulename": "pyaurorax.sources", "qualname": "SOURCE_TYPE_LUNAR", "kind": "variable", "doc": "<p>Data source 'source_type' category for a lunar orbiting satellite</p>\n", "annotation": ": str", "default_value": "&#x27;lunar&#x27;"}, {"fullname": "pyaurorax.sources.list", "modulename": "pyaurorax.sources", "qualname": "list", "kind": "function", "doc": "<p>Retrieve all data source records (using params to filter as desired)</p>\n\n<p>Args:\n    program: the program to filter for, defaults to None\n    platform: the platform to filter for, defaults to None\n    instrument_type: the instrument type to filter for, defaults to None\n    source_type: the data source type to filter for, defaults to None.\n        Options are in the pyaurorax.sources module, or at the top level\n        using the pyaurorax.SOURCE_TYPE_* variables.\n    owner: the owner's email address to filter for, defaults to None\n    format: the format of the data sources returned, defaults to \"full_record\".\n        Other options are in the pyaurorax.sources module, or at the top level\n        using the pyaurorax.FORMAT_* variables.\n    order: the value to order results by (identifier, program, platform,\n        instrument_type, display_name, owner), defaults to \"identifier\"\n    include_stats: include additional stats information about the data source (note:\n        slower response time since an additional request must be done for each\n        data source), defaults to False</p>\n\n<p>Returns:\n    any data sources matching the requested parameters</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXMaxRetriesException: max retry error\n    pyaurorax.exceptions.AuroraXUnexpectedContentTypeException: unexpected error</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">program</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">platform</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">source_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">owner</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;full_record&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">order</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;identifier&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">include_stats</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">sources</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">data_source</span><span class=\"o\">.</span><span class=\"n\">DataSource</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.sources.search", "modulename": "pyaurorax.sources", "qualname": "search", "kind": "function", "doc": "<p>Search for data source records (using params to filter as desired)</p>\n\n<p>This is very similar to the 'list' function, however multiple programs,\nplatforms, and/or instrument types can be supplied to this function. The\n'list' function only supports single values for those parameters.</p>\n\n<p>Args:\n    programs: the programs to filter for, defaults to []\n    platforms: the platforms to filter for, defaults to []\n    instrument_type: the instrument types to filter for, defaults to []\n    format: the format of the data sources returned, defaults to \"full_record\".\n        Other options are in the pyaurorax.sources module, or at the top level\n        using the pyaurorax.FORMAT_* variables.\n    order: the value to order results by (identifier, program, platform,\n        instrument_type, display_name), defaults to \"identifier\"\n    include_stats: include additional stats information about the data source (note:\n        slower response time since an additional request must be done for each\n        data source), defaults to False</p>\n\n<p>Returns:\n    any data sources matching the requested parameters</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXMaxRetriesException: max retry error\n    pyaurorax.exceptions.AuroraXUnexpectedContentTypeException: unexpected error</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">programs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">platforms</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_types</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;full_record&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">order</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;identifier&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">include_stats</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">sources</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">data_source</span><span class=\"o\">.</span><span class=\"n\">DataSource</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.sources.get", "modulename": "pyaurorax.sources", "qualname": "get", "kind": "function", "doc": "<p>Retrieve a specific data source record</p>\n\n<p>Args:\n    program: the program name\n    platform: the platform name\n    instrument_type: the instrument type name\n    format: the format of the data sources returned, defaults to \"full_record\".\n        Other options are in the pyaurorax.sources module, or at the top level\n        using the pyaurorax.FORMAT_* variables.\n    include_stats: include additional stats information about the data source (note:\n        slower response time since an additional request must be done for each\n        data source), defaults to False</p>\n\n<p>Returns:\n    the data source matching the requested parameters</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXMaxRetriesException: max retry error\n    pyaurorax.exceptions.AuroraXUnexpectedContentTypeException: unexpected error\n    pyaurorax.exceptions.AuroraXNotFoundException: source not found</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">program</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">platform</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;full_record&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">include_stats</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">sources</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">data_source</span><span class=\"o\">.</span><span class=\"n\">DataSource</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.sources.get_using_filters", "modulename": "pyaurorax.sources", "qualname": "get_using_filters", "kind": "function", "doc": "<p>Retrieve all data source records matching a filter</p>\n\n<p>Args:\n    program: the program to filter for, defaults to None\n    platform: the platform to filter for, defaults to None\n    instrument_type: the instrument type to filter for, defaults to None\n    source_type: the data source type to filter for, defaults to None.\n        Options are in the pyaurorax.sources module, or at the top level\n        using the pyaurorax.SOURCE_TYPE_* variables.\n    owner: the owner's email address to filter for, defaults to None\n    format: the format of the data sources returned, defaults to \"full_record\".\n        Other options are in the pyaurorax.sources module, or at the top level\n        using the pyaurorax.FORMAT_* variables.\n    order: the value to order results by (identifier, program, platform,\n        instrument_type, display_name, owner), defaults to \"identifier\"\n    include_stats: include additional stats information about the data source (note:\n        slower response time since an additional request must be done for each\n        data source), defaults to False</p>\n\n<p>Returns:\n    any data sources matching the requested parameters</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXMaxRetriesException: max retry error\n    pyaurorax.exceptions.AuroraXUnexpectedContentTypeException: unexpected error</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">program</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">platform</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">source_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">owner</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;full_record&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">order</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;identifier&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">include_stats</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">sources</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">data_source</span><span class=\"o\">.</span><span class=\"n\">DataSource</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.sources.get_using_identifier", "modulename": "pyaurorax.sources", "qualname": "get_using_identifier", "kind": "function", "doc": "<p>Retrieve data source record matching an identifier</p>\n\n<p>Args:\n    identifier: the AuroraX unique ID for the data source\n    format: the format of the data sources returned, defaults to \"full_record\".\n        Other options are in the pyaurorax.sources module, or at the top level\n        using the pyaurorax.FORMAT_* variables.\n    include_stats: include additional stats information about the data source (note:\n        slower response time since an additional request must be done for each\n        data source), defaults to False</p>\n\n<p>Returns:\n    the data source matching the identifier</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXMaxRetriesException: max retry error\n    pyaurorax.exceptions.AuroraXUnexpectedContentTypeException: unexpected error</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;full_record&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">include_stats</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">sources</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">data_source</span><span class=\"o\">.</span><span class=\"n\">DataSource</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.sources.get_stats", "modulename": "pyaurorax.sources", "qualname": "get_stats", "kind": "function", "doc": "<p>Retrieve statistics for a data source</p>\n\n<p>Args:\n    identifier: the AuroraX unique ID for the data source\n    format: the format of the data sources returned, defaults to \"full_record\".\n        Other options are in the pyaurorax.sources module, or at the top level\n        using the pyaurorax.FORMAT_* variables.\n    slow: retrieve the stats using a slower, but more accurate method, defaults to False</p>\n\n<p>Returns:\n    the data source including additional stats information about it</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXMaxRetriesException: max retry error\n    pyaurorax.exceptions.AuroraXNotFoundException: data source not found\n    pyaurorax.exceptions.AuroraXUnexpectedContentTypeException: unexpected error</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;full_record&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">slow</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">sources</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">data_source</span><span class=\"o\">.</span><span class=\"n\">DataSource</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.sources.add", "modulename": "pyaurorax.sources", "qualname": "add", "kind": "function", "doc": "<p>Add a new data source to AuroraX</p>\n\n<p>Args:\n    data_source: the data source to add (note: it must be a fully-defined\n        DataSource object)</p>\n\n<p>Returns:\n    the newly created data source</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXMaxRetriesException: max retry error\n    pyaurorax.exceptions.AuroraXUnexpectedContentTypeException: unexpected error\n    pyaurorax.exceptions.AuroraXDuplicateException: duplicate data source, already exists</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_source</span><span class=\"p\">:</span> <span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">sources</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">data_source</span><span class=\"o\">.</span><span class=\"n\">DataSource</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">sources</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">data_source</span><span class=\"o\">.</span><span class=\"n\">DataSource</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.sources.delete", "modulename": "pyaurorax.sources", "qualname": "delete", "kind": "function", "doc": "<p>Delete a data source from AuroraX</p>\n\n<p>Args:\n    identifier: the AuroraX unique ID for the data source</p>\n\n<p>Returns:\n    0 on success, raises error if an issue was encountered</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXMaxRetriesException: max retry error\n    pyaurorax.exceptions.AuroraXUnexpectedContentTypeException: unexpected error\n    pyaurorax.exceptions.AuroraXNotFoundException: data source not found\n    pyaurorax.exceptions.AuroraXConflictException: conflict of some type</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.sources.update", "modulename": "pyaurorax.sources", "qualname": "update", "kind": "function", "doc": "<p>Update a data source in AuroraX</p>\n\n<p>This operation will fully replace the data source with the\ndata_source argument passed in. Be sure that the data_source\nobject is complete. If the data source is missing the value\nfor identifier, program, platform, instrument type, source\ntype, or display name, the update will fail and raise a\nAuroraXBadParametersException exception.</p>\n\n<p>Args:\n    data_source: the data source to update (note: it must be a fully-defined\n        DataSource object with the values set to what you want AuroraX to\n        update it to)</p>\n\n<p>Returns:\n    the updated data source</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXMaxRetriesException: max retry error\n    pyaurorax.exceptions.AuroraXUnexpectedContentTypeException: unexpected error\n    pyaurorax.exceptions.AuroraXNotFoundException: data source not found\n    pyaurorax.exceptions.AuroraXBadParametersException: missing parameters</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_source</span><span class=\"p\">:</span> <span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">sources</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">data_source</span><span class=\"o\">.</span><span class=\"n\">DataSource</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">sources</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">data_source</span><span class=\"o\">.</span><span class=\"n\">DataSource</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.sources.update_partial", "modulename": "pyaurorax.sources", "qualname": "update_partial", "kind": "function", "doc": "<p>Partially update a data source in AuroraX (omitted fields are ignored)</p>\n\n<p>Args:\n    identifier: the AuroraX unique ID for the data source, defaults to None\n    program: the new program for the data source, defaults to None\n    platform: the new platform for the data source, defaults to None\n    instrument_type: the new instrument type for the data source, defaults to None\n    source_type: the new source type for the data source, defaults to None. Options\n        are in the pyaurorax.sources module, or at the top level using the\n        pyaurorax.SOURCE_TYPE_* variables.\n    display_name: the new display name for the data source, defaults to None\n    metadata: the new metadata for the data source, defaults to None\n    maintainers: the new maintainer AuroraX account email addresses, defaults to None\n    ephemeris_metadata_schema: a list of dictionaries capturing the metadata\n        keys and values that can appear in ephemeris records associated with\n        the data source, defaults to None\n    data_product_metadata_schema: a list of dictionaries capturing the metadata\n        keys and values that can appear in data product records associated with\n        the data source, defaults to None</p>\n\n<p>Returns:\n    the updated data source</p>\n\n<p>Raises:\n    pyaurorax.exceptions.AuroraXMaxRetriesException: max retry error\n    pyaurorax.exceptions.AuroraXUnexpectedContentTypeException: unexpected error\n    pyaurorax.exceptions.AuroraXNotFoundException: data source not found\n    pyaurorax.exceptions.AuroraXBadParametersException: missing parameters</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">program</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">platform</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">source_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">display_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">owner</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">maintainers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ephemeris_metadata_schema</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">data_product_metadata_schema</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">sources</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">data_source</span><span class=\"o\">.</span><span class=\"n\">DataSource</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.sources.DataSource", "modulename": "pyaurorax.sources", "qualname": "DataSource", "kind": "class", "doc": "<p>Data source object</p>\n\n<p>Attributes:\n    identifier: the unique AuroraX ID for this data source\n    program: the program for this data source\n    platform: the platform for this data source\n    instrument_type: the instrument type for this data source\n    source_type: the data source type for this data source. Options are\n        in the pyaurorax.sources module, or at the top level using the\n        pyaurorax.SOURCE_TYPE_* variables.\n    display_name: the display name for this data source\n    metadata: metadata for this data source (arbitrary keys and values)\n    owner: the owner's email address of this data source\n    maintainers: the email addresses of AuroraX accounts that can alter\n        this data source and its associated records\n    ephemeris_metadata_schema: a list of dictionaries capturing the metadata\n        keys and values that can appear in ephemeris records associated with\n        this data source\n    data_product_metadata_schema: a list of dictionaries capturing the metadata\n        keys and values that can appear in data product records associated with\n        this data source\n    format: the format used when printing the data source, defaults to\n        \"full_record\". Other options are in the pyaurorax.sources module, or\n        at the top level using the pyaurorax.FORMAT_* variables.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "pyaurorax.sources.DataSourceStatistics", "modulename": "pyaurorax.sources", "qualname": "DataSourceStatistics", "kind": "class", "doc": "<p>Data source statistics object</p>\n\n<p>Attributes:\n    earliest_ephemeris_loaded: timestamp of the earliest ephemeris record\n    latest_ephemeris_loaded: timestamp of the latest ephemeris record\n    ephemeris_count: total number of ephemeris records for this data source\n    earliest_data_product_loaded: timestamp of the earliest data_product record\n    latest_data_product_loaded: timestamp of the latest data product record\n    data_product_count: total number of ephemeris records for this data source</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "pyaurorax.util", "modulename": "pyaurorax.util", "kind": "module", "doc": "<p>The util module provides helper methods such as converting\narbitrary geographic locations to North/South B-trace geographic\nlocations.</p>\n\n<p>Note that all functions and classes from submodules are all imported\nat this level of the util module. They can be referenced from\nhere instead of digging in deeper to the submodules.</p>\n"}, {"fullname": "pyaurorax.util.ground_geo_to_nbtrace", "modulename": "pyaurorax.util", "qualname": "ground_geo_to_nbtrace", "kind": "function", "doc": "<p>Convert geographic location to North B-Trace geographic\nlocation</p>\n\n<p>The timestamp is required because when calculating the B-trace\nvalues, the location is converted into geomagnetic coordinates.\nThis conversion is different based on the timestamp since the\nmagnetic coordinates change over time.</p>\n\n<p>Note: aacgmv2 must be installed. To install it, you can run\n\"python -m pip install pyaurorax[aacgmv2]\".</p>\n\n<p>Args:\n    geo_location: a Location object representing the\n        geographic location\n    dt: timestamp for this set of lat and lons</p>\n\n<p>Returns:\n    the north B-trace location as a Location object</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">geo_location</span><span class=\"p\">:</span> <span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">location</span><span class=\"o\">.</span><span class=\"n\">Location</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">location</span><span class=\"o\">.</span><span class=\"n\">Location</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyaurorax.util.ground_geo_to_sbtrace", "modulename": "pyaurorax.util", "qualname": "ground_geo_to_sbtrace", "kind": "function", "doc": "<p>Convert geographic location to South B-Trace geographic\nlocation</p>\n\n<p>The timestamp is required because when calculating the B-trace\nvalues, the location is converted into geomagnetic coordinates.\nThis conversion is different based on the timestamp since the\nmagnetic coordinates change over time.</p>\n\n<p>Note: aacgmv2 must be installed. To install it, you can run\n\"python -m pip install pyaurorax[aacgmv2]\".</p>\n\n<p>Args:\n    geo_location: a Location object representing the\n        geographic location\n    dt: timestamp for this set of lat and lons</p>\n\n<p>Returns:\n    the south B-trace location as a Location object</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">geo_location</span><span class=\"p\">:</span> <span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">location</span><span class=\"o\">.</span><span class=\"n\">Location</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyaurorax</span><span class=\"o\">.</span><span class=\"n\">location</span><span class=\"o\">.</span><span class=\"n\">Location</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();